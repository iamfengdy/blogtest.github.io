<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>//posts/20210819-4a17b156.html</url>
    <content><![CDATA[<!-- toc -->
<p>[TOC]</p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>web攻防之业务安全实战指南</title>
    <url>//posts/20210415-eec73dee.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/e4a4ca10a2ed4f73bc97db61936227f0.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据治理与安全-从理论到开源实践</title>
    <url>//posts/20210415-93f88f89.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/52d36cac468343e3abc9c59093922a1a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>密码编码学与网络安全-原理与实践</title>
    <url>//posts/20210415-389f5021.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/602c6373b5514e57b2b5fb9131de24db.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学与网络安全</title>
    <url>//posts/20210415-3f55a4df.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/c2933b54b46c415d9e0c7c97cec1b669.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>linux网络安全技术与实现</title>
    <url>//posts/20210415-e212f44c.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9cf411b49ee9452a9fcf7fd855e63c1f.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>web应用安全权威指南</title>
    <url>//posts/20210415-63531efa.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/eff043c39d4b4acaac96180295e7bc09.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>白帽子讲web安全</title>
    <url>//posts/20210415-7345b598.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/a7e55d5ccf0f4e1fa839643c63a6823e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl-hash算法</title>
    <url>//posts/20211108-1aa3a56c.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="openssl"><a class="markdownIt-Anchor" href="#openssl"></a> openssl</h2>
<p>使用<code>openssl</code>命令行进行加解密，需要注意的是</p>
<p>在<code>openssl v1.1.0</code>之后默认的摘要算法由<code>MD5</code>更改为<code>SHA256</code>;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key_and_iv</span>(<span class="params">self, salt</span>):</span></span><br><span class="line">    salt = salt <span class="keyword">or</span> <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    password = self.password</span><br><span class="line">    key_length = self.key_length</span><br><span class="line">    iv_length = self.iv_length</span><br><span class="line">    d = _d = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(d) &lt; key_length + iv_length:</span><br><span class="line">        <span class="comment"># openssl 1.1.0+（具体版本需要看官方标准）以上，或者在openssl中指定hash方式</span></span><br><span class="line">        <span class="comment"># _d = Hash.SHA256.new(_d+password+salt).digest()</span></span><br><span class="line">        _d = Hash.MD5.new(_d+password+salt).digest()</span><br><span class="line">        d += _d</span><br><span class="line">    key = d[:key_length]</span><br><span class="line">    iv = d[key_length:key_length+iv_length]</span><br><span class="line">    <span class="keyword">return</span> key, iv</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>黑客与安全技术指南</title>
    <url>//posts/20210415-d0ea6162.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9fa9621377534a84882367c3e1acc78e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>算法图解</title>
    <url>//posts/20210414-7f9ba295.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/c90f412aee5c4fb28ba53fbfff8eee4d.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>复杂度分析</title>
    <url>//posts/20210118-a1a87ec3.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h1>
<h2 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h2>
<p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>表示，若有某个辅助函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>,使得当n趋近于无穷大时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)/f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的极限值为不等于零的常数，则称<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的同数量级函数。记作<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>,称<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>为算法的渐进时间复杂度，简称时间复杂度；</p>
<h2 id="计算方法"><a class="markdownIt-Anchor" href="#计算方法"></a> 计算方法</h2>
<p>找出算法的基本操作，然后根据响应的语句确定执行次数，再找出对应的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>；</p>
<h2 id="常型"><a class="markdownIt-Anchor" href="#常型"></a> 常型</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>f(n)</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>常数阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>与问题规模n无关的常数</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>e</mi><mi>m</mi><mi>p</mi><mo>=</mo><mi>i</mi><mo separator="true">;</mo><mi>i</mi><mo>=</mo><mi>j</mi><mo separator="true">;</mo><mi>j</mi><mo>=</mo><mi>t</mi><mi>e</mi><mi>m</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">temp=i; i=j; j=temp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span></span></span></span></td>
</tr>
<tr>
<td>线性阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>与n正相关</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mi>i</mi><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mi>i</mi><mo>&lt;</mo><mi>n</mi><mo separator="true">;</mo><mi>i</mi><mo>+</mo><mo>+</mo><mo stretchy="false">)</mo><mrow></mrow></mrow><annotation encoding="application/x-tex">for(i=0;i&lt;n;i++){}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mclose">)</span><span class="mord"></span></span></span></span></td>
</tr>
<tr>
<td>K次方阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>k</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td>由嵌套最深的最内层的语句的频度决定</td>
<td></td>
</tr>
<tr>
<td>指数阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td></td>
<td></td>
</tr>
<tr>
<td>对数阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">\log_2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.995732em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></td>
<td>二分</td>
<td></td>
</tr>
<tr>
<td>线性对数阶</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">n\log_2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.995732em;vertical-align:-0.247em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></td>
<td>n个for循环的二分</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="空间复杂度"><a class="markdownIt-Anchor" href="#空间复杂度"></a> 空间复杂度</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n)=O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>算法</title>
    <url>//posts/20210414-b7e144d1.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8292de07ce7a46b6925a6ac523000b7a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫算法</title>
    <url>//posts/20210218-1521f4.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<p>据说著名犹太历史学家Josephus有过以下的故事：在罗马人占领乔塔帕特后，39个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓到，于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，直到所有人都自杀身亡为止。然而Josephus和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏；</p>
<h1 id="python实现版"><a class="markdownIt-Anchor" href="#python实现版"></a> python实现版</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ysf</span>(<span class="params">total_num, kill_index</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;约瑟夫算法</span></span><br><span class="line"><span class="string">    :param total 总人数，从1开始</span></span><br><span class="line"><span class="string">    :param kill_index 自杀索引</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dq = deque(<span class="built_in">range</span>(total_num, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(dq) &gt;= kill_index:</span><br><span class="line">        dq.rotate(kill_index-<span class="number">1</span>)</span><br><span class="line">        dq.pop()</span><br><span class="line">    <span class="built_in">print</span>(dq)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode-cookbook</title>
    <url>//posts/20210414-7d894f7c.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/454529d4e7684aafbbbb8e380f9c729a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>散列算法</title>
    <url>//posts/20210218-ea617ba8.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>​	散列（Hash）算法，它是一种单向算法，用户可以通过该算法对目标信息生成一段特定长度的唯一Hash值，却不能反向操作；</p>
<p>​	常用于在不可还原的密码存储、信息完整性校验等；</p>
<h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2>
<ol>
<li>MD2</li>
<li>MD4</li>
<li>MD5</li>
<li>HAVAL</li>
<li>SHA,可以对任意长度的数据运算生成一个160位的数值；</li>
<li>SHA-1</li>
<li>HMAC</li>
<li>HMAC-MD5</li>
<li>HMAC-SHA1</li>
</ol>
<h2 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h2>
<ol>
<li>
<p>SHA-1与MD5<br />
均由MD4导出，</p>
<p>不同之处：<br />
对强行供给的安全性<br />
最显著和最重要的区别是SHA-1摘要比MD5摘要长32位；<br />
使用强行技术，产生任何一个报文使其摘要等于给定报摘要的难度对MD5是2128数量级的操作，而对SHA-1则是2160数量级的操作。这样，SHA-1对强行攻击有更大的强度；<br />
对密码分析的安全性,由于MD5的设计，易受密码分析的攻击，SHA-1显得不易受这样的攻击；<br />
速度,在相同的硬件上，SHA-1的运行速度比MD5慢；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>大话数据结构</title>
    <url>//posts/20210415-6fec294e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/f3dbc3ca870646c48ed44a04bc0b49cd.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>data-structure</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法分析-c语言描述</title>
    <url>//posts/20210414-1ff806a4.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/6ae1315dfa4c4af29ec5f7821e4e8e74.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>data-structure</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>//posts/20210218-7b216a3b.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<ul>
<li>每个节点有零个或多个子节点</li>
<li>没有父节点的节点称为根节点</li>
<li>每一个非根节点有且只有一个父节点</li>
<li>除了根节点外，每个子节点可以分为多个不相交的子树；</li>
</ul>
<h2 id="名词"><a class="markdownIt-Anchor" href="#名词"></a> 名词</h2>
<h3 id="节点的度"><a class="markdownIt-Anchor" href="#节点的度"></a> 节点的度</h3>
<p>一个节点含有的子树的个数</p>
<h3 id="叶节点或终端节点"><a class="markdownIt-Anchor" href="#叶节点或终端节点"></a> 叶节点（或终端节点）</h3>
<p>度为0的节点</p>
<h3 id="分支节点或非终端节点"><a class="markdownIt-Anchor" href="#分支节点或非终端节点"></a> 分支节点（或非终端节点）</h3>
<p>度不为0的节点</p>
<h3 id="双亲节点或父节点"><a class="markdownIt-Anchor" href="#双亲节点或父节点"></a> 双亲节点（或父节点）</h3>
<p>若一个节点含有子节点，则该节点为其子节点的父节点</p>
<h3 id="孩子节点或子节点"><a class="markdownIt-Anchor" href="#孩子节点或子节点"></a> 孩子节点（或子节点）</h3>
<h3 id="兄弟节点"><a class="markdownIt-Anchor" href="#兄弟节点"></a> 兄弟节点</h3>
<p>具有相同父节点的节点</p>
<h3 id="树的度"><a class="markdownIt-Anchor" href="#树的度"></a> 树的度</h3>
<p>一棵树中，最大的节点的度</p>
<h3 id="节点的层次"><a class="markdownIt-Anchor" href="#节点的层次"></a> 节点的层次</h3>
<p>根节点为1，以此类推</p>
<h3 id="高度树-节点"><a class="markdownIt-Anchor" href="#高度树-节点"></a> 高度（树、节点）</h3>
<p>从根（高度为1）开始向叶子节点数，即从上往下数</p>
<h3 id="深度树-节点"><a class="markdownIt-Anchor" href="#深度树-节点"></a> 深度（树、节点）</h3>
<p>从叶子节点往该j节点数，即从下往上数</p>
<h3 id="堂兄弟节点"><a class="markdownIt-Anchor" href="#堂兄弟节点"></a> 堂兄弟节点</h3>
<p>父节点在同一层的节点</p>
<h3 id="节点的祖先"><a class="markdownIt-Anchor" href="#节点的祖先"></a> 节点的祖先</h3>
<p>从根到该节点所经分支上的所有节点</p>
<h3 id="子孙"><a class="markdownIt-Anchor" href="#子孙"></a> 子孙</h3>
<p>以某节点为根的子树中任一节点</p>
<h3 id="森林"><a class="markdownIt-Anchor" href="#森林"></a> 森林</h3>
<p>有m（m&gt;0）棵互不相交的树的集合</p>
<h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2>
<h3 id="无序树自由树"><a class="markdownIt-Anchor" href="#无序树自由树"></a> 无序树（自由树）</h3>
<p>树中任意节点的子节点之间没有顺序关系</p>
<h3 id="有序树"><a class="markdownIt-Anchor" href="#有序树"></a> 有序树</h3>
<p>与无序树相对应</p>
<h3 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h3>
<p>每个节点最多含有两个子树的树，且左右子树顺序不能颠倒</p>
<h3 id="完全二叉树"><a class="markdownIt-Anchor" href="#完全二叉树"></a> 完全二叉树</h3>
<ul>
<li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树；</li>
<li>对于深度为K的，有n个结点的二叉树，当且仅当其每一个结点都与深度为K的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树</li>
</ul>
<h3 id="满二叉树"><a class="markdownIt-Anchor" href="#满二叉树"></a> 满二叉树</h3>
<p>除最后一层无任何子节点外，每一层上的所有结点都有两个子结点二叉树；<br />
（如果一棵二叉树的结点要么是叶子结点，要么它有两个孩子结点，这样的树就是满二叉树。）</p>
<h3 id="霍夫曼树最优二叉树"><a class="markdownIt-Anchor" href="#霍夫曼树最优二叉树"></a> 霍夫曼树（最优二叉树）</h3>
<p>带权路径最短的二叉树</p>
<h3 id="平衡二叉树"><a class="markdownIt-Anchor" href="#平衡二叉树"></a> 平衡二叉树</h3>
<p>它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树</p>
<h2 id="二叉树性质"><a class="markdownIt-Anchor" href="#二叉树性质"></a> 二叉树性质</h2>
<ol>
<li>在非空二叉树中，第i层的结点总数不超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mi>i</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{i-1}, i&gt;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li>深度为h的二叉树节点个数最少有h个，最多<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>h</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1, h&gt;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li>对于任意一棵二叉树，如果其叶结点数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">N_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，而度数为2的结点总数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">N_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>N</mi><mn>0</mn></msub><mo>=</mo><msub><mi>N</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N_0=N_2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</li>
<li>具有n个结点的完全二叉树的深度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">log_2^{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.120547em;vertical-align:-0.266308em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.433692em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>有N个结点的完全二叉树各结点如果用顺序方式存储，则结点之间有如下关系：
<ol>
<li>若I为结点编号则 如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">I&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则其父结点的编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">I/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord">/</span><span class="mord">2</span></span></span></span>;</li>
<li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi><mo>&lt;</mo><mo>=</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">2*I&lt;=N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，则其左儿子（即左子树的根结点）的编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">2*I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>；若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">2*I&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，则无左儿子；</li>
<li>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">2*I+1&lt;=N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，则其右儿子的结点编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2*I+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>∗</mo><mi>I</mi><mo>+</mo><mn>1</mn><mo>&gt;</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">2*I+1&gt;N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，则无右儿子。</li>
</ol>
</li>
<li>给定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>个节点，能构成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>种不同的二叉树。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>为卡特兰数的第N项，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>C</mi><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mi>n</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h(n)=C(2*n,n)/(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>;</li>
<li>设有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个枝点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>为所有枝点的道路长度总和，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span></span></span></span>为叶的道路长度总和, 则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo>=</mo><mi>I</mi><mo>+</mo><mn>2</mn><mi>i</mi><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">J=I+2i[4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span></span></span></span>；</li>
</ol>
<h2 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h2>
<h3 id="先序遍历"><a class="markdownIt-Anchor" href="#先序遍历"></a> 先序遍历</h3>
<p>首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树</p>
<h3 id="中序遍历"><a class="markdownIt-Anchor" href="#中序遍历"></a> 中序遍历</h3>
<p>首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树</p>
<h3 id="后序遍历"><a class="markdownIt-Anchor" href="#后序遍历"></a> 后序遍历</h3>
<p>首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根</p>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>data-structure</category>
      </categories>
  </entry>
  <entry>
    <title>算法基础</title>
    <url>//posts/20210218-fa1802cb.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h2>
<h3 id="伪代码"><a class="markdownIt-Anchor" href="#伪代码"></a> 伪代码</h3>
<blockquote>
<p>伪代码是有代码规则的</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">INSERTION-SORT(A)</span><br><span class="line">for i=2 to A.length</span><br><span class="line">    key = A[i]</span><br><span class="line">    //将A[i] 插入到 A[1, ..., i-1]</span><br><span class="line">    j = i - 1</span><br><span class="line">    while j&gt;0 and A[i] &gt; key</span><br><span class="line">        A[j+1] = A[i]</span><br><span class="line">        j = j - 1</span><br><span class="line">    A[j+1] = key</span><br></pre></td></tr></table></figure>
<h3 id="循环不等式"><a class="markdownIt-Anchor" href="#循环不等式"></a> 循环不等式</h3>
<p>其实就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">A[1, …, i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>序列中不变的性质，在上述插入算法中的循环不等式的性质就是序列是递增序列；</p>
<p>循环不等式的，必须证明三条性质：</p>
<pre><code>1. 初始化：循环的第一次迭代之前，它为真；
2. 保持：如果循环的某次迭代之前它为真，那么下次迭代之前它仍为真；
3. 终止：在循环终止时，不变式为我们提供一个有用的性质，该性质有助于证明算法是正确的
</code></pre>
<h3 id="伪代码一些约定"><a class="markdownIt-Anchor" href="#伪代码一些约定"></a> 伪代码一些约定</h3>
<ol>
<li>缩进表示块结构；</li>
<li><code>for while repeat-until​</code>等循环结构以及<code>if－else​</code>等条件结构与其他语言有类似的结构；其中<code>to​</code>表示递增，<code>downto</code>表示递减，还有当循环计数器以大于1的一个量改变时，该改变量更在可选关键词by之后，其实就是每次循环的改变量，即step步数</li>
<li><code>//</code>表示注释</li>
<li><code>i=j=e</code>表示多重赋值，即<code>i=e, j=e</code>；</li>
<li>无显示说明，不使用全局变量；</li>
<li>通过下标访问数组元素；</li>
<li><code>NIL</code>表示空；布尔运算符都是短路运算即只有为true之后的运算就掠过；</li>
<li>所有为值传递；</li>
</ol>
<h2 id="分析算法"><a class="markdownIt-Anchor" href="#分析算法"></a> 分析算法</h2>
<p>分析一个算法的优劣，会有很多的影响因素比如内存、硬件资源、网络资源等，还包括数据类型、内存模型、计算机指令等因素；</p>
<p>输入规模量度，用来表示输入规模，比如输入是一个图，则输入规模可以用定点个数和边数来进行描述；</p>
<p>以上述的插入排序进行分析</p>
<h3 id="最优情况"><a class="markdownIt-Anchor" href="#最优情况"></a> 最优情况</h3>
<p>即输入序列是正序；</p>
<p><img src="/assets/images/1c475be77361452da151f9c1a14a2b7f.png" alt="1c475be77361452da151f9c1a14a2b7f" /></p>
<p><img src="/assets/images/e58927069e624504a13b97c3fdcff7ee.png" alt="e58927069e624504a13b97c3fdcff7ee" /></p>
<h3 id="最差情况"><a class="markdownIt-Anchor" href="#最差情况"></a> 最差情况</h3>
<p>输入序列是倒序，这个比较看重，因为这是一个算法的上限，而且它出现的概率比较大比如检索时找不到；</p>
<h3 id="平均情况"><a class="markdownIt-Anchor" href="#平均情况"></a> 平均情况</h3>
<p>往往与最差情况差不多</p>
<h3 id="增长量级"><a class="markdownIt-Anchor" href="#增长量级"></a> 增长量级</h3>
<p>进一步的抽象，将常系数和低阶项抽象；</p>
<p><img src="/assets/images/e04db8f3fc0041678c94b19b4ffb828b.png" alt="e04db8f3fc0041678c94b19b4ffb828b" /></p>
<h2 id="设计算法"><a class="markdownIt-Anchor" href="#设计算法"></a> 设计算法</h2>
<p>上述的插入排序使用的增量法，即将单个元素插入到适当位置</p>
<h3 id="分治法"><a class="markdownIt-Anchor" href="#分治法"></a> 分治法</h3>
<ol>
<li>
<p>思想</p>
<p>将原问题分解为几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后在合并这些子问题的解来建立原问题的解；</p>
</li>
<li>
<p>步骤</p>
<ol>
<li>分解，分解原问题为多个小问题；</li>
<li>解决，解决小问题；</li>
<li>合并，合并小问题的解为原问题的解；</li>
</ol>
</li>
<li>
<p>实例，归并排序</p>
</li>
<li>
<p>适用</p>
<ol>
<li>
<p>该问题的规模缩小到一定的程度就可以容易地解决；</p>
<blockquote>
<p>绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加</p>
</blockquote>
</li>
<li>
<p>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质</p>
<blockquote>
<p>是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用</p>
</blockquote>
</li>
<li>
<p>利用该问题分解出的子问题的解可以合并为该问题的解；</p>
<blockquote>
<p>关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法</p>
</blockquote>
</li>
<li>
<p>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题</p>
<blockquote>
<p>涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用动态规划法较好</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h3 id="分析分治算法"><a class="markdownIt-Anchor" href="#分析分治算法"></a> 分析分治算法</h3>
<h4 id="递归式分析"><a class="markdownIt-Anchor" href="#递归式分析"></a> 递归式分析</h4>
<p>分治算法运行时间的递归式来自基本模式的三个步骤：假设T(n)是规模为n的一个问题的运行时间,</p>
<ol>
<li>若问题的规模足够小，比如某个常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>（即规模为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>的问题），当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">c \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>时，则可以直接求解，也就是说规模<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>是一个界值，这时可以将其时间复杂度写作<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</li>
<li>否则，把原问题分解成<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>个子问题，每个子问题的规模时原问题的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">1/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault">b</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>不一定就<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">==b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>，在二分归并排序时时相等的）；为了求解一个规模为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">n/b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">b</span></span></span></span>的子问题，需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n/b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>的时间，所以需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">aT(n/b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>的时间来求解<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>个子问题</li>
<li>若分解成子问题需要时间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，合并子问题的解成原问题的解需要时间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>;</li>
</ol>
<p>递归式为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>≤</mo><mi>c</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo stretchy="false">)</mo><mo>+</mo><mi>D</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>C</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>other</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">T(n) =
\begin{cases}
  \Theta(1),  &amp; \text{if } n \le c \\
  aT(n/b)+D(n)+C(n), &amp; \text{other}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">other</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<blockquote>
<p>这是针对一个问题的一个层级进行分析的；其实也是利用递归</p>
</blockquote>
<h4 id="归并排序算法的分析"><a class="markdownIt-Anchor" href="#归并排序算法的分析"></a> 归并排序算法的分析</h4>
<p>分析结果是其运行时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>；</p>
<p>分析建立归并排序n个数的最坏运行时间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，</p>
<p>​	当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">＝</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">n＝1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">＝</span><span class="mord">1</span></span></span></span>时即归并一个元素需要一个常量时间（即在排除其他影响下，该时间是一个常量）;</p>
<p>​	当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，分析如下：</p>
<p>​		分析：分析步骤仅计算子数组的中间位置，这里也是一个常量时间，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(n) = O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</p>
<p>​		解决：递归的求解两个规模均为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span>的子问题，将贡献<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2T(n/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>的运行时间；</p>
<p>​		合并：在一个具有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个元素的子数组上进行merge需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的时间，所以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C(n)=O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>；</p>
<p>由上图并结合2.2的讲解，即当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = 2T(n/2)+O(1)+O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n)=O(n)+O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>是一个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>得一个线性函数，所以可得</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n=1</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n&gt;1</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">T(n) =
\begin{cases}
  \Theta(1),  &amp; \text{if n=1} \\
  2T(n/2)+\Theta(n), &amp; \text{if n&gt;1}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n=1</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n&gt;1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>假设常量c代表求解规模为1得问题所需得时间以及在分解步骤与合并步骤处理每个数组元素所需得时间；则可以将递归式图2.1重写为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n=1</mtext></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>2</mn><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mi>n</mi><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>if n&gt;1</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">T(n) =
\begin{cases}
  c,  &amp; \text{if n=1} \\
  2T(n/2)+cn, &amp; \text{if n&gt;1}
\end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n=1</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if n&gt;1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p><img src="/assets/images/f2c691edfeb54f9989a7ccc9f2d25c34.png" alt="f2c691edfeb54f9989a7ccc9f2d25c34" /></p>
<blockquote>
<p>注意看分析，其实T(n) = Θ(合并每层的时间) x 总行数 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><msubsup><mi>g</mi><mn>2</mn><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">nlog_2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9425479999999999em;vertical-align:-0.24810799999999997em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span></p>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>introduction-to-algorithms</category>
      </categories>
  </entry>
  <entry>
    <title>8大算法</title>
    <url>//posts/20210218-42278ffa.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<img src="/assets/images/6db5ad46ffa14edfa0916a4c02680bc8.jpg" alt="6db5ad46ffa14edfa0916a4c02680bc8"  />
<h2 id="分类比较"><a class="markdownIt-Anchor" href="#分类比较"></a> 分类比较</h2>
<table>
<thead>
<tr>
<th>类别</th>
<th>子分类</th>
<th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>平均情况</th>
<th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>最好情况</th>
<th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>最差情况</th>
<th><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>辅助空间</th>
<th>稳定性</th>
<th>原址排序</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入排序</td>
<td>直接插入</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
<td>是</td>
</tr>
<tr>
<td></td>
<td>希尔</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{1.3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
<td>是</td>
</tr>
<tr>
<td>选择排序</td>
<td>直接选择</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
<td>是</td>
</tr>
<tr>
<td></td>
<td>堆排序</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
<td>是</td>
</tr>
<tr>
<td>交换排序</td>
<td>冒泡排序</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
<td>否</td>
</tr>
<tr>
<td></td>
<td>快速排序</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n}) \leq S(n) \leq O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
<td>否</td>
</tr>
<tr>
<td>归并排序</td>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>lg</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\lg{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
<td>否</td>
</tr>
<tr>
<td>桶（基数）排序</td>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d(r+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mi>r</mi><mi>d</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d(rd+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mi>r</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d(r+n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>r</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(dr+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
<td>否</td>
</tr>
</tbody>
</table>
<blockquote>
<p>基数排序中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>表示关键字的基数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>表示长度，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>表示关键字的个数</p>
</blockquote>
<blockquote>
<p>稳定性：指在排序算法中，相同值的两个元素，在输入数组中先出现的数在输出数组中也先出现</p>
</blockquote>
<blockquote>
<p>原址排序：基本上不需要额外辅助的的空间，允许少量额外的辅助变量进行的排序。就是在原来的排序数组中比较和交换的排序；</p>
</blockquote>
<h2 id="算法选择准则"><a class="markdownIt-Anchor" href="#算法选择准则"></a> 算法选择准则</h2>
<ol>
<li>待排序的记录数目n的大小；</li>
<li>记录本身数据量的大小，也就是记录中除关键字外的其他信息量的大小；</li>
<li>关键字的结构及其分布情况；</li>
<li>稳定性要求；</li>
</ol>
<h2 id="方案选择"><a class="markdownIt-Anchor" href="#方案选择"></a> 方案选择</h2>
<blockquote>
<p>设待排序元素的个数为n</p>
</blockquote>
<ol>
<li>
<p>当n较大</p>
<ol>
<li>快速排序，是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短</li>
<li>堆排序，如果内存空间允许且要求稳定性的</li>
<li>归并排序，它有一定数量的数据移动，所以我们可能过与插入排序组合，先获得一定长度的序列，然后再合并，在效率上将有所提高。</li>
</ol>
<blockquote>
<p>当n较大，内存空间允许，且要求稳定性时选择归并排序；</p>
</blockquote>
</li>
<li>
<p>n较小时</p>
<ol>
<li>直接插入排序，当元素分布有序，直接插入排序将大大减少比较次数和移动记录的次数；</li>
<li>直接选择排序，元素分布有序，如果不要求稳定性，选择直接选择排序；</li>
</ol>
</li>
<li>
<p>一般不使用或不直接使用传统的冒泡排序；</p>
</li>
<li>
<p>基数排序，它是一种稳定的排序算法，但有一定的局限性：</p>
<ol>
<li>关键字可分解；</li>
<li>记录的关键字位数较少，如果密集更好；</li>
<li>如果是数字时，最好是无符号的，否则将增加相应的映射复杂度，可先将其正负分开排序；</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>算法导论</title>
    <url>//posts/20210414-349a67d1.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/85e526b2e0504e08a8a420c1595676d8.pdf">PDF</a></h1>
<h2 id="课后答案-pdf"><a class="markdownIt-Anchor" href="#课后答案-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/2a9eef5a05c842c2ada294fc7f9f83fe.pdf">课后答案 PDF</a></h2>
<h2 id="第三章答案-pdf"><a class="markdownIt-Anchor" href="#第三章答案-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/05ed6012d6904a44826bdeb5db893821.pdf">第三章答案 PDF</a></h2>
<h2 id="课后答案-英文-pdf"><a class="markdownIt-Anchor" href="#课后答案-英文-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/7d2e16982f354e6a8b026828243ffa41.pdf">课后答案 英文 PDF</a></h2>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>introduction-to-algorithms</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>交换排序</title>
    <url>//posts/20210218-6971cdf2.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h2>
<p>将待排序列中的相邻数据比较，大的下沉，小的上升</p>
<h1 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h1>
<h2 id="基本思想-2"><a class="markdownIt-Anchor" href="#基本思想-2"></a> 基本思想</h2>
<p>同交换排序</p>
<h2 id="基本思路"><a class="markdownIt-Anchor" href="#基本思路"></a> 基本思路</h2>
<p>相邻数比较</p>
<h2 id="思路1"><a class="markdownIt-Anchor" href="#思路1"></a> 思路1</h2>
<p>加入一标志性变量exchange，用于标志某一趟排序过程中是否有数据交换，如果进行某一趟排序时并没有进行数据交换，则说明数据已经按要求排列好，可立即结束排序</p>
<h2 id="思路2"><a class="markdownIt-Anchor" href="#思路2"></a> 思路2</h2>
<p>设置一标志性变量pos,用于记录每趟排序中最后一次进行交换的位置。由于pos位置之后的记录均已交换到位,故在进行下一趟排序时只要扫描到pos位置即可</p>
<h2 id="思路3"><a class="markdownIt-Anchor" href="#思路3"></a> 思路3</h2>
<p>在每趟排序中进行正向和反向两遍冒泡的方法一次可以得到两个最终值(最大者和最小者) , 从而使排序趟数几乎减少了一半；<br />
即从当前值分别向前和向后冒泡</p>
<h1 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h1>
<h2 id="基本思路-2"><a class="markdownIt-Anchor" href="#基本思路-2"></a> 基本思路</h2>
<ol>
<li>选择一个基准元素（通常是第一或最后一个）</li>
<li>遍历待排序列，将每个元素与基准元素比较，若基准元素小则将两个元素位置替换</li>
<li>遍历之后，此时基准元素在排好序后的正确位置</li>
<li>然后得到基准元素左（小）右（大）两个区间，分别对两个区间重复（1-4）步骤；</li>
<li>得到有序列表；</li>
</ol>
<h2 id="思路1-2"><a class="markdownIt-Anchor" href="#思路1-2"></a> 思路1</h2>
<p>只对长度大于k的子序列递归调用快速排序,让原序列基本有序，然后再对整个基本有序序列用插入排序算法排序。实践证明，改进后的算法时间复杂度有所降低，且当k取值为 8 左右时,改进算法的性能最佳；</p>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>//posts/20210218-96555fb2.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h2>
<p>将一个记录插入到已排序好的有序表中，从而得到一个新的有序表；<br />
即：先将序列的第1个记录看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止</p>
<h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2>
<ol>
<li>直接插入</li>
<li>二分插入</li>
</ol>
<h2 id="稳定性"><a class="markdownIt-Anchor" href="#稳定性"></a> 稳定性</h2>
<p>相等的插入元素会放在相等元素的后面，所以插入排序是稳定的；<br />
即相等的数据位置不会交换；</p>
<h1 id="直接插入"><a class="markdownIt-Anchor" href="#直接插入"></a> 直接插入</h1>
<h2 id="基本思想-2"><a class="markdownIt-Anchor" href="#基本思想-2"></a> 基本思想</h2>
<p>设立哨兵，作为临时存储和判断数组边界之用；</p>
<h2 id="思路1"><a class="markdownIt-Anchor" href="#思路1"></a> 思路1</h2>
<ol>
<li>设置哨兵A为待插入的数据</li>
<li>设置开始查找的位置i</li>
<li>在数组中进行搜索，搜索中将第i个记录后移，直到array[i] &lt;= A；</li>
</ol>
<blockquote>
<p><em>如果遇到相等的时会造成不稳定</em></p>
</blockquote>
<ol start="4">
<li>将A插入到array[i+1]位置</li>
</ol>
<h2 id="思路2"><a class="markdownIt-Anchor" href="#思路2"></a> 思路2</h2>
<ol>
<li>设置哨兵为上次插入的位置为i</li>
<li>比较待插入数据和上次插入数据；如果待插入数据大，则从i向后搜索；如果小，则向前搜索</li>
</ol>
<h1 id="二分插入"><a class="markdownIt-Anchor" href="#二分插入"></a> 二分插入</h1>
<h2 id="基本思想-3"><a class="markdownIt-Anchor" href="#基本思想-3"></a> 基本思想</h2>
<p>对待插入区间进行对折，直到能确定插入位置</p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ol>
<li>计算有序表 0 ~ i 的中间点j，其值为A，用待插入数据B元素与A进行比较，如果B大，则取区间[0, j]；反之，则取区间[j, i]</li>
<li>对取得的区间重复步骤（1）缩小范围，范围依次缩小为 1/2 1/4 1/8 …快速的确定出插入位置</li>
<li>确定位置之后，将之后的序列后移，并将元素插入到相应位置；</li>
</ol>
<h1 id="希尔排序缩小增量排序"><a class="markdownIt-Anchor" href="#希尔排序缩小增量排序"></a> 希尔排序（缩小增量排序）</h1>
<h2 id="基本思想-4"><a class="markdownIt-Anchor" href="#基本思想-4"></a> 基本思想</h2>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序；</p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<ol>
<li>选择一个增量序列，比如d[n/2, n/4, n/8, … 1]，其值n为待排序个数；</li>
<li>先将待排序列按照指定增量d（从第一个增量开始）分成若干组子序列，每组中数据的下标相差d，对组中的全部元素进行直接插入排序（是在原序列中操作的，不会再需要额外空间）；</li>
<li>缩小增量，重复步骤（2），直到d=1；</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>//posts/20210218-1599bffe.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h2>
<p>将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的；然后再把有序子序列合并为整体有序序列</p>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ol>
<li>将待排序列的元素每两个排序后组成一组；</li>
<li>然后将已排好序的组，两两归并排序（二路归并）；</li>
<li>重复步骤2，直到排好序；</li>
</ol>
<h1 id="二路归并"><a class="markdownIt-Anchor" href="#二路归并"></a> 二路归并</h1>
<h2 id="基本思想-2"><a class="markdownIt-Anchor" href="#基本思想-2"></a> 基本思想</h2>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<ol>
<li>分别有有序组a，b；分别设置游标i，j，初始化为0；</li>
<li>准备一长度为a+b长度的空间，设为r，并设游标k=0；</li>
<li>比较a[i]和b[j]，将大者复制到r[k]；</li>
<li>i，j，k均+1；</li>
<li>重复（3,4）步骤，直到其中一个有序表取完，然后将另一个有序表中的数据按顺序复制到r中；</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>基数排序</title>
    <url>//posts/20210218-6367b42a.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h2>
<p>将阵列分到有限数量的桶子里，每个桶子再进行排序</p>
<blockquote>
<p>子桶内排序方法不限，有可能仍是桶排序或其他排序方法</p>
</blockquote>
<h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2>
<ol>
<li>
<p>大小为[1…1000]范围内的n个整数A[1…n]待排排序；</p>
</li>
<li>
<p>把桶设为大小为10的范围，具体而言，设集合B[1]存储[1…10]的整数，集合B[2]存储   (10…20]的整数，……集合B[i]存储(   (i-1)<em>10,   i</em>10]的整数，i   =   1,2,…100。总共有  100个桶；</p>
</li>
<li>
<p>对A[1…n]从头到尾扫描一遍，把每个A[i]放入对应的桶B[j]中；</p>
</li>
<li>
<p>再对这100个桶中每个桶里的数字排序（方法不限）；</p>
</li>
<li>
<p>依次输出桶中的值，会得到有序序列；</p>
</li>
</ol>
<h2 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h2>
<ol>
<li>
<p>空间复杂度高，需要2个待排序列的空间；</p>
</li>
<li>
<p>待排的元素都要在一定的范围内；</p>
</li>
</ol>
<h1 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h1>
<h2 id="思想-2"><a class="markdownIt-Anchor" href="#思想-2"></a> 思想</h2>
<p>是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前</p>
<h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2>
<h2 id="稳定性"><a class="markdownIt-Anchor" href="#稳定性"></a> 稳定性</h2>
<p>基数排序基于分别排序，分别收集，所以是稳定的</p>
<h2 id="关键码排序"><a class="markdownIt-Anchor" href="#关键码排序"></a> 关键码排序</h2>
<p>设n 个元素的待排序列包含d 个关键码{k1，k2，…，kd}，则称序列对关键码{k1，k2，…，kd}有序是指：对于序列中任两个记录r[i]和r<a href="1%E2%89%A4i%E2%89%A4j%E2%89%A4n">j</a>都满足下列有序关系：</p>
<h3 id="关键码排序方法1"><a class="markdownIt-Anchor" href="#关键码排序方法1"></a> 关键码排序方法1</h3>
<p>最高位优先（MSD）法</p>
<ol>
<li>
<p>先按k1 排序分组，将序列分成若干子序列，同一组序列的记录中，关键码k1 相等；</p>
</li>
<li>
<p>再对各组按k2 排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码kd 对各子组排序后；</p>
</li>
<li>
<p>再将各组连接起来，便得到一个有序序列。扑克牌按花色、面值排序中介绍的方法一即是MSD 法；</p>
</li>
</ol>
<h3 id="关键码排序方法2"><a class="markdownIt-Anchor" href="#关键码排序方法2"></a> 关键码排序方法2</h3>
<p>最低位优先（LSD）法</p>
<ol>
<li>
<p>先从kd 开始排序，再对kd-1进行排序，依次重复，直到按k1排序分组分成最小的子序列后；</p>
</li>
<li>
<p>最后将各个子序列连接起来，便可得到一个有序的序列, 扑克牌按花色、面值排序中介绍的方法二即是LSD 法；</p>
</li>
</ol>
<h2 id="案例分析"><a class="markdownIt-Anchor" href="#案例分析"></a> 案例分析</h2>
<blockquote>
<p>待排序列：52张扑克牌；<br />
优先级：</p>
<blockquote>
<p>花色：黑心 &gt; 红心 &gt; 方块 &gt; 梅花；<br />
面值：2 …… A</p>
</blockquote>
</blockquote>
<h3 id="排序方法1"><a class="markdownIt-Anchor" href="#排序方法1"></a> 排序方法1</h3>
<p>先对花色排序，将其分为4 个组，即梅花组、方块组、红心组、黑心组。再对每个组分别按面值进行排序，最后，将4 个组连接起来即可</p>
<h3 id="排序方法2"><a class="markdownIt-Anchor" href="#排序方法2"></a> 排序方法2</h3>
<ol>
<li>先按13 个面值给出13 个编号组(2 号，3 号，…，A 号);</li>
<li>将牌按面值依次放入对应的编号组，分成13 堆；</li>
<li>按花色给出4 个编号组(梅花、方块、红心、黑心)，将13组中的牌取出放入对应花色组；</li>
<li>将4个花色组l连接起来就是目标有序列表；</li>
</ol>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>//posts/20210218-43d00a99.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="基本思想"><a class="markdownIt-Anchor" href="#基本思想"></a> 基本思想</h2>
<p>在待排序的一组数中，选出最小（或者最大）的一个数与第1个位置的数交换；然后在剩下的数当中再找最小（或者最大）的与第2个位置的数交换，依次类推，直到第n-1个元素（倒数第二个数）和第n个元素（最后一个数）比较为止</p>
<h2 id="稳定性"><a class="markdownIt-Anchor" href="#稳定性"></a> 稳定性</h2>
<p>在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中两个5的相对前后顺序就被破坏了，所以选择排序是一个不稳定的排序算法。</p>
<h1 id="简单选择"><a class="markdownIt-Anchor" href="#简单选择"></a> 简单选择</h1>
<h2 id="基本思想-2"><a class="markdownIt-Anchor" href="#基本思想-2"></a> 基本思想</h2>
<p>同选择排序</p>
<h2 id="思路1"><a class="markdownIt-Anchor" href="#思路1"></a> 思路1</h2>
<p>每次循环只确定一个元素（最大或最小的）</p>
<h2 id="思路2二元选择排序"><a class="markdownIt-Anchor" href="#思路2二元选择排序"></a> 思路2（二元选择排序）</h2>
<p>每次循环确定2个元素（最大和最小的）；这样就只需进行n/2趟循环</p>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>sorting</category>
      </categories>
  </entry>
  <entry>
    <title>安全配置</title>
    <url>//posts/20210219-96105070.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="安全配置"><a class="markdownIt-Anchor" href="#安全配置"></a> 安全配置</h2>
<ol>
<li>进入mongo命令行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line">use admin</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>分别创建 管理员|读写|读 用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123; user:<span class="string">&quot;cbimadmin&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;Admin@cbim&quot;</span>, roles:[ &#123; role: <span class="string">&quot;__system&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125;,&#123;role:<span class="string">&quot;root&quot;</span>, db:<span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line">db.createUser(&#123; user:<span class="string">&quot;cbimw&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;Write@cbim&quot;</span>, roles:[ &#123; role:<span class="string">&quot;readWriteAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]&#125;)</span><br><span class="line"></span><br><span class="line">db.createUser(&#123; user:<span class="string">&quot;cbimr&quot;</span>, <span class="built_in">pwd</span>: <span class="string">&quot;Read@cbim&quot;</span>, roles:[ &#123; role: <span class="string">&quot;readAnyDatabase&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]&#125;)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>修改监听地址和端口</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/mongod.conf</span><br></pre></td></tr></table></figure>
<pre><code>net:
    port: 27017             #修改端口
    bindIp: 127.0.0.1  #修改为本地ip
</code></pre>
<ol start="4">
<li>安全认证启动</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod  --config /etc/mongod.conf --auth</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
        <category>mongo</category>
      </categories>
  </entry>
  <entry>
    <title>命令参考</title>
    <url>//posts/20210414-4d7c69ea.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/d7b112b2fc83473aa8eb0d752752f04e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>database</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的增长</title>
    <url>//posts/20210218-1316f4b0.html</url>
    <content><![CDATA[<!-- toc -->
<p>[TOC]</p>
<h2 id="渐进符号"><a class="markdownIt-Anchor" href="#渐进符号"></a> 渐进符号</h2>
<h3 id="渐进确界"><a class="markdownIt-Anchor" href="#渐进确界"></a> 渐进确界</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span></p>
</blockquote>
<ul>
<li>表示一个函数的上限与下限,可以理解为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>是集合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>中的一个函数;</li>
</ul>
<p>Θ(g(n)) = {f(n)：存在正常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_1,c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得对于所有的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><msub><mi>c</mi><mn>1</mn></msub><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0 \leq c_1 * g(n) \leq f(n) \leq c_2 * g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>}</p>
<ul>
<li>
<p>换句话说，对所有n≥n0，函数f(n)在一个常量因子内等于g(n)，这时称g(n)是f(n)的一个<strong>渐进紧确界</strong>；</p>
<p><strong>渐进非负</strong>，即当n足够大时，f(n)非负；</p>
<p><strong>渐进正函数</strong>，对所有足够大的n均为正的函数；</p>
</li>
</ul>
<p><img src="/assets/images/746a216b7c3245648e2ae5eb47ffa4c1.png" alt="746a216b7c3245648e2ae5eb47ffa4c1" /></p>
<p><img src="/assets/images/2da183fecd984fa7af79078693b96eed.png" alt="2da183fecd984fa7af79078693b96eed" /></p>
<h3 id="渐进上界"><a class="markdownIt-Anchor" href="#渐进上界"></a> 渐进上界</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span></p>
</blockquote>
<p>表示一个函数的上限,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> = {<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>:存在正常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得对所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0 \leq f(n) \leq cg(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<h3 id="渐进下界"><a class="markdownIt-Anchor" href="#渐进下界"></a> 渐进下界</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></p>
</blockquote>
<p>表示一个函数的下限, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega (g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> = {<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>:存在正常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使得对所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ,有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0 \leq cg(n) \leq f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>；</p>
<h3 id="定理"><a class="markdownIt-Anchor" href="#定理"></a> 定理</h3>
<p>对任意两个函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，我们有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\Theta(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\Omega(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
<h3 id="等式和不等式的渐进符号"><a class="markdownIt-Anchor" href="#等式和不等式的渐进符号"></a> 等式和不等式的渐进符号</h3>
<p>当渐进符号出现在等式中时，它一般代表某个我们不关注的匿名函数，这样可以帮助消除一个等式中无关紧要的细节与混乱；比如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2n^2+3n+1=2n^2+θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>表示某个函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，该函数是集合<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">θ(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>的某个函数；可以使用以下规则来解释：无论怎样选择等号左边的匿名函数，总有一种办法来选择等号右边的匿名函数使等式成立；换句话说，等式右边比左边提供的细节更粗糙。</p>
<h3 id="非渐进紧确的上界"><a class="markdownIt-Anchor" href="#非渐进紧确的上界"></a> 非渐进紧确的上界</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi></mrow><annotation encoding="application/x-tex">o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">o</span></span></span></span></p>
</blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">o(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> = {<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>:对于任一正常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，存在常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n_0&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，使得对所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mstyle mathsize="1.2em"><mstyle mathcolor="red"><mo>&lt;</mo></mstyle></mstyle></mrow><annotation encoding="application/x-tex">0 \leq f(n) \large \color{red}{&lt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord sizing reset-size6 size7" style="color:red;"><span class="mrel" style="color:red;">&lt;</span></span></span></span></span><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cg(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，即</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\lim_{n \to +\infty} \frac{f(n)}{g(n)} = 0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<h3 id="非渐进紧确的下界"><a class="markdownIt-Anchor" href="#非渐进紧确的下界"></a> 非渐进紧确的下界</h3>
<blockquote>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span></p>
</blockquote>
<p>定义的一种方式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) \in ω(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，当且仅当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>ο</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n) \in ο(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ο</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>；</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\omega(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> = {<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>:对于任一正常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">c&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，存在常量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n_0&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，使得对所有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n \geq n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>c</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mstyle mathsize="1.2em"><mstyle mathcolor="red"><mo>&lt;</mo></mstyle></mstyle></mrow><annotation encoding="application/x-tex">0 \leq cg(n) \large \color{red}{&lt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord sizing reset-size6 size7" style="color:red;"><span class="mrel" style="color:red;">&lt;</span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>}，即</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\lim_{n \to +\infty} \frac{f(n)}{g(n)} = \infty
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></span></p>
<h3 id="函数性质"><a class="markdownIt-Anchor" href="#函数性质"></a> 函数性质</h3>
<p><img src="/assets/images/9f66b3d613bc4d5a9cde351db405848d.png" alt="9f66b3d613bc4d5a9cde351db405848d" /></p>
<h3 id="三分性"><a class="markdownIt-Anchor" href="#三分性"></a> 三分性</h3>
<p>对于任意两个实数a,b，下列三种情况恰有一种必须成立：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>&gt;</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>=</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>&lt;</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a&gt;b,a=b,a&lt;b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>；但两个函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，不是都可以渐进比较的；</p>
<h2 id="标准记号与常规函数"><a class="markdownIt-Anchor" href="#标准记号与常规函数"></a> 标准记号与常规函数</h2>
]]></content>
      <categories>
        <category>algorithm</category>
        <category>introduction-to-algorithms</category>
      </categories>
  </entry>
  <entry>
    <title>设计与实现</title>
    <url>//posts/20210414-cbbf88da.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8048f2484aa9470998438274c7db1c1a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>database</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>配置说明</title>
    <url>//posts/20210219-3b13295f.html</url>
    <content><![CDATA[<!-- toc -->
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认redis不是以后台进程的方式启动，如果需要在后台运行，需要将这个值设置成yes  </span></span><br><span class="line"><span class="comment"># 以后台方式启动的时候，redis会写入默认的进程文件/var/run/redis.pid  </span></span><br><span class="line">daemonize yes  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># redis启动的进程路径  </span></span><br><span class="line">pidfile/var/run/redis.pid  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 启动进程端口号，这里最好不要使用默认的6379，容易被攻击  </span></span><br><span class="line">port 7179  </span><br><span class="line">   </span><br><span class="line">tcp-backlog 511  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 配置redis监听到的ip地址，可以是一个也可以多个  </span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.110.254.3.42  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># redis的sock路径  </span></span><br><span class="line">unixsocket/tmp/redis.sock  </span><br><span class="line">unixsocketperm 755  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 超时时间  </span></span><br><span class="line">timeout 0  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#指定TCP连接是否为长连接,&quot;侦探&quot;信号有server端维护。默认为0.表示禁用  </span></span><br><span class="line">tcp-keepalive 0  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 日志级别，log 等级分为4 级，debug,verbose,notice, 和warning。生产环境下一般开启notice  </span></span><br><span class="line">loglevel notice  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 日志文件地址  </span></span><br><span class="line">logfile<span class="string">&quot;/usr/local/redis/logs/redis.log&quot;</span>  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 设置数据库的个数，可以使用SELECT 命令来切换数据库。默认使用的数据库是0号库。默认16个库  </span></span><br><span class="line">databases 16  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#RDB方式的持久化是通过快照（snapshotting）完成的，当符合一定条件时Redis会自动将内存中的所有数据进行快照并存储在硬盘上。进行快照的条件可以由用户在配置文件中自定义，由两个参数构成：时间和改动的键的个数。当在指定的时间内被更改的键的个数大于指定的数值时就会进行快照。RDB是Redis默认采用的持久化方式，在配置文件中已经预置了3个条件：  </span></span><br><span class="line">save 900 1    <span class="comment"># 900秒内有至少1个键被更改则进行快照  </span></span><br><span class="line">save 300 10   <span class="comment"># 300秒内有至少10个键被更改则进行快照  </span></span><br><span class="line">save 60 10000  <span class="comment"># 60秒内有至少10000个键被更改则进行快照  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># 持久化数据存储目录  </span></span><br><span class="line">dir/usr/<span class="built_in">local</span>/redis/data  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#当持久化出现错误时，是否依然继续进行工作，是否终止所有的客户端write请求。默认设置&quot;yes&quot;表示终止，一旦snapshot数据保存故障，那么此server为只读服务。如果为&quot;no&quot;，那么此次snapshot将失败，但下一次snapshot不会受到影响，不过如果出现故障,数据只能恢复到&quot;最近一个成功点&quot;  </span></span><br><span class="line">stop-writes-on-bgsave-errorno  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#在进行数据镜像备份时，是否启用rdb文件压缩手段，默认为yes。压缩可能需要额外的cpu开支，不过这能够有效的减小rdb文件的大，有利于存储/备份/传输/数据恢复  </span></span><br><span class="line">rdbcompression yes  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#checksum文件检测，读取写入的时候rdb文件checksum，会损失一些性能  </span></span><br><span class="line">rdbchecksum yes  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#镜像备份文件的文件名，默认为dump.rdb  </span></span><br><span class="line">dbfilename dump.rdb  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#当主master服务器挂机或主从复制在进行时，是否依然可以允许客户访问可能过期的数据。在&quot;yes&quot;情况下,slave继续向客户端提供只读服务,有可能此时的数据已经过期；在&quot;no&quot;情况下，任何向此server发送的数据请求服务(包括客户端和此server的slave)都将被告知&quot;error&quot;  </span></span><br><span class="line">slave-serve-stale-datayes  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 如果是slave库，只允许只读，不允许修改  </span></span><br><span class="line">slave-read-only yes  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#slave与master的连接,是否禁用TCPnodelay选项。&quot;yes&quot;表示禁用,那么socket通讯中数据将会以packet方式发送(packet大小受到socket buffer限制)。可以提高socket通讯的效率(tcp交互次数),但是小数据将会被buffer,不会被立即发送,对于接受者可能存在延迟。&quot;no&quot;表示开启tcp nodelay选项,任何数据都会被立即发送,及时性较好,但是效率较低，建议设为no，在高并发或者主从有大量操作的情况下，设置为yes  </span></span><br><span class="line">repl-disable-tcp-nodelayno  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#适用Sentinel模块(unstable,M-S集群管理和监控),需要额外的配置文件支持。slave的权重值,默认100.当master失效后,Sentinel将会从slave列表中找到权重值最低(&gt;0)的slave,并提升为master。如果权重值为0,表示此slave为&quot;观察者&quot;,不参与master选举  </span></span><br><span class="line">slave-priority 100  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#限制同时连接的客户数量。当连接数超过这个值时，redis 将不再接收其他连接请求，客户端尝试连接时将收到error 信息。默认为10000，要考虑系统文件描述符限制，不宜过大，浪费文件描述符，具体多少根据具体情况而定  </span></span><br><span class="line">maxclients 10000  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#redis-cache所能使用的最大内存(bytes),默认为0,表示&quot;无限制&quot;,最终由OS物理内存大小决定(如果物理内存不足,有可能会使用swap)。此值尽量不要超过机器的物理内存尺寸,从性能和实施的角度考虑,可以为物理内存3/4。此配置需要和&quot;maxmemory-policy&quot;配合使用,当redis中内存数据达到maxmemory时,触发&quot;清除策略&quot;。在&quot;内存不足&quot;时,任何write操作(比如set,lpush等)都会触发&quot;清除策略&quot;的执行。在实际环境中,建议redis的所有物理机器的硬件配置保持一致(内存一致),同时确保master/slave中&quot;maxmemory&quot;&quot;policy&quot;配置一致。  </span></span><br><span class="line">maxmemory 0  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#内存过期策略，内存不足&quot;时,数据清除策略,默认为&quot;volatile-lru&quot;。  </span></span><br><span class="line"><span class="comment">#volatile-lru  -&gt;对&quot;过期集合&quot;中的数据采取LRU(近期最少使用)算法.如果对key使用&quot;expire&quot;指令指定了过期时间,那么此key将会被添加到&quot;过期集合&quot;中。将已经过期/LRU的数据优先移除.如果&quot;过期集合&quot;中全部移除仍不能满足内存需求,将OOM.  </span></span><br><span class="line"><span class="comment">#allkeys-lru -&gt;对所有的数据,采用LRU算法  </span></span><br><span class="line"><span class="comment">#volatile-random -&gt;对&quot;过期集合&quot;中的数据采取&quot;随即选取&quot;算法,并移除选中的K-V,直到&quot;内存足够&quot;为止. 如果如果&quot;过期集合&quot;中全部移除全部移除仍不能满足,将OOM  </span></span><br><span class="line"><span class="comment">#allkeys-random -&gt;对所有的数据,采取&quot;随机选取&quot;算法,并移除选中的K-V,直到&quot;内存足够&quot;为止  </span></span><br><span class="line"><span class="comment">#volatile-ttl -&gt;对&quot;过期集合&quot;中的数据采取TTL算法(最小存活时间),移除即将过期的数据.  </span></span><br><span class="line"><span class="comment">#noeviction -&gt;不做任何干扰操作,直接返回OOM异常  </span></span><br><span class="line"><span class="comment">#另外，如果数据的过期不会对&quot;应用系统&quot;带来异常,且系统中write操作比较密集,建议采取&quot;allkeys-lru&quot;  </span></span><br><span class="line">maxmemory-policyvolatile-lru  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 默认值5，上面LRU和最小TTL策略并非严谨的策略，而是大约估算的方式，因此可以选择取样值以便检查  </span></span><br><span class="line">maxmemory-samples 5  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#默认情况下，redis 会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁。所以redis 提供了另外一种更加高效的数据库备份及灾难恢复方式。开启append only 模式之后，redis 会把所接收到的每一次写操作请求都追加到appendonly.aof 文件中，当redis 重新启动时，会从该文件恢复出之前的状态。但是这样会造成appendonly.aof 文件过大，所以redis 还支持了BGREWRITEAOF 指令，对appendonly.aof 进行重新整理。如果不经常进行数据迁移操作，推荐生产环境下的做法为关闭镜像，开启appendonly.aof，同时可以选择在访问较少的时间每天对appendonly.aof 进行重写一次。  </span></span><br><span class="line"><span class="comment">#另外，对master机器,主要负责写，建议使用AOF,对于slave,主要负责读，挑选出1-2台开启AOF，其余的建议关闭  </span></span><br><span class="line">appendonly yes  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#aof文件名字，默认为appendonly.aof  </span></span><br><span class="line">appendfilename<span class="string">&quot;appendonly.aof&quot;</span>  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 设置对appendonly.aof 文件进行同步的频率。always表示每次有写操作都进行同步，everysec 表示对写操作进行累积，每秒同步一次。no不主动fsync，由OS自己来完成。这个需要根据实际业务场景进行配置  </span></span><br><span class="line">appendfsync everysec  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。默认为no,表示&quot;不暂缓&quot;,新的aof记录仍然会被立即同步  </span></span><br><span class="line">no-appendfsync-on-rewriteno  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#当Aof log增长超过指定比例时，重写logfile，设置为0表示不自动重写Aof 日志，重写是为了使aof体积保持最小，而确保保存最完整的数据。  </span></span><br><span class="line">auto-aof-rewrite-percentage100  </span><br><span class="line"><span class="comment">#触发aof rewrite的最小文件尺寸  </span></span><br><span class="line">auto-aof-rewrite-min-size64mb  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#lua脚本执行的最大时间，单位毫秒  </span></span><br><span class="line">lua-time-limit 5000  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#慢日志记录，单位微妙，10000就是10毫秒值，如果操作时间超过此值,将会把command信息&quot;记录&quot;起来.(内存,非文件)。其中&quot;操作时间&quot;不包括网络IO开支,只包括请求达到server后进行&quot;内存实施&quot;的时间.&quot;0&quot;表示记录全部操作  </span></span><br><span class="line">slowlog-log-slower-than10000  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#&quot;慢操作日志&quot;保留的最大条数,&quot;记录&quot;将会被队列化,如果超过了此长度,旧记录将会被移除。可以通过&quot;SLOWLOG&lt;subcommand&gt; args&quot;查看慢记录的信息(SLOWLOG get 10,SLOWLOG reset)  </span></span><br><span class="line">slowlog-max-len 128  </span><br><span class="line">notify-keyspace-events<span class="string">&quot;&quot;</span>  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#hash类型的数据结构在编码上可以使用ziplist和hashtable。ziplist的特点就是文件存储(以及内存存储)所需的空间较小,在内容较小时,性能和hashtable几乎一样.因此redis对hash类型默认采取ziplist。如果hash中条目的条目个数或者value长度达到阀值,将会被重构为hashtable。  </span></span><br><span class="line"><span class="comment">#这个参数指的是ziplist中允许存储的最大条目个数，，默认为512，建议为128  </span></span><br><span class="line">hash-max-ziplist-entries512  </span><br><span class="line"><span class="comment">#ziplist中允许条目value值最大字节数，默认为64，建议为1024  </span></span><br><span class="line">hash-max-ziplist-value64  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#同上  </span></span><br><span class="line">list-max-ziplist-entries512  </span><br><span class="line">list-max-ziplist-value64  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#intset中允许保存的最大条目个数,如果达到阀值,intset将会被重构为hashtable  </span></span><br><span class="line">set-max-intset-entries512  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#zset为有序集合,有2中编码类型:ziplist,skiplist。因为&quot;排序&quot;将会消耗额外的性能,当zset中数据较多时,将会被重构为skiplist。  </span></span><br><span class="line">zset-max-ziplist-entries128  </span><br><span class="line"><span class="comment">#zset中允许条目value值最大字节数，默认为64，建议为1024  </span></span><br><span class="line">zset-max-ziplist-value64  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#是否开启顶层数据结构的rehash功能,如果内存允许,请开启。rehash能够很大程度上提高K-V存取的效率  </span></span><br><span class="line">activerehashing yes  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#客户端buffer控制。在客户端与server进行的交互中,每个连接都会与一个buffer关联,此buffer用来队列化等待被client接受的响应信息。如果client不能及时的消费响应信息,那么buffer将会被不断积压而给server带来内存压力.如果buffer中积压的数据达到阀值,将会导致连接被关闭,buffer被移除。  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#buffer控制类型包括:normal -&gt; 普通连接；slave-&gt;与slave之间的连接；pubsub -&gt;pub/sub类型连接，此类型的连接，往往会产生此种问题;因为pub端会密集的发布消息,但是sub端可能消费不足.指令格式:client-output-buffer-limit &lt;class&gt; &lt;hard&gt;&lt;soft&gt;&lt;seconds&gt;&quot;,其中hard表示buffer最大值,一旦达到阀值将立即关闭连接;soft表示&quot;容忍值&quot;,它和seconds配合,如果buffer值超过soft且持续时间达到了seconds,也将立即关闭连接,如果超过了soft但是在seconds之后，buffer数据小于了soft,连接将会被保留.其中hard和soft都设置为0,则表示禁用buffer控制.通常hard值大于soft.  </span></span><br><span class="line">client-output-buffer-limitnormal 0 0 0  </span><br><span class="line">client-output-buffer-limitslave 256mb 64mb 60  </span><br><span class="line">client-output-buffer-limitpubsub 32mb 8mb 60  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">#Redis server执行后台任务的频率,默认为10,此值越大表示redis对&quot;间歇性task&quot;的执行次数越频繁(次数/秒)。&quot;间歇性task&quot;包括&quot;过期集合&quot;检测、关闭&quot;空闲超时&quot;的连接等,此值必须大于0且小于500。此值过小就意味着更多的cpu周期消耗,后台task被轮询的次数更频繁。此值过大意味着&quot;内存敏感&quot;性较差。建议采用默认值。  </span></span><br><span class="line">hz 10  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#当一个child在重写AOF文件的时候，如果aof-rewrite-incremental-fsync值为yes生效，那么这个文件会以每次32M数据的来被同步，这大量新增提交到磁盘是有用的，并且能避免高峰延迟。  </span></span><br><span class="line">aof-rewrite-incremental-fsyncyes</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
        <category>redis</category>
      </categories>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>//posts/20210219-2f57a694.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;fo/nfo&#x27;</span> REGEXP <span class="string">&#x27;^fo$&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id=""><a class="markdownIt-Anchor" href="#"></a> /</h3>
<p>转义</p>
<h3 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> ^</h3>
<p>匹配一个输入或一行的开头</p>
<h3 id="-3"><a class="markdownIt-Anchor" href="#-3"></a> $</h3>
<p>匹配一个输入或一行的结尾</p>
<h3 id="-4"><a class="markdownIt-Anchor" href="#-4"></a> *</h3>
<p>匹配前面元字符0次或多次</p>
<h3 id="-5"><a class="markdownIt-Anchor" href="#-5"></a> +</h3>
<p>匹配前面元字符1次或多次</p>
<h3 id="-6"><a class="markdownIt-Anchor" href="#-6"></a> ?</h3>
<p>匹配前面元字符0次或1次</p>
<h3 id="x"><a class="markdownIt-Anchor" href="#x"></a> (x)</h3>
<p>匹配x保存x在名为$1…$9的变量中</p>
<h3 id="xy"><a class="markdownIt-Anchor" href="#xy"></a> x|y</h3>
<p>匹配x或y</p>
<h3 id="n"><a class="markdownIt-Anchor" href="#n"></a> {n}</h3>
<p>精确匹配n次</p>
<h3 id="n-2"><a class="markdownIt-Anchor" href="#n-2"></a> {n,}</h3>
<p>匹配n次以上</p>
<h3 id="nm"><a class="markdownIt-Anchor" href="#nm"></a> {n,m}</h3>
<p>匹配n-m次以</p>
<h3 id="xyz"><a class="markdownIt-Anchor" href="#xyz"></a> [^xyz]</h3>
<p>不匹配这个集合中的任何一个字符</p>
<h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> [/b]</h3>
<p>匹配一个退格符</p>
<h3 id="b-2"><a class="markdownIt-Anchor" href="#b-2"></a> /b</h3>
<p>匹配一个单词的边界</p>
<h3 id="b-3"><a class="markdownIt-Anchor" href="#b-3"></a> /B</h3>
<p>匹配一个单词的非边界</p>
<h3 id="cx"><a class="markdownIt-Anchor" href="#cx"></a> /cX</h3>
<p>这儿，X是一个控制符，//cM/匹配Ctrl-M</p>
<h3 id="d"><a class="markdownIt-Anchor" href="#d"></a> /d</h3>
<p>匹配一个字数字符，//d/ = /[0-9]/</p>
<h3 id="d-2"><a class="markdownIt-Anchor" href="#d-2"></a> /D</h3>
<p>匹配一个非字数字符，//D/ = /[^0-9]/</p>
<h3 id="n-3"><a class="markdownIt-Anchor" href="#n-3"></a> /n</h3>
<p>匹配一个换行符</p>
<h3 id="r"><a class="markdownIt-Anchor" href="#r"></a> /r</h3>
<p>匹配一个回车符</p>
<h3 id="s"><a class="markdownIt-Anchor" href="#s"></a> /s</h3>
<p>匹配一个空白字符，包括/n,/r,/f,/t,/v等</p>
<h3 id="s-2"><a class="markdownIt-Anchor" href="#s-2"></a> /S</h3>
<p>匹配一个非空白字符，等于/[^/n/f/r/t/v]/</p>
<h3 id="t"><a class="markdownIt-Anchor" href="#t"></a> /t</h3>
<p>匹配一个制表符</p>
<h3 id="v"><a class="markdownIt-Anchor" href="#v"></a> /v</h3>
<p>匹配一个重直制表符</p>
<h3 id="w"><a class="markdownIt-Anchor" href="#w"></a> /w</h3>
<p>匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[/w]匹配&quot;-5.98&quot;中的5，等于[a-zA-Z0-9]</p>
<h3 id="w-2"><a class="markdownIt-Anchor" href="#w-2"></a> /W</h3>
<p>匹配一个不可以组成单词的字符，如[/W]匹配&quot;-5.98&quot;中的​-，等于[^a-zA-Z0-9]。</p>
<h3 id="char_class"><a class="markdownIt-Anchor" href="#char_class"></a> [:char_class:]</h3>
<p>char_class类名取值范围：</p>
<blockquote>
<p>alnum 文字数字字符<br />
alpha 文字字符<br />
blank 空白字符<br />
cntrl 控制字符<br />
digit 数字字符<br />
graph 图形字符<br />
lower 小写文字字符<br />
print 图形或空格字符<br />
punct 标点字符<br />
space 空格、制表符、新行、和回车<br />
upper 大写文字字符<br />
xdigit 十六进制数字字符</p>
</blockquote>
]]></content>
      <categories>
        <category>database</category>
        <category>sql</category>
      </categories>
  </entry>
  <entry>
    <title>文件格式说明</title>
    <url>//posts/20211011-a4ba5a82.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="文件扩展名说明"><a class="markdownIt-Anchor" href="#文件扩展名说明"></a> 文件扩展名说明</h2>
<p>mysql安装成功后，会有以下4中文件：</p>
<ol>
<li>
<p>frm</p>
<p>描述了表的结构；</p>
</li>
<li>
<p>MYD</p>
<p>保存了表的数据记录；</p>
</li>
<li>
<p>MYI</p>
<p>表的索引；</p>
</li>
<li>
<p>OPT</p>
<p>记录数据库的选项设置，比如字符集设置等；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>database</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>解决方案</title>
    <url>//posts/20210219-5c3cb133.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="导出到excel"><a class="markdownIt-Anchor" href="#导出到excel"></a> 导出到excel</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    COLUMN_NAME 列名,</span><br><span class="line">    COLUMN_TYPE 数据类型,</span><br><span class="line">    DATA_TYPE 字段类型,</span><br><span class="line">    CHARACTER_MAXIMUM_LENGTH 长度,</span><br><span class="line">    IS_NULLABLE 是否为空,</span><br><span class="line">    COLUMN_DEFAULT 默认值,</span><br><span class="line">    COLUMN_COMMENT 备注 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    INFORMATION_SCHEMA.COLUMNS </span><br><span class="line">    <span class="keyword">WHERE</span><span class="comment">-- table_schema =&#x27;developerclub&#x27; 数据库名称</span></span><br><span class="line">    table_name <span class="operator">=</span> <span class="string">&#x27;devc_stormdataarchiveoneday&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="查看运行参数以及状态"><a class="markdownIt-Anchor" href="#查看运行参数以及状态"></a> 查看运行参数以及状态</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">full</span> processlist;#链接数</span><br><span class="line"><span class="keyword">show</span> status; #状态</span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> ‘<span class="operator">%</span>变量名称<span class="operator">%</span>’；</span><br></pre></td></tr></table></figure>
<blockquote>
<p>常用变量：<br />
Aborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。<br />
Aborted_connects 尝试已经失败的MySQL服务器的连接的次数。<br />
Connections 试图连接MySQL服务器的次数。<br />
Created_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。<br />
Delayed_insert_threads 正在使用的延迟插入处理器线程的数量。<br />
Delayed_writes 用INSERT DELAYED写入的行数。<br />
Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。<br />
Flush_commands 执行FLUSH命令的次数。<br />
Handler_delete 请求从一张表中删除行的次数。<br />
Handler_read_first 请求读入表中第一行的次数。<br />
Handler_read_key 请求数字基于键读行。<br />
Handler_read_next 请求读入基于一个键的一行的次数。<br />
Handler_read_rnd 请求读入基于一个固定位置的一行的次数。<br />
Handler_update 请求更新表中一行的次数。<br />
Handler_write 请求向表中插入一行的次数。<br />
Key_blocks_used 用于关键字缓存的块的数量。<br />
Key_read_requests 请求从缓存读入一个键值的次数。<br />
Key_reads 从磁盘物理读入一个键值的次数。<br />
Key_write_requests 请求将一个关键字块写入缓存次数。<br />
Key_writes 将一个键值块物理写入磁盘的次数。<br />
Max_used_connections 同时使用的连接的最大数目。<br />
Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。<br />
Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。<br />
Open_tables 打开表的数量。<br />
Open_files 打开文件的数量。<br />
Open_streams 打开流的数量(主要用于日志记载）<br />
Opened_tables 已经打开的表的数量。<br />
Questions 发往服务器的查询的数量。<br />
Slow_queries 要花超过long_query_time时间的查询数量。<br />
Threads_connected 当前打开的连接的数量。<br />
Threads_running 不在睡眠的线程数量。<br />
Uptime 服务器工作了多少秒。</p>
</blockquote>
<h2 id="连接太多导致数据库查询低"><a class="markdownIt-Anchor" href="#连接太多导致数据库查询低"></a> 连接太多，导致数据库查询低</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, db, <span class="keyword">user</span>, host, <span class="type">time</span>, info</span><br><span class="line"><span class="keyword">from</span> information_schema.processlist</span><br><span class="line"><span class="keyword">where</span> command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span> <span class="keyword">and</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;socidatauser&#x27;</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;KILL &#x27;</span>, id, <span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> information_schema.processlist</span><br><span class="line"><span class="keyword">where</span> command <span class="operator">!=</span> <span class="string">&#x27;Sleep&#x27;</span> <span class="keyword">and</span> <span class="keyword">user</span> <span class="operator">=</span><span class="string">&#x27;socidatauser&#x27;</span> <span class="keyword">and</span> <span class="type">time</span><span class="operator">&gt;</span><span class="number">1000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">desc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="mysqldump-导出提示couldnt-execute-select-column_name"><a class="markdownIt-Anchor" href="#mysqldump-导出提示couldnt-execute-select-column_name"></a> mysqldump 导出提示Couldn’t execute SELECT COLUMN_NAME…</h2>
<blockquote>
<p>新版的mysqldump默认启用了一个新标志，通过- -column-statistics=0来禁用他</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump --column-statistics=0 -h ip -u root -p dbname &gt; db.sql;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>索引使用</title>
    <url>//posts/20210219-df9a61f7.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="索引类型"><a class="markdownIt-Anchor" href="#索引类型"></a> 索引类型</h1>
<h2 id="主键索引"><a class="markdownIt-Anchor" href="#主键索引"></a> 主键索引</h2>
<p>主键索引是加在主键上的索引，设置主键（primary key）的时候，mysql会自动创建主键索引</p>
<h2 id="普通索引"><a class="markdownIt-Anchor" href="#普通索引"></a> 普通索引</h2>
<p>创建在非主键列上的索引</p>
<h2 id="唯一索引"><a class="markdownIt-Anchor" href="#唯一索引"></a> 唯一索引</h2>
<h2 id="全文索引"><a class="markdownIt-Anchor" href="#全文索引"></a> 全文索引</h2>
<h2 id="聚合索引多列索引"><a class="markdownIt-Anchor" href="#聚合索引多列索引"></a> 聚合索引（多列索引）</h2>
<p>创建在多列上的索引</p>
<h1 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看表索引</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名；</span><br><span class="line"># 查看某张表的索引</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名；</span><br><span class="line"># 创建普通索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX  索引名 (加索引的列) </span><br><span class="line"># 创建聚合索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名 (加索引的列<span class="number">1</span>,加索引的列<span class="number">2</span>) </span><br><span class="line"># 删除某张表的索引</span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名 <span class="keyword">ON</span> 表名;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="explain-分析sql执行的状态"><a class="markdownIt-Anchor" href="#explain-分析sql执行的状态"></a> EXPLAIN 分析SQL执行的状态</h1>
<h2 id="列解释"><a class="markdownIt-Anchor" href="#列解释"></a> 列解释</h2>
<h3 id="table"><a class="markdownIt-Anchor" href="#table"></a> table</h3>
<p>显示这一行的数据是关于哪张表的</p>
<h3 id="type"><a class="markdownIt-Anchor" href="#type"></a> type</h3>
<p>这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、indexhe和ALL</p>
<h3 id="possible_keys"><a class="markdownIt-Anchor" href="#possible_keys"></a> possible_keys</h3>
<p>显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句</p>
<h3 id="key"><a class="markdownIt-Anchor" href="#key"></a> key</h3>
<p>实际使用的索引。如果为NULL，则没有使用索引。</p>
<h3 id="key_len"><a class="markdownIt-Anchor" href="#key_len"></a> key_len</h3>
<p>使用的索引的长度。在不损失精确性的情况下，长度越短越好</p>
<h3 id="ref"><a class="markdownIt-Anchor" href="#ref"></a> ref</h3>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数</p>
<h3 id="rows"><a class="markdownIt-Anchor" href="#rows"></a> rows</h3>
<p>MYSQL认为必须检查的用来返回请求数据的行数</p>
<h3 id="extra"><a class="markdownIt-Anchor" href="#extra"></a> Extra</h3>
<p>关于MYSQL如何解析查询的额外信息</p>
<h2 id="extra字段值含义"><a class="markdownIt-Anchor" href="#extra字段值含义"></a> Extra字段值含义</h2>
<h3 id="distinct"><a class="markdownIt-Anchor" href="#distinct"></a> Distinct</h3>
<p>一旦MYSQL找到了与行相联合匹配的行，就不再搜索了</p>
<h3 id="not-exists"><a class="markdownIt-Anchor" href="#not-exists"></a> Not exists</h3>
<p>MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了</p>
<h3 id="range-checked-for-each-recordindex-map"><a class="markdownIt-Anchor" href="#range-checked-for-each-recordindex-map"></a> Range checked for each Record（index map:#）</h3>
<p>没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一</p>
<h3 id="using-filesort"><a class="markdownIt-Anchor" href="#using-filesort"></a> Using filesort</h3>
<p>看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行</p>
<h3 id="using-index"><a class="markdownIt-Anchor" href="#using-index"></a> Using index</h3>
<p>列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候</p>
<h3 id="using-temporary"><a class="markdownIt-Anchor" href="#using-temporary"></a> Using temporary</h3>
<p>看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上</p>
<h3 id="where-used"><a class="markdownIt-Anchor" href="#where-used"></a> Where used</h3>
<p>使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）</p>
<h2 id="type字段值含义"><a class="markdownIt-Anchor" href="#type字段值含义"></a> type字段值含义：</h2>
<h3 id="const"><a class="markdownIt-Anchor" href="#const"></a> const</h3>
<p>表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待</p>
<h3 id="eq_ref"><a class="markdownIt-Anchor" href="#eq_ref"></a> eq_ref</h3>
<p>连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用</p>
<h3 id="ref-2"><a class="markdownIt-Anchor" href="#ref-2"></a> ref</h3>
<p>这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好</p>
<h3 id="range"><a class="markdownIt-Anchor" href="#range"></a> range</h3>
<p>这个连接类型使用索引返回一个范围中的行，比如使用&gt;或&lt;查找东西时发生的情况</p>
<h3 id="index"><a class="markdownIt-Anchor" href="#index"></a> index</h3>
<p>这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）</p>
<h3 id="all"><a class="markdownIt-Anchor" href="#all"></a> ALL</h3>
<p>这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免</p>
]]></content>
      <categories>
        <category>database</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>//posts/20210219-f5c535ea.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>适配器模式将某个类的接口（<strong>重点是接口</strong>）转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：</p>
<ol>
<li>
<p>类的适配器模式</p>
<p>对类做适配；</p>
<p>继承类C并实现接口I；</p>
</li>
<li>
<p>对象的适配器模式</p>
<p>对类的实例化对象做适配；</p>
<p>实现I并持有C的实例化对象；</p>
</li>
<li>
<p>接口的适配器模式。</p>
</li>
</ol>
<p>​	对接口做适配；</p>
<p>​	使用抽象类实现接口；</p>
<h2 id="类的适配器模式"><a class="markdownIt-Anchor" href="#类的适配器模式"></a> 类的适配器模式</h2>
<h3 id="需求"><a class="markdownIt-Anchor" href="#需求"></a> 需求</h3>
<p>目标接口是Animal，但同时想使用Source类；</p>
<h3 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h3>
<p>创建新类继承类实现接口；</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>希望将一个类转换成满足另一个新接口的类时；</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Source.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 与原类中的方法相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 新方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Source</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name();</span><br><span class="line">        dog.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="对象的适配器模式"><a class="markdownIt-Anchor" href="#对象的适配器模式"></a> 对象的适配器模式</h2>
<h3 id="需求-2"><a class="markdownIt-Anchor" href="#需求-2"></a> 需求</h3>
<p>同<code>类的适配器</code></p>
<h3 id="方法-2"><a class="markdownIt-Anchor" href="#方法-2"></a> 方法</h3>
<p>实现接口但持有类的实例化对象；</p>
<h3 id="适用-2"><a class="markdownIt-Anchor" href="#适用-2"></a> 适用</h3>
<p>希望将一个对象转换成满足另一个新接口的对象；</p>
<h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Source.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 与原类中的方法相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 新方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(Source source)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog.say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Source source = <span class="keyword">new</span> Source();</span><br><span class="line">        Animal dog = <span class="keyword">new</span> Dog(source);</span><br><span class="line">        dog.name();</span><br><span class="line">        dog.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口的适配器模式"><a class="markdownIt-Anchor" href="#接口的适配器模式"></a> 接口的适配器模式</h2>
<h3 id="需求-3"><a class="markdownIt-Anchor" href="#需求-3"></a> 需求</h3>
<p>一个接口中有多个抽象方法，但只需要某一个方法（即不需要实现所有抽象方法，这样比较浪费，因为并不是所有方法都需要）；</p>
<h3 id="方法-3"><a class="markdownIt-Anchor" href="#方法-3"></a> 方法</h3>
<p>创建抽象类实现接口（实现所有方法），使用时继承抽象类，重写特定方法；</p>
<h3 id="适用-3"><a class="markdownIt-Anchor" href="#适用-3"></a> 适用</h3>
<p>不希望实现一个接口中所有的方法时；</p>
<h3 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog.say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Teacher.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Teacher.say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Source dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name();</span><br><span class="line">        dog.say();</span><br><span class="line">        Source teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">        teacher.name();</span><br><span class="line">        teacher.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>//posts/20210219-563268dc.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了</p>
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>多个目标类实现同一个接口，定义一个桥接类，内有一个目标接口类型的变量，该变量对象就是对目标类的桥接；</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Animal.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Person.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 桥接类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bridge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        source.name();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Source <span class="title">getSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(Source source)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyBridge</span> <span class="keyword">extends</span> <span class="title">Bridge</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        getSource().name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Bridge bridge = <span class="keyword">new</span> MyBridge();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用第1个对象</span></span><br><span class="line">        Source animal = <span class="keyword">new</span> Animal();</span><br><span class="line">        bridge.setSource(animal);</span><br><span class="line">        bridge.name();</span><br><span class="line">        <span class="comment">//调用第2个对象</span></span><br><span class="line">        Source person = <span class="keyword">new</span> Person();</span><br><span class="line">        bridge.setSource(person);</span><br><span class="line">        bridge.name();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>//posts/20210219-fe816c3c.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>一次性建造多个产品，就是多工厂方法模式生成对象列表</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建造者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> List&lt;Animal&gt; list = <span class="keyword">new</span> ArrayList&lt;Animal&gt;();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dogs</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count; i++)&#123;</span><br><span class="line">             list.add(<span class="keyword">new</span> Dog());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cats</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count; i++)&#123;</span><br><span class="line">             list.add(<span class="keyword">new</span> Cat());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> Builder();</span><br><span class="line">        builder.dogs(<span class="number">3</span>);</span><br><span class="line">        builder.cats(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>//posts/20210219-6208627e.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>有多个对象，<code>每个对象持有对下一个对象的引用</code>，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<p>链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不允许传给多个对象</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/e1f01e2f8eb64a7f84cd4ed5e223c489.png" alt="e1f01e2f8eb64a7f84cd4ed5e223c489" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Handler handler;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHandler</span><span class="params">(Handler handler)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">AbsHandler</span> <span class="keyword">implements</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(name+<span class="string">&quot; deal!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (getHandler() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            getHandler().operator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyHandler h1 = <span class="keyword">new</span> MyHandler(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">        MyHandler h2 = <span class="keyword">new</span> MyHandler(<span class="string">&quot;h2&quot;</span>);</span><br><span class="line">        MyHandler h3 = <span class="keyword">new</span> MyHandler(<span class="string">&quot;h3&quot;</span>);</span><br><span class="line">        h1.setHandler(h2);</span><br><span class="line">        h2.setHandler(h3);</span><br><span class="line">        h1.operator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>//posts/20210219-78134e07.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员的作用是，发出口令，口令经过传递，传到了士兵耳朵里，士兵去执行。这个过程好在，三者相互解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关注到底士兵是怎么实现的</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模式的思想</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/e745a69f67e74a938fa195a731d4f47c.png" alt="e745a69f67e74a938fa195a731d4f47c" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;command receive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        command.exe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCommand</span><span class="params">(Receiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Receiver receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">        Command cmd = <span class="keyword">new</span> MyCommand(receiver);</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(cmd);</span><br><span class="line">        invoker.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>//posts/20210219-df879792.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>可以理解为树，类中维护节点集合；</p>
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>又叫部分-整体模式，一个节点类，内有子节点对象（类型也是节点类类型，可能是个列表）</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>处理类似树型结构的问题时比较方便</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> TreeNode parent;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;TreeNode&gt; children = <span class="keyword">new</span> Vector&lt;TreeNode&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">getParent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(TreeNode parent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加孩子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        children.add(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除孩子节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        children.remove(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;TreeNode&gt; <span class="title">getChildren</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.elements();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TreeNode(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Test tree = <span class="keyword">new</span> Test(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        TreeNode node_b = <span class="keyword">new</span> TreeNode(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        TreeNode node_c = <span class="keyword">new</span> TreeNode(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        node_b.add(node_c);</span><br><span class="line">        tree.root.add(node_b);</span><br><span class="line">        Test.printMsg(<span class="string">&quot;build tree&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>//posts/20210219-9b7d6e62.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>针对工厂模式增加了<code>抽象类（即接口）</code></p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>解决工厂方法模式的问题（即修改时不需要修改工厂类），新增功能只需新增新的工厂类；</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类即接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AnimalInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">animal</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogClass</span> <span class="keyword">implements</span> <span class="title">AnimalInterface</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Animal <span class="title">animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatClass</span> <span class="keyword">implements</span> <span class="title">AnimalInterface</span></span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Animal <span class="title">animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AnimalInterface animal_dog = <span class="keyword">new</span> DogClass();</span><br><span class="line">        Animal dog = animal_dog.animal();</span><br><span class="line">        dog.say();</span><br><span class="line">        AnimalInterface animal_cat = <span class="keyword">new</span> CatClass();</span><br><span class="line">        Animal cat = animal_cat.animal();</span><br><span class="line">        cat.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>装饰模式</title>
    <url>//posts/20210219-e671036b.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例</p>
<blockquote>
<p>和适配器模式中的对象适配相比：</p>
<ul>
<li>相同：都是持有一个类对象；</li>
<li>不同：装饰器模式需要装饰对象和被装饰对象实现同一个接口；</li>
</ul>
</blockquote>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>需要一个扩展类；</p>
<p>动态的为一个对象增加功能，而且还能动态撤销，（继承不能做到这一点，继承的功能是静态的）</p>
<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3>
<p>会产生过多相似的对象，不易排错</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Animal.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 装饰类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Source source)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;in Decorator.name&quot;</span>);</span><br><span class="line">        source.name();</span><br><span class="line">        Test.printMsg(<span class="string">&quot;out Decorator.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Source source = <span class="keyword">new</span> Animal();</span><br><span class="line">        Source obj = <span class="keyword">new</span> Decorator(source);</span><br><span class="line">        obj.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>//posts/20210219-f7de8aa8.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>即在一个容器类中持有多个其他类的实例对象；</p>
<p>容器类是作为一个外观，直接与其他类进行操作的，而内部持有的其他类不需要直接与其他类直接交互；</p>
<p>比如Computer是一个容器类，而CPU、内存等是其他目标类；</p>
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口；</p>
<h3 id="思想-2"><a class="markdownIt-Anchor" href="#思想-2"></a> 思想</h3>
<p>即用给一个容器类（管理目标类的一个类）来管理或者实现多个目标类；</p>
<p>在类中有目标类变量；</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;cpu start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;cpu shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disk</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;disk start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;disk shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> CPU();</span><br><span class="line">        disk = <span class="keyword">new</span> Disk();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cpu.start();</span><br><span class="line">        disk.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cpu.shutdown();</span><br><span class="line">        disk.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.start();</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>//posts/20210219-e19da94a.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>管理数据库连接池的类</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<p>Pool负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Connection&gt; pool;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="string">&quot;数据流链接地址&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">&quot;用户名&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">&quot;密码&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String dirverClassName = <span class="string">&quot;驱动类名称&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pool instance = <span class="keyword">null</span>;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Pool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        pool = <span class="keyword">new</span> Vector&lt;Connection&gt;(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Class.forName(dirverClassName);</span><br><span class="line">                conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">                pool.add(conn);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回连接到连接池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        pool.add(conn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回连接池中的一个数据库连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pool.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            Connection conn = pool.get(<span class="number">0</span>);</span><br><span class="line">            pool.remove(conn);</span><br><span class="line">            <span class="keyword">return</span> conn;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>多工厂模式</title>
    <url>//posts/20210219-bec9bce2.html</url>
    <content><![CDATA[<!-- toc -->
<blockquote>
<p>普通工厂：厂商根据客户要求去生产，客户去工厂里（表示要实例化工程类）告诉厂商要什么；</p>
<p>多工厂：厂商在工厂里提供模版，客户自己根据需要自己去工厂里使用模板；</p>
<p>静态工厂：厂商直接将模板摆到商店，客户直接使用模板即可（不需要实例化工厂类）；</p>
</blockquote>
<h2 id="普通工厂模式"><a class="markdownIt-Anchor" href="#普通工厂模式"></a> 普通工厂模式</h2>
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>建立一个工厂类，对实现了同一接口的提供一个工厂方法创建对象;</p>
<p>客户告诉厂商想要什么，厂商根据客户要求去生产；</p>
<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3>
<p>类的创建依赖工厂类，如果想要拓展程序，必须对工厂类进行修改，这就违背了闭包原则；</p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">mainclass</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">&quot;dog&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">&quot;cat&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Test.printMsg(<span class="string">&quot;Error type&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MainClass maincls =  <span class="keyword">new</span> MainClass();</span><br><span class="line">        Animal dog = maincls.mainclass(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">        dog.say();</span><br><span class="line">       </span><br><span class="line">        Animal cat = maincls.mainclass(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">        cat.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多工厂模式"><a class="markdownIt-Anchor" href="#多工厂模式"></a> 多工厂模式</h2>
<h3 id="描述-2"><a class="markdownIt-Anchor" href="#描述-2"></a> 描述</h3>
<p>对普通工厂方法模式的改进，提供多个工厂方法，分别创建对象</p>
<h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">dogClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">catClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         MainClass maincls =  <span class="keyword">new</span> MainClass();</span><br><span class="line">         Animal dog = maincls.dogClass();</span><br><span class="line">         dog.say();</span><br><span class="line">         Animal cat = maincls.catClass();</span><br><span class="line">         cat.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态工厂模式"><a class="markdownIt-Anchor" href="#静态工厂模式"></a> 静态工厂模式</h2>
<h3 id="描述-3"><a class="markdownIt-Anchor" href="#描述-3"></a> 描述</h3>
<p>将多个工厂模式里的工厂方法置为静态，不需创建实例即可调用</p>
<h3 id="示例-3"><a class="markdownIt-Anchor" href="#示例-3"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">dogClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Animal <span class="title">catClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         Animal dog = MainClass.dogClass();</span><br><span class="line">         dog.say();</span><br><span class="line">         Animal cat = MainClass.catClass();</span><br><span class="line">         cat.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>//posts/20210219-30cf0cd2.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>一般主要应用在OOP开发中的编译器的开发中，所以适用面比较窄</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/794f79ed7dbf474582616e5feeb2d62d.png" alt="794f79ed7dbf474582616e5feeb2d62d" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1; </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> num1; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum1</span><span class="params">(<span class="keyword">int</span> num1)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.num1 = num1; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> num2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum2</span><span class="params">(<span class="keyword">int</span> num2)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.num2 = num2; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()+context.getNum2(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> context.getNum1()-context.getNum2(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> Minus().interpret((<span class="keyword">new</span> Context(<span class="keyword">new</span> Plus().interpret(<span class="keyword">new</span> Context(<span class="number">9</span>, <span class="number">2</span>)), <span class="number">8</span>)));</span><br><span class="line">        Test.printMsg(String.valueOf(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>迭代子模式</title>
    <url>//posts/20210219-a5e64a5.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问；</p>
<blockquote>
<p>注意：这里包含2个对象：</p>
<ol>
<li>
<p>聚焦对象</p>
<p>需要遍历的对象；</p>
</li>
<li>
<p>迭代器对象</p>
<p>用于对聚集对象进行遍历访问的对象；</p>
</li>
</ol>
<p>主要是对高内聚合、低耦合；</p>
</blockquote>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/449314ca7d0546c29b3ac8646f1c77aa.png" alt="449314ca7d0546c29b3ac8646f1c77aa" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Collection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//获取集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="comment">//获取结合大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前移</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">prev</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//后移</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//获取第一个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Collection collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos=-<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIterator</span><span class="params">(Collection collection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collection = collection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">prev</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            pos--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> collection.get(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123; </span><br><span class="line">            pos++; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(pos&lt;collection.size()-<span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        pos = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">return</span> collection.get(pos); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span> <span class="keyword">implements</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String string[] = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> string.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Collection collection = <span class="keyword">new</span> MyCollection();</span><br><span class="line">        Iterator it = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Test.printMsg(String.valueOf(it.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>//posts/20210219-d036071c.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓展和维护，因为只要修改一个对象，其它关联的对象都得进行修改。如果使用中介者模式，只需关心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的作用</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/27bc0f40c0754ad190c174307e745dd3.png" alt="27bc0f40c0754ad190c174307e745dd3" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> Mediator mediator; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mediator <span class="title">getMediator</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="keyword">return</span> mediator; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Mediator mediator)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User1</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User1</span><span class="params">(Mediator mediator)</span></span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(mediator); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Test.printMsg(<span class="string">&quot;user1 exe!&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User2</span><span class="params">(Mediator mediator)</span></span>&#123; </span><br><span class="line">        <span class="keyword">super</span>(mediator); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Test.printMsg(<span class="string">&quot;user2 exe!&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMediator</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user1; </span><br><span class="line">    <span class="keyword">private</span> User user2;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> user1; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> user2; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMediator</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        user1 = <span class="keyword">new</span> User1(<span class="keyword">this</span>); </span><br><span class="line">        user2 = <span class="keyword">new</span> User2(<span class="keyword">this</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">workAll</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        user1.work(); </span><br><span class="line">        user2.work(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> MyMediator(); </span><br><span class="line">        mediator.createMediator(); </span><br><span class="line">        mediator.workAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>//posts/20210219-c3176455.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>通俗的讲下：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/5e4c0af488794aa08d25450e2a151973.png" alt="5e4c0af488794aa08d25450e2a151973" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123; </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String value; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String value)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = value; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> value; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = value; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> Memento memento; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Storage</span><span class="params">(Memento memento)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.memento = memento; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> memento; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.memento = memento; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Original</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Original</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = memento.getValue(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建原始类</span></span><br><span class="line">        Original orig = <span class="keyword">new</span> Original(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//创建备忘录</span></span><br><span class="line">        Storage storage = <span class="keyword">new</span> Storage(orig.createMemento());</span><br><span class="line">        <span class="comment">//修改原始类状态</span></span><br><span class="line">        Test.printMsg(<span class="string">&quot;初始化状态为： &quot;</span>+orig.getValue());</span><br><span class="line">        orig.setValue(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Test.printMsg(<span class="string">&quot;修改后状态为： &quot;</span>+orig.getValue());</span><br><span class="line">        <span class="comment">//恢复原始类的状态</span></span><br><span class="line">        orig.restoreMemento(storage.getMemento());</span><br><span class="line">        Test.printMsg(<span class="string">&quot;恢复后状态为： &quot;</span>+orig.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>//posts/20210219-9a246216.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>类中持有一个观察者类对象集合，当类对象变化时能够通知并执行观察者对应方法；</p>
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>不涉及继承</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<p>类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/101e239e5d6a417a9bbc7caa12b29ddb.png" alt="101e239e5d6a417a9bbc7caa12b29ddb" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Animal.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Person.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Source source)</span></span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Source source)</span></span>;</span><br><span class="line">    <span class="comment">//通知所有</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifys</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">implements</span> <span class="title">Project</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Source&gt; vector = <span class="keyword">new</span> Vector&lt;Source&gt;(); </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Source observer)</span> </span>&#123; </span><br><span class="line">        vector.add(observer); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Source observer)</span> </span>&#123; </span><br><span class="line">        vector.remove(observer); </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifys</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        Enumeration&lt;Source&gt; enumo = vector.elements(); </span><br><span class="line">        <span class="keyword">while</span>(enumo.hasMoreElements())&#123; </span><br><span class="line">            enumo.nextElement().name(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;MySubject.operation&quot;</span>);</span><br><span class="line">        notifys();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Project proj = <span class="keyword">new</span> MySubject();</span><br><span class="line">        proj.add(<span class="keyword">new</span> Animal());</span><br><span class="line">        proj.add(<span class="keyword">new</span> Person());</span><br><span class="line">        proj.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>//posts/20210219-91ad9ce3.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>将一个对象作为原型进行复制、克隆等</p>
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<ol>
<li>
<p>浅复制</p>
<p>将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p>
</li>
<li>
<p>深复制</p>
<p>将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123; </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone(); </span><br><span class="line">        <span class="keyword">return</span> proto; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; </span><br><span class="line">    <span class="keyword">private</span> String string; </span><br><span class="line">    <span class="keyword">private</span> SerializableObject obj; </span><br><span class="line">    <span class="comment">/* 浅复制 */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123; </span><br><span class="line">        Prototype proto = (Prototype) <span class="keyword">super</span>.clone(); </span><br><span class="line">        <span class="keyword">return</span> proto; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">/* 深复制 */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123; </span><br><span class="line">        <span class="comment">/* 写入当前对象的二进制流 */</span> </span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream(); </span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos); </span><br><span class="line">        oos.writeObject(<span class="keyword">this</span>); </span><br><span class="line">        <span class="comment">/* 读出二进制流产生的新对象 */</span> </span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray()); </span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis); </span><br><span class="line">        <span class="keyword">return</span> ois.readObject(); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//get set</span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializableObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>//posts/20210219-7b510e10.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>代理模式就是多一个代理类出来，替原对象进行一些操作</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</p>
<ol>
<li>修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</li>
<li>就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。</li>
</ol>
<p>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<p><strong>与装饰模式很相似，不同之处是在装饰模式中，实例化对象时会首先实例化一个目标类，然后实例化一个装饰类，之后装饰目标类（将目标类用作装饰类的对象）；</strong></p>
<p><strong>代理对象是实例化时直接实例化的是代理对象，在代理类中默认会有一个目标类实例变量；</strong></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;Animal.name&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Source</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.source = <span class="keyword">new</span> Animal();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        source.name();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Source source = <span class="keyword">new</span> Proxy();</span><br><span class="line">        source.name();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>//posts/20210219-72e3b671.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。<code>需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数</code></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp, String opt)&#123;</span><br><span class="line">        String array[] = exp.split(opt);</span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);</span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> arrayInt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp, <span class="string">&quot;\\+&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]+arrayInt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp, <span class="string">&quot;\\-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]-arrayInt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> <span class="keyword">implements</span> <span class="title">ICalculator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = split(exp, <span class="string">&quot;\\*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arrayInt[<span class="number">0</span>]*arrayInt[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String exp= <span class="string">&quot;2+8&quot;</span>;</span><br><span class="line">        ICalculator cal = <span class="keyword">new</span> Plus();</span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp);</span><br><span class="line">        Test.printMsg(Integer.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>模板模式</title>
    <url>//posts/20210219-150e036b.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/fc2c80c85b114ecbbf54e7149668422c.png" alt="fc2c80c85b114ecbbf54e7149668422c" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICalculator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCalculator</span></span>&#123;</span><br><span class="line">    <span class="comment">//主方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String exp, String opt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> array[] = split(exp, opt);</span><br><span class="line">        <span class="keyword">return</span> calculate(array[<span class="number">0</span>], array[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//被子类重写的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] split(String exp, String opt)&#123;</span><br><span class="line">        String array[] = exp.split(opt);</span><br><span class="line">        <span class="keyword">int</span> arrayInt[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        arrayInt[<span class="number">0</span>] = Integer.parseInt(array[<span class="number">0</span>]);</span><br><span class="line">        arrayInt[<span class="number">1</span>] = Integer.parseInt(array[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> arrayInt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Minus</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> <span class="keyword">extends</span> <span class="title">AbstractCalculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String exp= <span class="string">&quot;2+8&quot;</span>;</span><br><span class="line">        AbstractCalculator cal = <span class="keyword">new</span> Plus();</span><br><span class="line">        <span class="keyword">int</span> result = cal.calculate(exp, <span class="string">&quot;\\+&quot;</span>);</span><br><span class="line">        Test.printMsg(Integer.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>目录</title>
    <url>//posts/20210218-cfc657db.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<h3 id="遵守原则"><a class="markdownIt-Anchor" href="#遵守原则"></a> 遵守原则</h3>
<p><img src="/assets/images/a1e7ddda5e2448248d30e9c95de59624.png" alt="a1e7ddda5e2448248d30e9c95de59624" /></p>
<h3 id="相互关系"><a class="markdownIt-Anchor" href="#相互关系"></a> 相互关系</h3>
<p><img src="/assets/images/e099ceb5d6454e94ba077c099eb80557.png" alt="e099ceb5d6454e94ba077c099eb80557" /></p>
<h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2>
<h3 id="创建型5种"><a class="markdownIt-Anchor" href="#创建型5种"></a> 创建型（5种）</h3>
<ol>
<li>
<p><a href="/architecture-design/java-design-patterns/abstract-factory/">抽象工厂模式</a></p>
<p>提供一个接口, 用于创建相关或依赖对象的家族, 而不需要指定具体类</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/factory/">工厂模式</a></p>
<p>定义了一个创建对象的接口, 但由子类决定要实例化的类是哪一个. 工厂方法让类把实例化推迟到子类</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/prototype/">原型模式</a></p>
<p>当创建给定类的实例过程很昂贵或很复杂时, 就使用原形模式</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/singleton/">单例模式</a></p>
<p>确保一个类只有一个实例, 并提供全局访问点</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/builder/">建造者模式</a></p>
<p>封装一个产品的构造过程，并允许按步骤构造 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p>
</li>
</ol>
<h3 id="结构型7种"><a class="markdownIt-Anchor" href="#结构型7种"></a> 结构型（7种）</h3>
<ol>
<li>
<p><a href="/architecture-design/java-design-patterns/adapter/">适配器模式</a></p>
<p>将一个类的接口, 转换成客户期望的另一个接口. 适配器让原本接口不兼容的类可以合作无间. 对象适配器使用组合, 类适配器使用多重继承</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/bridge/">桥接模式</a></p>
<p>使用桥接模式通过将实现和抽象放在两个不同的类层次中而使它们可以独立改变</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/composite/">组合模式</a></p>
<p>允许你将对象组合成树形结构来表现&quot;整体/部分&quot;层次结构. 组合能让客户以一致的方式处理个别对象以及对象组合</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/decorator/">装饰者模式</a></p>
<p>动态地将责任附加到对象上, 若要扩展功能, 装饰者提供了比继承更有弹性的替代方案</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/facade/">外观模式</a></p>
<p>提供了一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层接口, 让子系统更容易使用</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/adapter/flyweight/">享元模式</a></p>
<p>让某个类的一个实例能用来提供许多&quot;虚拟实例&quot;</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/proxy/">代理模式</a></p>
<p>为另一个对象提供一个代理以控制对这个对象的访问</p>
</li>
</ol>
<p><img src="/assets/images/58903fb6020a41e696f8699fe4711ef9.png" alt="58903fb6020a41e696f8699fe4711ef9" /></p>
<h3 id="行为型11种"><a class="markdownIt-Anchor" href="#行为型11种"></a> 行为型（11种）</h3>
<ol>
<li>
<p><a href="/architecture-design/java-design-patterns/chain-of-responsibility/">责任链模式</a></p>
<p>通过责任链模式, 可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/command/">命令模式</a></p>
<p>将&quot;请求&quot;封闭成对象, 以便使用不同的请求,队列或者日志来参数化其他对象. 命令模式也支持可撤销的操作</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/interpreter/">解释器模式</a></p>
<p>使用解释器模式为语言创建解释器</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/iterator/">迭代器模式</a></p>
<p>提供一种方法顺序访问一个聚合对象中的各个元素， 而又不暴露其内部的表示</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/mediator/">中介者模式</a></p>
<p>使用中介者模式来集中相关对象之间复杂的沟通和控制方式</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/memento/">备忘录模式</a></p>
<p>当你需要让对象返回之前的状态时(例如， 你的用户请求&quot;撤销&quot;)， 你使用备忘录模式</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/observer/">观察者模式</a></p>
<p>在对象之间定义一对多的依赖，这样当一个对象改变状态，依赖它的对象都会收到通知，并自动更新</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/state/">状态模式</a></p>
<p>允许对象在内部状态改变时改变它的行为， 对象看起来好象改了它的类</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/strategy/">策略模式</a></p>
<p>定义了算法族，分别封闭起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/template-method/">模板方法模式</a></p>
<p>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中 模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤</p>
</li>
<li>
<p><a href="/architecture-design/java-design-patterns/visitor/">访问者模式</a></p>
<p>当你想要为一个对象的组合增加新的能力，且封装并不重要时，就使用访问者模式</p>
</li>
</ol>
<p><img src="/assets/images/f1921e58002a480b8284fefd912ebe9b.png" alt="f1921e58002a480b8284fefd912ebe9b" /></p>
<h3 id="并发型"><a class="markdownIt-Anchor" href="#并发型"></a> 并发型</h3>
<h3 id="线程池型"><a class="markdownIt-Anchor" href="#线程池型"></a> 线程池型</h3>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>//posts/20210219-8acb1976.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>状态模式就两点：1、可以通过改变状态来获得不同的行为。2、你的好友能同时看到你的变化。</p>
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>当对象的状态改变时，同时改变其行为</p>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象的某一属性，区别开他们的一些功能，比如说简单的权限控制</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/42847310f43a4ac0a8bf7927c6185d94.png" alt="42847310f43a4ac0a8bf7927c6185d94" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态类的核心类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> value; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = value; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;State.name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;State.say&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态模式的切换类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.state = state; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> state; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.state = state; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (state.getValue().equals(<span class="string">&quot;name&quot;</span>)) &#123; </span><br><span class="line">            state.name(); </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.getValue().equals(<span class="string">&quot;say&quot;</span>)) &#123; </span><br><span class="line">            state.say(); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        State state = <span class="keyword">new</span> State();</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(state);</span><br><span class="line">        <span class="comment">//设置第1种状态</span></span><br><span class="line">        state.setValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        context.method();</span><br><span class="line">        <span class="comment">//设置第2种状态</span></span><br><span class="line">        state.setValue(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        context.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>//posts/20210219-64b51ed9.html</url>
    <content><![CDATA[<!-- toc -->
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化</p>
<h3 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想</h3>
<p>访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果</p>
<blockquote>
<p>与适配器模式的不同在于：</p>
<p>​	访问者模式不持有类实例对象，其实就是用类A的类方法对指定类C实例对象的方法进行了封装，入参为类C的实例对象；</p>
<p>​	这样可以动态的传递类C实例对象调用C的方法；</p>
</blockquote>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>访问者模式适用于数据结构相对稳定算法又易变化的系统；</p>
<p>适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：</p>
<ol>
<li>新功能会不会与现有功能出现兼容性问题？</li>
<li>以后会不会再需要添加？</li>
<li>如果类不允许修改代码怎么办？</li>
</ol>
<p>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦，</p>
<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3>
<p>增加新的数据结构很困难</p>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<p>访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。优点：增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。</p>
<h3 id="uml"><a class="markdownIt-Anchor" href="#uml"></a> UML</h3>
<p><img src="/assets/images/cb0345aff4d14988b56372c4da30f428.png" alt="cb0345aff4d14988b56372c4da30f428" /></p>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Subject sub)</span></span>&#123;</span><br><span class="line">        Test.printMsg(<span class="string">&quot;visit the subject &quot;</span>+sub.getSubject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123; </span><br><span class="line">        visitor.visit(<span class="keyword">this</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mysubject&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Visitor visitor = <span class="keyword">new</span> MyVisitor();</span><br><span class="line">        Subject sub = <span class="keyword">new</span> MySubject();</span><br><span class="line">        sub.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>权限系统</title>
    <url>//posts/20210218-d7272f86.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="acl"><a class="markdownIt-Anchor" href="#acl"></a> ACL</h2>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>
<p>Access Control List，访问控制列表；<br />
即将用户与权限做成一个二维矩阵，比如</p>
<table>
<thead>
<tr>
<th>用户/权限</th>
<th>权限a</th>
<th>权限b</th>
<th>……</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户1</td>
<td>y</td>
<td>n</td>
<td></td>
</tr>
<tr>
<td>用户2</td>
<td>n</td>
<td>y</td>
<td></td>
</tr>
<tr>
<td>……</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3>
<h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3>
<ul>
<li>权限控制比较分散，不利于组合控制</li>
</ul>
<h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3>
<ul>
<li>常用于文件系统的权限设计</li>
</ul>
<h2 id="rbac"><a class="markdownIt-Anchor" href="#rbac"></a> RBAC</h2>
<h3 id="简介-2"><a class="markdownIt-Anchor" href="#简介-2"></a> 简介</h3>
<p>Role-Based Access Control，基于角色的访问控制；<br />
用户与权限通过角色关联</p>
<h4 id="1基本类型"><a class="markdownIt-Anchor" href="#1基本类型"></a> 1.基本类型</h4>
<p><img src="/assets/images/4956f736d70146a3aa5c2a1215e89e6c.jpg" alt="4956f736d70146a3aa5c2a1215e89e6c" /></p>
<h4 id="2引入用户组权限组"><a class="markdownIt-Anchor" href="#2引入用户组权限组"></a> 2.引入用户组/权限组</h4>
<p><img src="/assets/images/c6f27222326d418ca4a65cf8622aa2d9.jpg" alt="c6f27222326d418ca4a65cf8622aa2d9" /></p>
<h4 id="3引入继承"><a class="markdownIt-Anchor" href="#3引入继承"></a> 3.引入继承</h4>
<p><img src="/assets/images/69dd0b2034a14a2f89266317aa18fda9.jpg" alt="69dd0b2034a14a2f89266317aa18fda9" /><br />
<img src="/assets/images/8770cb8d9274459fa97b6be52463cbdb.jpg" alt="8770cb8d9274459fa97b6be52463cbdb" /></p>
<h4 id="4引入限制类型"><a class="markdownIt-Anchor" href="#4引入限制类型"></a> 4.引入限制类型</h4>
<p>当角色或权限需要隔离时引入；</p>
<h3 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点</h3>
<h3 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点</h3>
<h3 id="应用-2"><a class="markdownIt-Anchor" href="#应用-2"></a> 应用</h3>
<h2 id="abac"><a class="markdownIt-Anchor" href="#abac"></a> ABAC</h2>
<h3 id="简介-3"><a class="markdownIt-Anchor" href="#简介-3"></a> 简介</h3>
<h3 id="优点-3"><a class="markdownIt-Anchor" href="#优点-3"></a> 优点</h3>
<h3 id="缺点-3"><a class="markdownIt-Anchor" href="#缺点-3"></a> 缺点</h3>
<h3 id="应用-3"><a class="markdownIt-Anchor" href="#应用-3"></a> 应用</h3>
]]></content>
      <categories>
        <category>design</category>
        <category>system-design</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>//posts/20210219-f1601c3e.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="普通线程安全的单例模式"><a class="markdownIt-Anchor" href="#普通线程安全的单例模式"></a> 普通线程安全的单例模式</h2>
<h3 id="描述"><a class="markdownIt-Anchor" href="#描述"></a> 描述</h3>
<p>即在一个JVM中，一个对象只有一个实例存在</p>
<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3>
<h4 id="指令重排"><a class="markdownIt-Anchor" href="#指令重排"></a> 指令重排</h4>
<p>在Java指令中创建对象和赋值操作是分开进行的，也就是说<code>instance = new Singleton();</code>语句是分两步执行的，但是JVM并不保证这两个操作的先后顺序；</p>
<p>理想顺序是：</p>
<p>​	a.分配对象的内存空间；</p>
<p>​	b.初始化对象；</p>
<p>​	c.设置instance指向刚分配的内存地址；</p>
<p>但经过JVM编译和CPU优化之后有可能是a&gt;c&gt;b；</p>
<p>即指令重排之后，当A线程执行同步代码，并执行到c后，此时B线程执行同步代码的第一次null检测，此时<code>instance!=null</code>，从而返回了一个没有初始化完成的instance对象；</p>
<h2 id="线程安全优化的单例模式"><a class="markdownIt-Anchor" href="#线程安全优化的单例模式"></a> 线程安全优化的单例模式</h2>
<h3 id="描述-2"><a class="markdownIt-Anchor" href="#描述-2"></a> 描述</h3>
<ol>
<li>
<p>利用类加载的过程实现懒加载；</p>
<p>单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载时，这个类的加载过程是线程互斥的；</p>
<p>当第一次调用getInstance的时候，JVM能够保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样就不用担心1.1问题；同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题；</p>
</li>
<li>
<p>使用volatile修饰符</p>
<p>该修饰符阻止了遍历访问前后的指令重排，保证了指令执行顺序；</p>
<p>java volatile关键字</p>
</li>
</ol>
<h3 id="适用"><a class="markdownIt-Anchor" href="#适用"></a> 适用</h3>
<p>解决指令重排的问题</p>
<h3 id="问题-2"><a class="markdownIt-Anchor" href="#问题-2"></a> 问题</h3>
<ol>
<li>思想1不一定完美，若在构造函数中抛出异常，实例将永远得不到创建，会出错；</li>
<li>思想2无法防止利用反射来重复构建对象；</li>
</ol>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<ol>
<li>思想1</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思想1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法，防止被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 使用一个内部类来维护单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonFactory.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果该对象用于序列化，可以保证对象在序列化前后保持一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>思想2</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 思想2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//私有构造方法，防止被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线程安全高级单例模式"><a class="markdownIt-Anchor" href="#线程安全高级单例模式"></a> 线程安全高级单例模式</h2>
<h3 id="描述-3"><a class="markdownIt-Anchor" href="#描述-3"></a> 描述</h3>
<p>因为只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字</p>
<h3 id="适用-2"><a class="markdownIt-Anchor" href="#适用-2"></a> 适用</h3>
<p>解决内部类或者<code>volatile</code>关键字遇到的问题1</p>
<h3 id="示例-2"><a class="markdownIt-Anchor" href="#示例-2"></a> 示例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有静态实例，防止被引用，此处赋值null，目的是实现延迟加载；</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>; </span><br><span class="line">    <span class="comment">//私有构造方法，防止被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 获取实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            syncInit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果该对象用于序列化，可以保证对象在序列化前后保持一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反射问题"><a class="markdownIt-Anchor" href="#反射问题"></a> 反射问题</h2>
<h3 id="利用反射打破单例"><a class="markdownIt-Anchor" href="#利用反射打破单例"></a> 利用反射打破单例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得构造器</span></span><br><span class="line">Constructor con = Singleton.class.getDeclaredConstructor();</span><br><span class="line"><span class="comment">//设置为可访问</span></span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//构造两个不同的对象</span></span><br><span class="line">Singleton singleton1 = (Singleton)con.newInstance();</span><br><span class="line">Singleton singleton2 = (Singleton)con.newInstance();</span><br><span class="line"><span class="comment">//验证是否是不同对象</span></span><br><span class="line">System.out.println(singleton1.equals(singleton2)); <span class="comment">//==false</span></span><br></pre></td></tr></table></figure>
<h3 id="解决利用枚举"><a class="markdownIt-Anchor" href="#解决利用枚举"></a> 解决，利用枚举</h3>
<p>​	优点：利用枚举实现的单例模式不仅能够防止反射构造对象，还能保证线程安全；</p>
<p>​	缺点：它并非使用懒加载，其实例对象是在枚举类被加载的时候进行初始化的；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SingletonEnum</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>design</category>
        <category>java-design-patterns</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>//posts/20210218-28239a8d.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="三要素"><a class="markdownIt-Anchor" href="#三要素"></a> 三要素</h2>
<h3 id="1封装"><a class="markdownIt-Anchor" href="#1封装"></a> 1.封装</h3>
<p>封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象</p>
<h3 id="2继承"><a class="markdownIt-Anchor" href="#2继承"></a> 2.继承</h3>
<p>继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。</p>
<h3 id="3多态"><a class="markdownIt-Anchor" href="#3多态"></a> 3.多态</h3>
<p>多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</p>
<h2 id="5设计原则"><a class="markdownIt-Anchor" href="#5设计原则"></a> 5设计原则</h2>
<h3 id="1单一职责原则single-resposibility-principle"><a class="markdownIt-Anchor" href="#1单一职责原则single-resposibility-principle"></a> 1.单一职责原则（Single-Resposibility Principle）</h3>
<blockquote>
<p>其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。</p>
</blockquote>
<p>单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原 因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。 通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。</p>
<h3 id="2开放封闭原则open-closed-principle"><a class="markdownIt-Anchor" href="#2开放封闭原则open-closed-principle"></a> 2.开放封闭原则（Open-Closed principle）</h3>
<blockquote>
<p>其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。</p>
</blockquote>
<ul>
<li>
<p>开放封闭原则主要体现在两个方面:</p>
<ol>
<li>对扩展开放，意味着有新的需求或变化时</li>
<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。</li>
</ol>
</li>
<li>
<p>实现开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。</p>
</li>
<li>
<p>“需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。</p>
</li>
</ul>
<h3 id="3liskov替换原则liskov-substituion-principle"><a class="markdownIt-Anchor" href="#3liskov替换原则liskov-substituion-principle"></a> 3.Liskov替换原则（Liskov-Substituion Principle）</h3>
<blockquote>
<p>其核心思想是：子类必须能够替换其基类。<br />
这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复 用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不 成立的，子类可以替换基类，但是基类不一定能替换子类。</p>
</blockquote>
<ul>
<li>Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract  Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。</li>
<li>Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则</li>
<li>Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。</li>
</ul>
<h3 id="4依赖倒置原则dependecy-inversion-principle"><a class="markdownIt-Anchor" href="#4依赖倒置原则dependecy-inversion-principle"></a> 4.依赖倒置原则（Dependecy-Inversion Principle）</h3>
<blockquote>
<p>其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。</p>
</blockquote>
<ul>
<li>我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。</li>
<li>抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。</li>
<li>依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。</li>
</ul>
<h3 id="5接口隔离原则interface-segregation-principle"><a class="markdownIt-Anchor" href="#5接口隔离原则interface-segregation-principle"></a> 5.接口隔离原则（Interface-Segregation Principle）</h3>
<blockquote>
<p>其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。</p>
</blockquote>
<ul>
<li>具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。</li>
<li>接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有 方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户 端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端 不会依赖于它们不用的方法</li>
<li>分离的手段主要有以下两种：
<ul>
<li>委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。</li>
<li>多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>design</category>
        <category>system-design</category>
      </categories>
  </entry>
  <entry>
    <title>大型分布式网站架构设计与实践</title>
    <url>//posts/20210414-aad06b49.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/49487c24f5b84306b871455c38382c71.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>大规模分布式系统架构与设计实战</title>
    <url>//posts/20210401-e3128b94.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8f4f2c8954694c2da55df84bcbb1f0f4.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>架构即未来</title>
    <url>//posts/20210401-8318e3d8.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/0daeab4cc4df4758bef700ddd5343934.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>大型网站技术架构核心原理与案例分析</title>
    <url>//posts/20210401-afb5dc5b.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/dadd18449cad4b8f97f73fc8dba81798.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>web信息架构之设计大型网站</title>
    <url>//posts/20210401-b565fa4e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<p><a href="http://resource.iamfengdy.com/assets/books/3bacc50eb232473aa6183925ca5a335c.pdf">PDF</a></p>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>人人都是架构师</title>
    <url>//posts/20210401-d97b8b38.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/17954127edbe4c57884de70a1e3a5662.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据架构详解:从数据获取到深度学习</title>
    <url>//posts/20210401-d1e894b4.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9b26cc009d144b0589b7d9f6e952fa05.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构师指南</title>
    <url>//posts/20210401-e61da164.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/b20769621a2648f787fd9f279a9dd966.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>高可用架构</title>
    <url>//posts/20210401-31b64e6d.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="第一卷-pdf"><a class="markdownIt-Anchor" href="#第一卷-pdf"></a> 第一卷 <a href="http://resource.iamfengdy.com/assets/books/8de307abe5894e4d8d7f0cd82f60cc06.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据时代的IT架构设计</title>
    <url>//posts/20210401-421b4677.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/fb9c3b175a014f90ae2208bac38570a4.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>轻量级微服务架构</title>
    <url>//posts/20210401-b15aeed9.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="上-pdf"><a class="markdownIt-Anchor" href="#上-pdf"></a> 上 <a href="http://resource.iamfengdy.com/assets/books/e2eb553baf814274bcca183449fe8b61.pdf">PDF</a></h1>
<h1 id="下-pdf"><a class="markdownIt-Anchor" href="#下-pdf"></a> 下 <a href="http://resource.iamfengdy.com/assets/books/f0e25f59453d492b9cea7d9082e86fb3.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务设计</title>
    <url>//posts/20210401-28f05446.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/baed9c1c34fe403fbaf273fac5a04f7f.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>亿级流量网站架构核心技术</title>
    <url>//posts/20210401-65c3b3e3.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/b5e36d2d0e154b4eba74450ecfd25b8e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>移动互联网技术架构及其发展</title>
    <url>//posts/20210401-ac2925f7.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8ce4b05f8ed14bb4ad8abef684b569b6.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>系统架构:复杂系统的产品设计与开发</title>
    <url>//posts/20210401-dec70d2f.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/026df4dfb0264210b3cb0cfd43d3c54a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构设计方法</title>
    <url>//posts/20210401-35d32eed.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/1604bc40fcfd47a0b56b82c2be8b9370.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员必读之软件架构</title>
    <url>//posts/20210401-432dff8a.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/ea8eebfbe33647d5b39dbc5f8740732d.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>软件架构师的12项修炼</title>
    <url>//posts/20210401-c8d915ce.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/6c44380b49804b3586364cedc901a2ad.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>design</category>
        <category>architecture-design</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>基础架构</title>
    <url>//posts/20211227-f6347120.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<h3 id="基础架构"><a class="markdownIt-Anchor" href="#基础架构"></a> 基础架构</h3>
<p>HA为家庭控制和自动化提供一个平台，HA不止是一个应用，它是一个嵌入式系统，提供了与其他消费者现成产品一样的体验:安装、配置和更新都是通过一个易用的界面完成的。</p>
<ul>
<li>operating system，提供一个运行Supervisor和Core的最小Linux环境；</li>
<li>Supervisor,管理operating system；</li>
<li>core，用于与用户、supervisor以及物联网设备和服务进行交互；</li>
</ul>
<p><img src="/assets/images/04db23f3f5bb40f69877ba4278ab1e41.png" alt="04db23f3f5bb40f69877ba4278ab1e41" /></p>
<h3 id="running-parts-of-the-stack"><a class="markdownIt-Anchor" href="#running-parts-of-the-stack"></a> Running parts of the stack</h3>
<p>用户对家庭自动化平台有不同的需求。这就是为什么只能运行部分Home Assistant堆栈的原因。有关更多信息，请参见https://www.home-assistant.io/installation/</p>
<h2 id="核心core结构"><a class="markdownIt-Anchor" href="#核心core结构"></a> 核心（Core）结构</h2>
<p>HA core由4个主要部分组成，在此之上，它包含了许多帮助类来处理常见场景，如提供实体或处理位置。</p>
<ul>
<li>
<p>事件总线（Event Bus），方便事件的触发和监听——HA的心跳。</p>
</li>
<li>
<p>状态机（State Machine），跟踪事物的状态，并在状态发生改变时触发state_changed事件。</p>
</li>
<li>
<p>服务注册（Service Registry），在事件总线上监听call_service事件，并允许其他代码注册服务。</p>
</li>
<li>
<p>计时器（Timer），在事件总线上每1秒发送一个time_changed事件；</p>
</li>
</ul>
<p><img src="/assets/images/2f13800efefc4cde86eee30139b64e3c.png" alt="2f13800efefc4cde86eee30139b64e3c" /></p>
<h2 id="集成integration架构"><a class="markdownIt-Anchor" href="#集成integration架构"></a> 集成（Integration）架构</h2>
<p>HA Core能够通过集成进行扩展，每一个集成在HA中负责一个特定域（即特定的功能模块）。集成可以监听或触发事件、提供服务和维护状态。集成由组件(基本逻辑)和平台(与其他集成集成的位)组成。集成是用Python编写的，可以实现Python提供的所有好处。HA提供了一堆现成的<a href="https://www.home-assistant.io/integrations/">内置集成</a></p>
<p><img src="/assets/images/267c141932b74ea3ba8e1e6c55efed77.png" alt="267c141932b74ea3ba8e1e6c55efed77" /></p>
<p>HA区分以下集成类型：</p>
<h3 id="定义一个物联网iot域"><a class="markdownIt-Anchor" href="#定义一个物联网iot域"></a> 定义一个物联网（IOT）域</h3>
<p>这些集成定义了HA中物联网设备的特定设备类别，比如灯。由<code>Light</code>集成来定义什么数据可以在HA中使用以及以什么格式使用。它还提供控制灯光的服务。</p>
<p>已定义域的列表，请见<a href="https://developers.home-assistant.io/docs/core/entity">实体（entities）</a></p>
<p>要建议一个新领域，请在体系结构存储库中开始讨论。确保展示您所提议的实体将包含哪些数据，以及如何控制这些数据。包括来自多个品牌的例子。</p>
<h3 id="与外部设备和服务交互"><a class="markdownIt-Anchor" href="#与外部设备和服务交互"></a> 与外部设备和服务交互</h3>
<p>这些集成与外部设备和服务交互，并通过定义物联网领域(如<code>Light</code>)的集成使它们在HA中可用。这种集成的一个例子是飞利浦Hue。飞利浦Hue灯在家庭助手中作为<code>Light</code>实体可用。</p>
<p>有关更多信息，请参见<a href="https://developers.home-assistant.io/docs/architecture/devices-and-services">实体(entity)架构</a>。</p>
<h3 id="表示虚拟或计算的数据节点"><a class="markdownIt-Anchor" href="#表示虚拟或计算的数据节点"></a> 表示虚拟或计算的数据节点</h3>
<p>这些集成表示实体，要么基于虚拟数据，比如<a href="https://www.home-assistant.io/integrations/input_boolean/">input_boolean</a>集成，即虚拟开关。或者，他们根据HA中可用的其他数据(如<a href="https://www.home-assistant.io/integrations/template/">模板集成</a>或<a href="https://www.home-assistant.io/integrations/utility_meter/">utility_meter集成</a>)来获得自己的数据。</p>
<h3 id="可以由用户触发或响应事件的操作"><a class="markdownIt-Anchor" href="#可以由用户触发或响应事件的操作"></a> 可以由用户触发或响应事件的操作</h3>
<p>这些集成提供了家庭自动化逻辑的小块，可以完成您家里的常见任务。最流行的是<a href="https://www.home-assistant.io/integrations/automation/">自动化集成</a>，允许用户通过配置格式创建自动化。</p>
<p>它也可以更具体，比如<a href="https://www.home-assistant.io/integrations/flux/">通量（flux）集成</a>，它可以根据太阳落山来控制光线。</p>
]]></content>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>身份认证</title>
    <url>//posts/20211227-97ecf4ec.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p>HA有一个内置的认证系统，允许不同的用户与其交互。认证系统由多个部分组成：</p>
<p><img src="/assets/images/1af71e984b334b4e9320f873d91c136e.png" alt="1af71e984b334b4e9320f873d91c136e" /></p>
<h3 id="身份认证提供者"><a class="markdownIt-Anchor" href="#身份认证提供者"></a> 身份认证提供者</h3>
<p>身份验证提供者用于用户对自己进行身份验证。由身份验证提供者选择要使用的身份验证方法和后端。默认情况下，我们启用内置的HA身份验证提供程序，它将用户安全地存储在配置目录中。</p>
<p>HA将使用的身份验证提供程序在<code>configuration.yaml</code>中指定。可以激活同一个身份验证提供者的多个实例。在这种情况下，每个都将由一个惟一的标识符标识。相同类型的身份验证提供者不会共享凭据。</p>
<h3 id="credentials证书-凭据"><a class="markdownIt-Anchor" href="#credentials证书-凭据"></a> Credentials（证书、凭据）</h3>
<p>凭据使用特定的身份验证提供者存储用户的身份验证。它是在用户成功通过身份验证时产生的。它将允许系统在我们的系统中找到用户。如果该用户不存在，将创建一个新用户。该用户将不会被激活，但将需要得到所有者的批准。</p>
<p>用户可以有多个凭据链接到它。但是，每个特定的身份验证提供者只能有一个凭据。</p>
<h3 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h3>
<p>每个人都是系统中的一个用户。要作为特定用户登录，请使用链接到该用户的任何身份验证提供者进行身份验证。当用户登录时，它将获得一个刷新（refresh token）和一个访问（access token）令牌，以向Home Assistant发出请求。</p>
<h4 id="拥有者owner"><a class="markdownIt-Anchor" href="#拥有者owner"></a> 拥有者（owner）</h4>
<p>在onboarding期间创建的用户将被标记为“所有者”。所有者能够管理其他用户，并且总是能够访问所有权限。</p>
<h3 id="组"><a class="markdownIt-Anchor" href="#组"></a> 组</h3>
<p>用户是一个或多个组的成员。组成员关系是授予用户权限的方式。</p>
<h3 id="权限策略permission-policy"><a class="markdownIt-Anchor" href="#权限策略permission-policy"></a> 权限策略（Permission Policy）</h3>
<p>权限策略描述了一个组可以访问哪些资源。有关权限和策略的更多信息，请参见<a href="https://developers.home-assistant.io/docs/auth_permissions">权限</a>。</p>
<h3 id="refresh-and-access-token"><a class="markdownIt-Anchor" href="#refresh-and-access-token"></a> refresh and access token</h3>
<p>希望访问Home Assistant的应用程序将要求用户启动授权流。当用户使用Home Assistant成功授权应用程序时，该流将生成授权码（authorization code)。此码可用于获取访问（access token）和刷新（refresh token）令牌。访问令牌（access token）将有一个有限的生存期，而刷新令牌 （refresh token）将保持有效，直到用户删除它。</p>
<p>访问令牌用于访问Home Assistant api。刷新令牌用于检索新的有效访问令牌。</p>
<h4 id="refresh-token-类型"><a class="markdownIt-Anchor" href="#refresh-token-类型"></a> refresh token 类型</h4>
<ul>
<li>正常，这些是用户授权应用程序时生成的令牌。应用程序将代表用户保留这些令牌；</li>
<li>长期存活的access token，这些是支持长期生存访问令牌的刷新令牌。它们是在内部创建的，从不向用户公开；</li>
<li>系统，这些令牌只能由Home Assistant OS和Supervisor等系统用户生成和使用。它们永远不会暴露给用户。</li>
</ul>
<h2 id="权限permissions"><a class="markdownIt-Anchor" href="#权限permissions"></a> 权限（permissions）</h2>
<p>权限限制用户可以访问或控制的内容。权限被附加到组，用户可以是组的成员。用户所属的所有组的组合权限决定了用户可以看到什么，不能看到什么或控制什么。</p>
<p>权限不适用于标记为“所有者”的用户。这个用户将始终能够访问所有内容。</p>
<h3 id="普通权限结构"><a class="markdownIt-Anchor" href="#普通权限结构"></a> 普通权限结构</h3>
<p>策略是一种字典，在根级别由不同类别的权限组成。在当前的实现中，这仅限于实体。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;entities&quot;</span>:&#123;</span><br><span class="line">    # ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个类别可以进一步细分为描述该类别部分的子类别。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;entities&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;domains&quot;</span>: &#123;</span><br><span class="line">            # …</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;entity_ids&quot;</span>: &#123;</span><br><span class="line">            # …</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果省略了某个类别，用户将没有该类别的权限。</p>
<p>定义策略时，任何位置的任何字典值都可以用True或None替换。True表示授予权限，None表示使用default，即拒绝访问。</p>
<h3 id="实体entities"><a class="markdownIt-Anchor" href="#实体entities"></a> 实体（Entities）</h3>
<p>实体权限可以使用子类别entity_ids、device_ids、area_ids和domain在每个实体和域的基础上设置。您可以通过设置值为True授予所有访问权限，或者您可以使用“读”、“控制”、“编辑”权限单独指定每个实体。</p>
<p>系统将根据顺序返回第一个匹配结果:entity_ids、device_ids、area_ids、domains、all。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;entities&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;domains&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;switch&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;entity_ids&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;light.kitchen&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;read&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;control&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并策略"><a class="markdownIt-Anchor" href="#合并策略"></a> 合并策略</h3>
<p>如果用户是多个组的成员，组权限策略将在运行时组合为单个策略。当合并策略时，我们将查看字典的每一层，并使用以下方法比较每个源的值:</p>
<ol>
<li>如果其中任何一个值为True，则合并后的值为True；</li>
<li>如果有任何值是字典，则合并的值将成为使用此方法递归检查每个值而创建的字典；</li>
<li>如果所有值都为None，则合并后的值为None；</li>
</ol>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;entities&quot;: &#123;</span><br><span class="line">        &quot;entity_ids&quot;: &#123;</span><br><span class="line">            &quot;light.kitchen&quot;: True</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;entities&quot;: &#123;</span><br><span class="line">        &quot;entity_ids&quot;: True</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 合并后的</span><br><span class="line">&#123;</span><br><span class="line">    &quot;entities&quot;: &#123;</span><br><span class="line">        &quot;entity_ids&quot;: True</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="检测权限"><a class="markdownIt-Anchor" href="#检测权限"></a> 检测权限</h3>
<p>我们目前有两种不同的权限检查:用户是否可以对一个实体进行读取/控制/编辑操作，以及用户是admin，因此允许更改这个配置设置。</p>
<p>所有用户都可以访问某些api，但可能会根据权限提供有限的作用域，比如呈现模板。</p>
<h4 id="检测权限-2"><a class="markdownIt-Anchor" href="#检测权限-2"></a> 检测权限</h4>
<p>要检查权限，您需要拥有对用户对象的访问权限。一旦您拥有了用户对象，检查权限就很容易了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> homeassistant.exceptions <span class="keyword">import</span> Unauthorized</span><br><span class="line"><span class="keyword">from</span> homeassistant.permissions.const <span class="keyword">import</span> POLICY_READ, POLICY_CONTROL, POLICY_EDIT</span><br><span class="line"></span><br><span class="line"><span class="comment"># Raise error if user is not an admin</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> user.is_admin:</span><br><span class="line">    <span class="keyword">raise</span> Unauthorized()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Raise error if user does not have access to control an entity</span></span><br><span class="line"><span class="comment"># Available policies: POLICY_READ, POLICY_CONTROL, POLICY_EDIT</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> user.permissions.check_entity(entity_id, POLICY_CONTROL):</span><br><span class="line">    <span class="keyword">raise</span> Unauthorized()</span><br></pre></td></tr></table></figure>
<h4 id="context对象"><a class="markdownIt-Anchor" href="#context对象"></a> context对象</h4>
<h2 id="api"><a class="markdownIt-Anchor" href="#api"></a> API</h2>
<h2 id="authentication-providers"><a class="markdownIt-Anchor" href="#authentication-providers"></a> Authentication Providers</h2>
<h2 id="multi-factor-authentication-modules"><a class="markdownIt-Anchor" href="#multi-factor-authentication-modules"></a> Multi-factor Authentication Modules</h2>
]]></content>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>配置</title>
    <url>//posts/20211227-2a1422d2.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="配置项"><a class="markdownIt-Anchor" href="#配置项"></a> 配置项</h2>
<p>配置项是Home Assistant持久存储的配置数据。配置条目是由用户通过UI创建的。UI流由组件定义的<a href="https://developers.home-assistant.io/docs/config_entries_config_flow_handler">配置流处理程序</a>提供支持。配置条目也可以有一个额外的<a href="https://developers.home-assistant.io/docs/config_entries_options_flow_handler">选项流处理程序</a>，也是由组件定义的。</p>
<h3 id="生命周期"><a class="markdownIt-Anchor" href="#生命周期"></a> 生命周期</h3>
<table>
<thead>
<tr>
<th>状态名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>未加载（not loaded）</td>
<td>配置项尚未加载。这是在创建配置条目或重新启动Home Assistant时的初始状态。</td>
</tr>
<tr>
<td>已加载（loaded）</td>
<td>配置项已加载</td>
</tr>
<tr>
<td>setup error</td>
<td>试图设置配置项时发生错误</td>
</tr>
<tr>
<td>setup retry</td>
<td>配置条目的依赖项还没有准备好。Home Assistant将在将来自动重试加载此配置条目。每次尝试的间隔时间会自动增加。</td>
</tr>
<tr>
<td>migration error</td>
<td>配置条目必须迁移到新版本，但是迁移失败了</td>
</tr>
<tr>
<td>failed unload</td>
<td>试图卸载配置条目，但这要么不被支持，要么引发异常。</td>
</tr>
</tbody>
</table>
<p><img src="/assets/images/820c44e44b674ba4b895f885f9089673.png" alt="820c44e44b674ba4b895f885f9089673" /></p>
<h3 id="设置一个项"><a class="markdownIt-Anchor" href="#设置一个项"></a> 设置一个项</h3>
<p>在启动期间，Home Assistant首先调用<a href="https://developers.home-assistant.io/docs/creating_component_index">常规组件设置</a>，然后为每个条目调用方法async_setup_entry(hass，条目)。如果在运行时创建了一个新的Config Entry, Home Assistant也会调用async_setup_entry(hass, Entry) (<a href="https://github.com/home-assistant/core/blob/0.68.0/homeassistant/components/hue/__init__.py#L119">example</a>)。</p>
<p>如果组件包含平台，则需要将Config Entry转发到平台。这可以通过调用配置条目管理器上的forward函数来实现（<a href="https://github.com/home-assistant/core/blob/0.68.0/homeassistant/components/hue/bridge.py#L81">示例</a>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use `hass.async_create_task` to avoid a circular dependency between the platform and the component</span></span><br><span class="line">hass.async_create_task(</span><br><span class="line">  hass.config_entries.async_forward_entry_setup(</span><br><span class="line">    config_entry, <span class="string">&quot;light&quot;</span></span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>对于一个支持配置条目的平台，它需要添加一个setup条目方法(<a href="https://github.com/home-assistant/core/blob/0.68.0/homeassistant/components/light/hue.py#L60">示例</a>):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_setup_entry</span>(<span class="params">hass, config_entry, async_add_devices</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Set up entry.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="卸载条目"><a class="markdownIt-Anchor" href="#卸载条目"></a> 卸载条目</h3>
<p>组件可以选择支持卸载配置条目。当卸载一个条目时，组件需要清理所有实体，取消订阅任何事件监听器并关闭所有连接。要实现这一点，请向组件(示例)添加async_unload_entry(hass, entry)。</p>
<p>对于您将配置条目转发到的每个平台，您也需要转发卸载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> self.hass.config_entries.async_forward_entry_unload(self.config_entry, <span class="string">&quot;light&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>如果你需要清理平台中实体使用的资源，让实体实现async_will_remove_from_hass方法。</p>
<h3 id="删除条目"><a class="markdownIt-Anchor" href="#删除条目"></a> 删除条目</h3>
<p>如果一个组件需要在删除条目时清理代码，它可以定义一个删除方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_remove_entry</span>(<span class="params">hass, entry</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Handle removal of an entry.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据项流"><a class="markdownIt-Anchor" href="#数据项流"></a> 数据项流</h2>
<p>数据输入流是一个数据输入框架，是家庭助理的一部分。数据输入是通过数据输入流完成的。一个流可以表示一个简单的登录表单或一个组件的多步骤设置向导。流管理器管理所有正在进行的流，并处理新流的创建。</p>
<p>“数据输入流”在HA中用于创建配置项。</p>
<h3 id="流管理器"><a class="markdownIt-Anchor" href="#流管理器"></a> 流管理器</h3>
]]></content>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工作流程</title>
    <url>//posts/20211227-b588ba43.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p>Home Assistant是从头开始构建的，使用集成可以很容易地扩展。在本节中，我们将重点讨论如何开发集成。</p>
<h2 id="设置开发环境"><a class="markdownIt-Anchor" href="#设置开发环境"></a> 设置开发环境</h2>
]]></content>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>集成设备和服务</title>
    <url>//posts/20211227-6d585606.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p>集成可以代表“家庭助理”中的设备和服务。数据点被表示为实体。实体是由其他集成来标准化的，比如灯、开关等。标准化的实体附带了用于控制的服务，但是如果某些东西没有标准化，集成也可以提供自己的服务。</p>
<p>实体抽象了家庭助理的内部工作。作为一个集成商，您不必担心服务或状态机是如何工作的。相反，您可以扩展一个实体类，并为正在集成的设备类型实现必要的属性和方法。</p>
<p><img src="/assets/images/665c8235c8dc4901963aba0456ecaf16.png" alt="665c8235c8dc4901963aba0456ecaf16" /></p>
<ul>
<li>配置由用户通过<a href="https://developers.home-assistant.io/docs/config_entries_index">配置条目</a>提供，或者在特殊/空缺情况下通过<a href="https://developers.home-assistant.io/docs/configuration_yaml_index">Configuration .yaml</a>提供。</li>
<li><code>Device Integration</code>(例如hue)将使用这个配置来建立与设备/服务的连接。它将转发配置条目(遗留系统使用discovery helper)，以在各自的集成(light、switch)中设置其实体。该设备集成还可以为未标准化的事物注册自己的服务。这些服务发布在集成的域下，即hue.activate_scene。</li>
<li><code>entity integration</code>负责定义抽象实体类和服务来控制实体。</li>
<li><code>Entity Component helper</code>负责将配置分发到平台，转发服务调用的发现和收集实体。</li>
<li><code>Entity Platform helper</code>管理平台的所有实体，并在必要时轮询它们以获取更新。添加实体时，实体平台负责向设备和实体注册中心注册实体。</li>
<li><code>Integration Platform</code>集成平台(即hue.light)使用配置来查询外部设备/服务，并创建要添加的实体。集成平台也可以注册实体服务。这些服务将工作在设备集成的所有实体上进行实体集成(即所有Hue灯光实体)。这些服务在设备集成域下发布。</li>
</ul>
<h3 id="实体与ha-core交互"><a class="markdownIt-Anchor" href="#实体与ha-core交互"></a> 实体与HA Core交互</h3>
<p>从实体基类继承的集成实体类负责获取数据并处理服务调用。如果轮询被禁用，它还负责告诉Home Assistant何时有数据可用。</p>
<p><img src="/assets/images/7cdfaeea9adf4e3e8eac6cbd7a105a55.png" alt="7cdfaeea9adf4e3e8eac6cbd7a105a55" /></p>
<p>实体基类(由实体集成定义)负责格式化数据并将其写入状态机。</p>
<p>实体注册表将为任何当前未受实体对象支持的已注册实体写一个不可用状态。</p>
<h3 id="实体数据层次结构"><a class="markdownIt-Anchor" href="#实体数据层次结构"></a> 实体数据层次结构</h3>
<p><img src="/assets/images/373ecaffe5c8480da4abae59306711ec.png" alt="373ecaffe5c8480da4abae59306711ec" /></p>
<p>删除、禁用或重新启用任何对象，下面的所有对象都会相应调整。</p>
<h2 id="实体注册表entity-registry"><a class="markdownIt-Anchor" href="#实体注册表entity-registry"></a> 实体注册表（Entity Registry）</h2>
<p>实体注册表是Home Assistant跟踪实体的注册表。添加到Home Assistant的任何指定unique_id属性的实体都将在注册表中注册。</p>
<p>注册的好处是相同的实体将总是获得相同的实体ID。它还将阻止其他实体使用该实体ID。</p>
<p>用户还可以在实体注册表中覆盖实体的名称。设置实体注册表时，使用实体注册表的名称，而不是设备本身的名称。</p>
<h3 id="唯一id"><a class="markdownIt-Anchor" href="#唯一id"></a> 唯一ID</h3>
<p>用户不可能更改唯一ID，这一点很重要，因为系统会丢失与唯一ID相关的所有设置。</p>
<p>根据平台类型(例如，light)、集成名称(例如，hue)和实体的唯一ID在注册表中查找实体。实体不应该在他们的Unique ID中包含域(如your_integration)和平台类型(如light)，因为系统已经为这些标识提供了账号。</p>
<p>如果一个设备有一个唯一id，但提供了多个实体，则可以将唯一id与实体的唯一标识符结合使用。例如，当设备同时测量温度和湿度时，可以使用{unique_id}-{sensor_type}唯一标识该实体。</p>
<h3 id="惟一的id要求"><a class="markdownIt-Anchor" href="#惟一的id要求"></a> 惟一的ID要求</h3>
<h4 id="唯一id的可接受源示例"><a class="markdownIt-Anchor" href="#唯一id的可接受源示例"></a> 唯一ID的可接受源示例</h4>
<ul>
<li>设备序列号</li>
<li>MAC地址:使用homeassistant.helpers.device_registry.format_mac;只能从设备API或发现处理程序（discovery handler）中获取MAC地址。依赖于读取arp缓存或本地网络访问的工具，如getmac，将不能在所有支持的网络环境中工作，这是不可接受的。</li>
<li>经纬度或其他独特的地理位置</li>
<li>在设备上打印或刻录到EEPROM中的唯一标识符</li>
</ul>
<h4 id="最后的唯一id"><a class="markdownIt-Anchor" href="#最后的唯一id"></a> 最后的唯一id</h4>
<p>对于由配置条目设置的实体，如果没有其他惟一ID可用，则可以使用配置条目ID作为最后的手段。</p>
<h4 id="无法接受的唯一id来源"><a class="markdownIt-Anchor" href="#无法接受的唯一id来源"></a> 无法接受的唯一ID来源</h4>
<ul>
<li>IP地址</li>
<li>设备名称</li>
<li>主机名</li>
<li>URL</li>
<li>电子邮件地址</li>
<li>用户名</li>
</ul>
<h2 id="实体注册表和禁用实体"><a class="markdownIt-Anchor" href="#实体注册表和禁用实体"></a> 实体注册表和禁用实体</h2>
<p>实体注册中心跟踪所有具有唯一id的实体。对于每个实体，注册中心跟踪影响实体与核心交互方式的选项。其中一个选项是disabled_by。</p>
<p>当设置了disabled_by而不是None时，当集成将实体传递给async_add_entities时，该实体将不会被添加到Home Assistant。</p>
<h3 id="集成架构"><a class="markdownIt-Anchor" href="#集成架构"></a> 集成架构</h3>
<p>集成将需要确保它们在实体被禁用时能够正确工作。如果你的集成保持对创建的实体对象的引用，它应该只在实体的生命周期方法async_added_to_hass中注册这些引用。这个生命周期方法只有在实体实际添加到Home Assistant时才会被调用(因此它没有被禁用)。</p>
<p>实体禁用作用于通过配置条目或configuration.yaml中的条目提供的实体。如果您的集成是通过配置条目设置的，并且支持卸载，那么Home Assistant将能够在启用/禁用实体后重新加载集成，从而无需重新启动即可应用更改。</p>
<h3 id="用户编辑实体注册表"><a class="markdownIt-Anchor" href="#用户编辑实体注册表"></a> 用户编辑实体注册表</h3>
<p>禁用实体的一种方法是用户通过UI编辑实体注册表。在本例中，disabled_by值将被设置为RegistryEntryDisabler.USER。这只适用于已经注册的实体。</p>
<h3 id="为新的实体注册表项设置disabled_by的默认值"><a class="markdownIt-Anchor" href="#为新的实体注册表项设置disabled_by的默认值"></a> 为新的实体注册表项设置disabled_by的默认值</h3>
<p>作为一个集成，您可以控制您的实体在第一次注册时是否启用。这是由entity_registry_enabled_default属性控制的。它默认为True，这意味着实体将被启用。</p>
<p>如果属性返回False，新注册实体的disabled_by值将被设置为RegistryEntryDisabler.INTEGRATION。</p>
<h3 id="配置条目系统选项设置新实体注册表项的disabled_by的默认值"><a class="markdownIt-Anchor" href="#配置条目系统选项设置新实体注册表项的disabled_by的默认值"></a> 配置条目系统选项设置新实体注册表项的disabled_by的默认值</h3>
<p>用户还可以通过将配置条目的系统选项disable_new_entities设置为True来控制如何接收与配置条目相关的新实体。这可以通过UI来完成。</p>
<p>如果一个实体正在注册并且这个系统选项被设置为True, disabled_by属性将被初始化为RegistryEntryDisabler.CONFIG_ENTRY。</p>
<p>如果disable_new_entities设置为True，而entity_registry_enabled_default返回False, disabled_by值将被设置为RegistryEntryDisabler.INTEGRATION。</p>
<h3 id="提供控制disabled_by选项的集成"><a class="markdownIt-Anchor" href="#提供控制disabled_by选项的集成"></a> 提供控制disabled_by选项的集成</h3>
<p>有些集成希望向用户提供选项，以控制哪些实体被添加到Home Assistant中。例如，Unifi集成提供了启用/禁用无线和有线客户端的选项。</p>
<p>集成可以通过配置为用户提供选项。yaml或使用选项流。</p>
<p>如果这个选项是由集成提供的，那么您不应该利用实体注册表中的disabled_by属性。相反，如果实体通过配置选项流被禁用，则将它们从设备和实体注册表中删除。</p>
<h2 id="设备注册表"><a class="markdownIt-Anchor" href="#设备注册表"></a> 设备注册表</h2>
<p>设备注册表是Home Assistant跟踪设备的注册表。在“家庭助理”中，设备通过一个或多个实体来表示。例如，电池供电的温湿度传感器可能会暴露温度、湿度和电池级别的实体。</p>
<p><img src="/assets/images/8b458d5bd06241b280dc15b94d88bef1.png" alt="8b458d5bd06241b280dc15b94d88bef1" /></p>
<h3 id="什么是设备"><a class="markdownIt-Anchor" href="#什么是设备"></a> 什么是设备？</h3>
<p>“家庭助理”中的设备表示具有自己的控制单元的物理设备。控制单元本身不需要很聪明，但它应该控制所发生的事情。例如，带有4个房间传感器的Ecobee恒温器相当于家庭助手中的5个设备，一个用于恒温器，包括它内部的所有传感器，每个传感器都有一个。每个设备存在于特定的地理区域，并且在该区域内可能有多个输入或输出。</p>
<p>如果您将一个传感器连接到另一个设备来读取它的一些数据，它仍然应该表示为两个不同的设备。这样做的原因是，可以移动传感器来读取另一个设备的数据。</p>
<p>一个提供多个端点的设备，其中设备的部分在不同的区域感知或输出，应该被分割成单独的设备，并使用via_device属性返回到父设备。这允许将单独的端点分配到建筑中的不同区域。</p>
<blockquote>
<p>虽然目前还无法实现，但我们可以考虑为用户提供合并设备的选项。</p>
</blockquote>
<h3 id="设备属性"><a class="markdownIt-Anchor" href="#设备属性"></a> 设备属性</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>area_id</td>
<td>放置设备的区域。</td>
</tr>
<tr>
<td>config_entries</td>
<td>Config entries that are linked to this device.</td>
</tr>
<tr>
<td>configuration_url</td>
<td>可以使用Home Assistant://<path>来配置设备或服务的URL，链接到Home Assistant UI内部的路径。</td>
</tr>
<tr>
<td>connections</td>
<td>一组元组(connection_type，连接标识符)。connection_type在设备注册表模块中定义。</td>
</tr>
<tr>
<td>default_name</td>
<td>此设备的默认名称，如果设置name，将被覆盖。例如，对于显示网络上所有设备的集成很有用。</td>
</tr>
<tr>
<td>default_manufacturer</td>
<td>如果设置了manufacturer，设备的制造商将被覆盖。例如，对于显示网络上所有设备的集成很有用。</td>
</tr>
<tr>
<td>default_model</td>
<td>如果设置了model，设备的型号将被覆盖。例如，对于显示网络上所有设备的集成很有用。</td>
</tr>
<tr>
<td>entry_type</td>
<td>条目的类型。取值为“None”和“DeviceEntryType”enum成员。</td>
</tr>
<tr>
<td>id</td>
<td></td>
</tr>
<tr>
<td>identifiers</td>
<td>(DOMAIN，标识符)元组的集合。标识符在外部世界识别设备。例如序列号。</td>
</tr>
<tr>
<td>name</td>
<td></td>
</tr>
<tr>
<td>manufacturer</td>
<td></td>
</tr>
<tr>
<td>model</td>
<td></td>
</tr>
<tr>
<td>suggested_area</td>
<td>设备所在区域的建议名称</td>
</tr>
<tr>
<td>sw_version</td>
<td>设备固件版本号。</td>
</tr>
<tr>
<td>hw_version</td>
<td>设备的硬件版本。</td>
</tr>
<tr>
<td>via_device</td>
<td>设备标识符，用于在该设备和Home Assistant之间路由消息。这样的设备的例子是集线器，或者子设备的父设备。用于在“家庭助手”中显示设备拓扑。</td>
</tr>
</tbody>
</table>
<h3 id="定义设备"><a class="markdownIt-Anchor" href="#定义设备"></a> 定义设备</h3>
<blockquote>
<p>只有当实体通过<a href="https://developers.home-assistant.io/docs/config_entries_index">配置条目</a>加载并且定义了unique_id属性时，实体设备信息才会被读取。</p>
</blockquote>
<p>每个实体都可以通过device_info属性定义一个设备。当通过配置条目将实体添加到Home Assistant时，将读取此属性。设备将通过提供的标识符或连接(如序列号或MAC地址)与现有设备进行匹配。如果提供了标识符和连接，设备注册表将首先尝试通过标识符进行匹配。每个标识符和每个连接都是单独匹配的(例如，只需要匹配一个连接就被认为是相同的设备)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inside a platform</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HueLight</span>(<span class="params">LightEntity</span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">device_info</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;identifiers&quot;</span>: &#123;</span><br><span class="line">                <span class="comment"># Serial numbers are unique identifiers within a specific domain</span></span><br><span class="line">                (hue.DOMAIN, self.unique_id)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: self.name,</span><br><span class="line">            <span class="string">&quot;manufacturer&quot;</span>: self.light.manufacturername,</span><br><span class="line">            <span class="string">&quot;model&quot;</span>: self.light.productname,</span><br><span class="line">            <span class="string">&quot;sw_version&quot;</span>: self.light.swversion,</span><br><span class="line">            <span class="string">&quot;via_device&quot;</span>: (hue.DOMAIN, self.api.bridgeid),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>除了设备属性，device_info还可以包括default_manufacturer、default_model、default_name。如果还没有定义其他值，这些值将被添加到设备注册表中。这可以用于知道一些信息但不是非常具体的集成。例如，基于MAC地址识别设备的路由器。</p>
<h3 id="手工注册"><a class="markdownIt-Anchor" href="#手工注册"></a> 手工注册</h3>
<p>组件还能够在没有实体表示它们的情况下注册设备。一个例子是与灯通信的枢纽。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inside a component</span></span><br><span class="line"><span class="keyword">from</span> homeassistant.helpers <span class="keyword">import</span> device_registry <span class="keyword">as</span> dr</span><br><span class="line"></span><br><span class="line">device_registry = dr.async_get(hass)</span><br><span class="line"></span><br><span class="line">device_registry.async_get_or_create(</span><br><span class="line">    config_entry_id=entry.entry_id,</span><br><span class="line">    connections=&#123;(dr.CONNECTION_NETWORK_MAC, config.mac)&#125;,</span><br><span class="line">    identifiers=&#123;(DOMAIN, config.bridgeid)&#125;,</span><br><span class="line">    manufacturer=<span class="string">&quot;Signify&quot;</span>,</span><br><span class="line">    suggested_area=<span class="string">&quot;Kitchen&quot;</span>,</span><br><span class="line">    name=config.name,</span><br><span class="line">    model=config.modelid,</span><br><span class="line">    sw_version=config.swversion,</span><br><span class="line">    hw_version=config.hwversion,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="区域注册表"><a class="markdownIt-Anchor" href="#区域注册表"></a> 区域注册表</h2>
<p>区域注册表是Home Assistant跟踪区域的一个注册表。区域表示“家庭助理”的物理位置。可以将设备放置在不同的区域。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言深度解剖</title>
    <url>//posts/20210415-da1830de.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/468e85fd64d443d0a5ce27ff605b8da8.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>c</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>高级bash编程指南</title>
    <url>//posts/20210415-22e7a61e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/c4056c6b0f85440da01faa7deecb1373.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言编程</title>
    <url>//posts/20210415-e78606bf.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/4c2a9c8405754613839dfddba61a380f.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>go</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>java核心技术</title>
    <url>//posts/20210415-f6d90f7a.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="卷1-基础知识-pdf"><a class="markdownIt-Anchor" href="#卷1-基础知识-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/49dbbfb201c64ccc948ddaa3a3eea6e7.pdf">卷1 基础知识 PDF</a></h1>
<h1 id="卷2-高级特性-pdf"><a class="markdownIt-Anchor" href="#卷2-高级特性-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/6e0c01ce832340f2a40e26eea1c4d5ad.pdf">卷2 高级特性 PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate参考</title>
    <url>//posts/20210415-aff120d2.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/d8c8150391b4433298da13b693541619.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程编程核心技术</title>
    <url>//posts/20210415-124234c9.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/f29f56d4f7614faabda5bcacc85cc17e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>实战Java高并发程序设计</title>
    <url>//posts/20210415-8e490f7e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/d61ec6d836194021ab4d3048aa2b0b3f.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>java性能权威指南</title>
    <url>//posts/20210415-f57a5c1c.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/58a9c7c561ac4288ba8e43c9d7973d08.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>thinking-in-java</title>
    <url>//posts/20210415-101ce1dd.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/62bd635e741e4652b54846584d70f3b3.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>2-内存区域与内存溢出异常</title>
    <url>//posts/20210415-e4f0f04f.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="运行时数据区域"><a class="markdownIt-Anchor" href="#运行时数据区域"></a> 运行时数据区域</h2>
<p><img src="/assets/images/39415ac38dc84bd2a2b7805c90ca484e.png" alt="39415ac38dc84bd2a2b7805c90ca484e" /></p>
<blockquote>
<p>从设计角度看：栈代表了处理逻辑，堆代表了数据</p>
</blockquote>
<h3 id="程序计数器"><a class="markdownIt-Anchor" href="#程序计数器"></a> 程序计数器</h3>
<p><em>PC(Program Counter Register)</em></p>
<ul>
<li>线程私有</li>
<li>是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器；在虚拟机的概念模型里（尽是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li>
<li>由于Java虚拟机的多线程时通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行未知，每条线程都需要一个独立的PC，个线程之间的PC互不影响，独立存储，称这类内存区域为“线程私有”的内存；</li>
<li>如果线程正在执的是一个Java方法，该PC记录的是正在执行的虚拟机字节码指令的地址，如果正在执行的是Nativ方法，该PC值为空（Undefined）。此内存区域是唯一一个在JVM规范中没有规定任何OutOfMerroryError情况的区域；</li>
</ul>
<h3 id="java虚拟机栈stack"><a class="markdownIt-Anchor" href="#java虚拟机栈stack"></a> Java虚拟机栈（Stack）</h3>
<ul>
<li>线程私有；用于方法执行时数据存储；基础单位是栈帧；</li>
<li><a href="">运行时栈帧结构</a></li>
</ul>
<h3 id="本地方法栈native-method-stack"><a class="markdownIt-Anchor" href="#本地方法栈native-method-stack"></a> 本地方法栈（Native Method Stack）</h3>
<p><em>本地方法就是一个java调用非java代码的接口；一个Native Method是这样一个方法：该方法的实现由非java语言实现；</em></p>
<ul>
<li>与虚拟机栈类似，不同是虚拟机栈为虚拟机指定Java方法（即字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务；</li>
<li>虚拟机规范中对该栈所使用的语言、方式及数据结构没有强制规定，可以自由实现，有时也会将其与虚拟机栈合并；</li>
</ul>
<h3 id="java堆heap"><a class="markdownIt-Anchor" href="#java堆heap"></a> java堆（Heap）</h3>
<ul>
<li>所有线程共享；</li>
<li>在启动时创建，唯一目的是用于存放对象实例，几乎所有（随着发展，并不能保证所有对象，所以是“几乎”）的对象实例都在这里分配内存；</li>
<li>堆是虚拟机管理的内存中最大一块，也是垃圾收集器管理的主要区域所以也称为“GC堆”（Garbage Collected Heap）</li>
</ul>
<h3 id="方法区method-area或non-heap"><a class="markdownIt-Anchor" href="#方法区method-area或non-heap"></a> 方法区（Method Area或Non-Heap）</h3>
<ul>
<li>线程共享；</li>
<li>用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据；</li>
<li>在规范中将其描述为堆的一个逻辑部分；</li>
<li>该区域的内存回收主要是针对常量池的回收的对类型的卸载；</li>
</ul>
<h3 id="运行常量池runtime-constant-pool"><a class="markdownIt-Anchor" href="#运行常量池runtime-constant-pool"></a> 运行常量池（Runtime Constant Pool）</h3>
<ul>
<li>方法区的一部分；</li>
<li>Class文件中有一项信息是常量池信息（用于存放编译期生成的各种字面量和符号引用），这部分内容将在类加载后存放在方法区的运行时常量池中；</li>
<li>运行期也可将新的常量放入池中；</li>
<li>存放的是字符串常量和基本类型常量（final修饰的）；</li>
</ul>
<h3 id="直接内存"><a class="markdownIt-Anchor" href="#直接内存"></a> 直接内存</h3>
<ul>
<li>不是虚拟机运行时数据区的一部分，也不是规范中定义的内存区域；</li>
<li>在JDK1.4中新加入了NIO（New I/O）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，可以使用Native函数库直接分配堆外内存，然后通过存储在Java堆中的DirectByteBuffer对象作为这块内存的医用进行操作，这样能在一些场景中显著的提高性能，因为避免了在Java堆和Native堆中来回复制数据；</li>
</ul>
<h2 id="hotspot虚拟机对象探秘"><a class="markdownIt-Anchor" href="#hotspot虚拟机对象探秘"></a> HotSpot虚拟机对象探秘</h2>
<h3 id="对象的创建"><a class="markdownIt-Anchor" href="#对象的创建"></a> 对象的创建</h3>
<p>虚拟机检测到一条new指令后，就会触发创建对象动作，流程基本如下：</p>
<ol>
<li>
<p>类加载检查</p>
<pre><code>1. new指令的参数是否能在常量池中定位到一个类的符号引用；
2. 该符号引用所代表的类是否已被加载、解析和初始化过；
</code></pre>
</li>
<li>
<p>分配内存</p>
<ol>
<li>
<p>内存分配方式</p>
<p>这时又分两种情况：</p>
<ol>
<li>Java堆中的内存是绝对规整时（即用过的放在一边，没用过的放在另一边，中间防止一个指针作为分界点）：使用“指针碰撞”，即将分界指针向空闲边挪动一段与大小相等的距离；</li>
<li>不规整时：使用“空闲列表”，即虚拟机必须维护一个用于记录可用的内存块的列表，在分配时从列表中查找一块足够大的孔家分配给对象；</li>
</ol>
<p>采用哪种方式由内存是否规整决定，是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。因此，在使用Serial，ParNew等带有Compact过程的收集器时采用的是指针碰撞；使用CMS这种基于Mark-Sweep算法的收集器时采用的是空闲列表；</p>
</li>
<li>
<p>原子性</p>
<p>比如正在对对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况；为此有两种解决方案：</p>
<ol>
<li>
<p>同步</p>
<p>对内存分配空间的动作进行同步处理，即虚拟机采用CAS配上失败重试的方式保证更新操作的原子性；</p>
</li>
<li>
<p>缓冲</p>
<p>把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），只有TLAB用完才分配新的TLAB，才需要同步锁定。虚拟机是否启用TLAB，可以通过-XX:+/-UserTLAB来设定；</p>
</li>
</ol>
</li>
</ol>
</li>
<li>
<p>初始化</p>
<p>内存分配完之后，虚拟机需要将分配到的内存空间都初始化为数据类型对应的零值（不包括对象头）。如果使用TLAB，这一过程可以提前至TLAB分配时进行，这一步操作保证了实例字段在代码中不可以赋初始值就可以直接使用；</p>
</li>
<li>
<p>设置对象头</p>
<p>虚拟机对对象进行必要的设置，比如对象所属类，如何找到元数据信息，对象的哈希码等；这些信息都在对象头中；</p>
</li>
<li>
<p>实例化</p>
<p>此时，一个新对象已产生，但所有字段均为零；一般来说（有字节码中是否跟随invokespecial指令所决定），执行完new指令后接着执行init方法，来按照程序的意愿进行初始化，（可以理解为实例化，就是将对象中的变量赋值）。</p>
</li>
</ol>
<h3 id="对象的内存布局"><a class="markdownIt-Anchor" href="#对象的内存布局"></a> 对象的内存布局</h3>
<p>在HotSpot虚拟机中，对象在内存中存储的布局可分为三块：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）；</p>
<h4 id="对象头"><a class="markdownIt-Anchor" href="#对象头"></a> 对象头</h4>
<p>包括2部分；</p>
<ol>
<li>
<p>Mark Word</p>
<p>用于存储对象自身的运行时数据，如哈希码等；数据长度与虚拟机位数一致（32位的虚拟机就是32位长）；</p>
<p>对象需要存储的运行时数据很多，其实已经超出了32或64位，但对象头信息 本身是与对象自身定义的数据无关的一个额外存储，所以该部分被设计为非固定数据结构的会根据对象状态复用自身的存储空间，其实就是根据对象的状态存储不同的内容；</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>标志位</th>
<th>状态</th>
<th>存储内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td>未锁定</td>
<td>哈希码，分代年龄</td>
</tr>
<tr>
<td>00</td>
<td>轻量级锁定</td>
<td>指向所记录的指针</td>
</tr>
<tr>
<td>10</td>
<td>膨胀（重量级锁定）</td>
<td>指向重量级锁的指针</td>
</tr>
<tr>
<td>11</td>
<td>GC标记</td>
<td>空，不需要记录信息</td>
</tr>
<tr>
<td>01</td>
<td>可偏向</td>
<td>偏向线程ID，偏向时间戳，分代年龄</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>
<p>类型指针</p>
<p>即对象指向它的类元数据的指针，虚拟机通过该指针来确定这个对象所属的类。</p>
<p>并不是所有的虚拟机实现都必须在对象数据上保留该指针，也就是说参照对象的元数据信息并不一定要经过对象本身；</p>
<p>如果对象是数组，那在对象头中还必须有一块用于记录数组长度的数据；</p>
</li>
</ol>
<h4 id="实例数据"><a class="markdownIt-Anchor" href="#实例数据"></a> 实例数据</h4>
<p>对象真正存储的有效信息，即代码中所定义的字段值，包括从父类继承的。</p>
<p>其存储顺序受到虚拟机分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义顺序的影响；HotSpot的默认策略是longs/doubles, ints, short/char,byte/boolean, oop(Ordinary Obejct Pointer)。即相同宽度的字段分配到一起。</p>
<h4 id="对齐填充"><a class="markdownIt-Anchor" href="#对齐填充"></a> 对齐填充</h4>
<p>当实例数据部分没有对齐时，需要补齐，因为要去对象起始地址必须是8字节的整数倍数。</p>
]]></content>
      <categories>
        <category>language</category>
        <category>java-understanding-the-jvm</category>
      </categories>
  </entry>
  <entry>
    <title>目录</title>
    <url>//posts/20210415-cfc657db.html</url>
    <content><![CDATA[<!-- toc -->]]></content>
      <categories>
        <category>language</category>
        <category>java-understanding-the-jvm</category>
      </categories>
  </entry>
  <entry>
    <title>3-垃圾收集器与内存分配策略</title>
    <url>//posts/20210419-91c5455b.html</url>
    <content><![CDATA[<h2 id="对象状态判断"><a class="markdownIt-Anchor" href="#对象状态判断"></a> 对象状态判断</h2>
<h3 id="对象状态判断-2"><a class="markdownIt-Anchor" href="#对象状态判断-2"></a> 对象状态判断</h3>
<h4 id="引用计数算法"><a class="markdownIt-Anchor" href="#引用计数算法"></a> 引用计数算法</h4>
<ul>
<li>
<p>给对象添加一个引用极计数器，每引用一次+1，引用失效-1，当值为0时，表示对象不再被应引用；</p>
</li>
<li>
<p>但对于互相引用的对象无效；</p>
</li>
</ul>
<h4 id="可达性分析算法"><a class="markdownIt-Anchor" href="#可达性分析算法"></a> 可达性分析算法</h4>
<p>通过一系列的称为“GC Roots”的对象作为起点，从这些起点开始向下搜索，所走过的路径称为“引用链”，当一个对象到GC Roots没有引用链时，表示对象不用；</p>
<p>可作为GC Roots的对象：</p>
<pre><code>* 虚拟机栈（栈帧中的局部变量表）中引用的对象；
* 方法区中类静态属性引用的对象；
* 方法区中常量引用的对象
* 本地方法栈中JNI（即一般的Native方法）引用的对象；
</code></pre>
<h4 id="再谈引用"><a class="markdownIt-Anchor" href="#再谈引用"></a> 再谈引用</h4>
<p>对象除了“被引用”和“未被引用”两种状态外，还应该有第三种状态：缓存状态，即当内存空间足够时，保留在内存中，否则抛弃；因此引用可分为4中，分别是：</p>
<ol>
<li>
<p>强引用</p>
<p>类似new操作的引用，只要存在，该对象不会被回收；</p>
</li>
<li>
<p>软引用</p>
<p>描述一些还有用但并非必需的对象。在系统要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收；如果还没有足够内存则抛出异常；</p>
</li>
<li>
<p>弱引用</p>
<p>强度比软引用更弱；</p>
<p>当发生垃圾回收时，会回收这些对象；</p>
</li>
<li>
<p>虚引用</p>
<p>最弱引用；一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得对象实例。该引用的唯一目的就是能在这个对象呗收集器回收时收到一个系统通知；</p>
</li>
</ol>
<h4 id="生存还是死亡"><a class="markdownIt-Anchor" href="#生存还是死亡"></a> 生存还是死亡</h4>
<ol>
<li>
<p>当通过可达性分析算法发现对象无引用链时，将进行第一次标记，此时还没有真正的回收；</p>
</li>
<li>
<p>标记之后进行一次筛选，条件是对象是否有必要执行finalize()方法，当该对象没有覆盖finalze(0方法或finalize()方法已经调用过时，称之为“没有必要执行”；</p>
</li>
<li>
<p>有必要执行时</p>
<p>将对象放置在一个叫做F-Queue的队列中，并在稍后由JVM自动创建的、低优先级的Finalizer线程去执行它，但不保证会等待它允许结束；原因是当对象的finalze()方法执行缓慢或异常时会导致F-Queue其他对象永久处于等待甚至整个内存回收系统崩溃；</p>
<p>稍后GC Root会对F-Queue中的对象进行第二次小规模的标记，如果没有重新引用；</p>
</li>
<li>
<p>将对象放入“即将回收”集合，等待回收；</p>
</li>
</ol>
<h4 id="回收方法区"><a class="markdownIt-Anchor" href="#回收方法区"></a> 回收方法区</h4>
<p>方法区一般不要求实现垃圾回收，如果实现，主要回收两部分：</p>
<ol>
<li>
<p>废弃常量</p>
<p>没有引用时，回收；常量池中的其他类（接口）、方法、字段的符号引用也类似；</p>
</li>
<li>
<p>无用的类</p>
<p>满足无用类的条件是</p>
<ol>
<li>该类所有的实例都已经被回收，即Java堆中没有该类的实例；</li>
<li>加载该列的ClassLoader已经被回收；</li>
<li>该类对应的java.lang.Class读写没有在任何地方被引用，无法在任何地方通过放射访问该类的方法；</li>
</ol>
<p>是否对类回收，JVM提供了参数进行配置；</p>
</li>
</ol>
<h2 id="垃圾回收算法"><a class="markdownIt-Anchor" href="#垃圾回收算法"></a> 垃圾回收算法</h2>
<h2 id="hotspot算法实现"><a class="markdownIt-Anchor" href="#hotspot算法实现"></a> HotSpot算法实现</h2>
<h2 id="垃圾回收器"><a class="markdownIt-Anchor" href="#垃圾回收器"></a> 垃圾回收器</h2>
]]></content>
      <categories>
        <category>language</category>
        <category>java-understanding-the-jvm</category>
      </categories>
  </entry>
  <entry>
    <title>协程</title>
    <url>//posts/20210415-bb1e53b0.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/e231d3b01e3d4c7e8afdc1f97c04ab16.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>c扩展-动态链接库</title>
    <url>//posts/20210514-1208ffaf.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="c程序"><a class="markdownIt-Anchor" href="#c程序"></a> c程序</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func_add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = func_add(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编译成动态链接库（即.so文件）</span></span><br><span class="line">gcc -fPIC -shared cmain.c -o clib.so</span><br></pre></td></tr></table></figure>
<h2 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes   <span class="comment"># 加载c动态链接库</span></span><br><span class="line">cfunc = ctypes.CDLL(<span class="string">&quot;./clib.so&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(cfunc.func_add(<span class="number">10</span>,<span class="number">11</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>深入python</title>
    <url>//posts/20210415-a00641a8.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/b5f0887c4dfc4e68bf9721bbddefa6e9.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>流畅的python</title>
    <url>//posts/20210604-3553bd31.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h2 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/c61c1d8e5e4d4f9eb3360b3c57195018.pdf">PDF</a></h2>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>描述符</title>
    <url>//posts/20210507-bf389a0f.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="官方文档"><a class="markdownIt-Anchor" href="#官方文档"></a> <a href="https://docs.python.org/3.8/howto/descriptor.html">官方文档</a></h2>
<h2 id="定义和介绍"><a class="markdownIt-Anchor" href="#定义和介绍"></a> 定义和介绍</h2>
<p>描述符（descriptor）是一个“绑定行为”的对象的属性；</p>
<blockquote>
<p>绑定行为，即绑定了方法</p>
</blockquote>
<p>“绑定行为”指的是绑定以下三个方法：</p>
<ol>
<li><code>__get__()</code></li>
<li><code>__set__()</code></li>
<li><code>__delete__()</code></li>
</ol>
<p>如果一个对象定义了以上三个方法中的任意一个，那么该对象就是一个描述符；</p>
<h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2>
<p>方法、类方法、静态方法以及property等都用到了</p>
<h2 id="描述符协议"><a class="markdownIt-Anchor" href="#描述符协议"></a> 描述符协议</h2>
<blockquote>
<p>描述符协议，即绑定的三个方法</p>
</blockquote>
<ul>
<li>数据描述符：只定义了<code>__get__</code>方法</li>
<li>非数据描述符：定义了<code>__set__</code>或<code>__delete__</code>方法</li>
</ul>
<blockquote>
<p>数据描述符和非数据描述符的区别主要在与如何根据实例字典中的条目计算重,，即当实例的<code>__dict__</code>中有一个条目与描述符相同时，</p>
<blockquote>
<p>若该描述符为数据描述符，访问该属性时，数据描述符优先；<br />
若该描述符为非数据描述符，访问该属性时，实例<code>__dict__</code>优先；</p>
</blockquote>
</blockquote>
<ul>
<li>将属性设置为只读模式：设置<code>__set__</code>抛出<code>AttributeError</code></li>
</ul>
<h3 id="__get__self-obj-typenone-value"><a class="markdownIt-Anchor" href="#__get__self-obj-typenone-value"></a> <code>__get__(self, obj, type=None) -&gt; value</code></h3>
<h3 id="__set__self-obj-value-none"><a class="markdownIt-Anchor" href="#__set__self-obj-value-none"></a> <code>__set__(self, obj, value) -&gt; None</code></h3>
<h3 id="__delete__self-obj-none"><a class="markdownIt-Anchor" href="#__delete__self-obj-none"></a> <code>__delete__(self, obj) -&gt; None</code></h3>
<h2 id="调用描述符"><a class="markdownIt-Anchor" href="#调用描述符"></a> 调用描述符</h2>
<h3 id="通过名称直接调用"><a class="markdownIt-Anchor" href="#通过名称直接调用"></a> 通过名称直接调用</h3>
<p><code>d.__get__(obj)</code></p>
<h3 id="通过属性调用"><a class="markdownIt-Anchor" href="#通过属性调用"></a> 通过属性调用</h3>
<p>这时调用细节取决于调用者（即obj）是一个对象还是一个类<br />
比如<code>b=B()</code></p>
<h4 id="对象调用"><a class="markdownIt-Anchor" href="#对象调用"></a> 对象调用</h4>
<p>即实例</p>
<blockquote>
<p>请参考<a href="https://app.yinxiang.com/shard/s13/nl/3147905/0e097b61-75b7-4c6d-8049-bac37d7b2ad5/">python 类 对象属性访问顺序</a><br />
实现机制在<code>object.__getattribute__()</code>中通过<code>type(b).__dict__['x'].__get__(b, type(b))</code>来实现；</p>
</blockquote>
<h4 id="类调用"><a class="markdownIt-Anchor" href="#类调用"></a> 类调用</h4>
<p>即是class类<br />
实现机制在<code>type.__getattribute__()</code>中通过<code>B.__dict__['x'].__get__(None, B)</code>来实现；</p>
<h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>functools模块魔术方法</title>
    <url>//posts/20210508-a74250d5.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="partial"><a class="markdownIt-Anchor" href="#partial"></a> partial</h2>
<p>就是把某个函数的某个参数固定，从而创建出一个新的函数；</p>
<ol>
<li>示例：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x:<span class="built_in">int</span>, y:<span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="comment"># 这里创造了一个新的函数add2，只接受一个整型参数，然后将这个参数统一加上2</span></span><br><span class="line">add2 = partial(add, y=<span class="number">2</span>)</span><br><span class="line">add2(<span class="number">3</span>) <span class="comment"># 这里将会输出5</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partial</span>(<span class="params">func, *args, **keywords</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span>(<span class="params">*fargs, **fkeywords</span>):</span></span><br><span class="line">        newkeywords = keywords.copy()</span><br><span class="line">        newkeywords.update(fkeywords)</span><br><span class="line">        <span class="keyword">return</span> func(*args, *fargs, **newkeywords)</span><br><span class="line">    newfunc.func = func</span><br><span class="line">    newfunc.args = args</span><br><span class="line">    newfunc.keywords = keywords</span><br><span class="line">    <span class="keyword">return</span> newfunc</span><br></pre></td></tr></table></figure>
<h2 id="update_wrapper"><a class="markdownIt-Anchor" href="#update_wrapper"></a> update_wrapper</h2>
<p>从 被修饰的函数(wrapped) 中取出一些属性值来，赋值给 修饰器函数(wrapper)</p>
<ol>
<li>源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WRAPPER_ASSIGNMENTS = (<span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>,<span class="string">&#x27;__annotations__&#x27;</span>)</span><br><span class="line">WRAPPER_UPDATES = (<span class="string">&#x27;__dict__&#x27;</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span>(<span class="params">wrapper,</span></span></span><br><span class="line"><span class="params"><span class="function">                   wrapped,</span></span></span><br><span class="line"><span class="params"><span class="function">                   assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="params"><span class="function">                   updated = WRAPPER_UPDATES</span>):</span></span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            value = <span class="built_in">getattr</span>(wrapped, attr)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(wrapper, attr, value)</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> updated:</span><br><span class="line">        <span class="built_in">getattr</span>(wrapper, attr).update(<span class="built_in">getattr</span>(wrapped, attr, &#123;&#125;))</span><br><span class="line">    wrapper.__wrapped__ = wrapped</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义装饰器1</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line">  </span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是修饰函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapper_function`</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>自定义装饰器2</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> update_wrapper</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    update_wrapper(wrapper_function, f)  <span class="comment"># &lt;&lt;  添加了这条语句</span></span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line">  </span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是被修饰的函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapped`</span></span><br></pre></td></tr></table></figure>
<h2 id="wraps"><a class="markdownIt-Anchor" href="#wraps"></a> wraps</h2>
<p>一个修饰器版的update_wrapper函数，它的功能和update_wrapper是一模一样的;</p>
<ol>
<li>源码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WRAPPER_ASSIGNMENTS = (<span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>,<span class="string">&#x27;__annotations__&#x27;</span>)</span><br><span class="line">WRAPPER_UPDATES = (<span class="string">&#x27;__dict__&#x27;</span>,)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wraps</span>(<span class="params">wrapped,</span></span></span><br><span class="line"><span class="params"><span class="function">          assigned = WRAPPER_ASSIGNMENTS,</span></span></span><br><span class="line"><span class="params"><span class="function">          updated = WRAPPER_UPDATES</span>):</span></span><br><span class="line">    <span class="keyword">return</span> partial(update_wrapper, wrapped=wrapped,</span><br><span class="line">                   assigned=assigned, updated=updated)</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>自定义装饰器3</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">f</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;这个是修饰函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper_function</span><br><span class="line">  </span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapped</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这个是被修饰的函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wrapped&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(wrapped.__doc__)  <span class="comment"># 输出`这个是被修饰的函数`</span></span><br><span class="line"><span class="built_in">print</span>(wrapped.__name__)  <span class="comment"># 输出`wrapped</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>深入GIL</title>
    <url>//posts/20210415-9b2a4933.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="insidegil-pdf"><a class="markdownIt-Anchor" href="#insidegil-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/f69ac2b491ee4ef3aa678f6727761739.pdf">insideGIL PDF</a></h1>
<h1 id="insidenewgil-pdf"><a class="markdownIt-Anchor" href="#insidenewgil-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/4feb814c00e34fd984a4e1a31789426d.pdf">insideNewGIL PDF</a></h1>
<h1 id="understandinggil-pdf"><a class="markdownIt-Anchor" href="#understandinggil-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/ef64ad7426194d439406f847dc8008eb.pdf">understandingGIL PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>python安装</title>
    <url>//posts/20211108-b66de3f6.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="openssl问题"><a class="markdownIt-Anchor" href="#openssl问题"></a> openssl问题</h2>
<p>Q：安装python3.10后，使用pip提示没有ssl模块</p>
<ol>
<li>
<p>安装openssl，至少是v1.1.0以上版本</p>
</li>
<li>
<pre class="highlight"><code class="shell">mv /usr/bin/openssl /usr/bin/openssl-bak
mv /usr/inclue/openssl /usr/include/openssl-bak

cd $openssl_install_dir
ln -s include/openssl /usr/include/openssl
ln -s lib/libssl.so.1.1 /usr/local/lib64/libssl.so # 这个没有验证
ln -s bin/openssl /usr/bin/openssl
<span class="hljs-meta">
#</span><span class="bash"> 写入openssl库文件的搜索路径</span>
echo "$openssl_insall_dir/lib" &gt;&gt; /etc/ld.so.conf
<span class="hljs-meta">
#</span><span class="bash"> 生效/etc/ld.so.conf</span>
ldconfig -v
<span class="hljs-meta">
#</span><span class="bash"> 验证</span>
openssl version
</code></pre>
</li>
<li>
<p>python编译增加’–with-openssl={openssl目录}’</p>
</li>
</ol>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>transaction介绍</title>
    <url>//posts/20210415-72c6821f.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/93a95d6dd786459abc91aa72d19e5f5a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>python源码剖析</title>
    <url>//posts/20210415-d2671606.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/71055d68c6424fef955b463c9c4e2c84.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>类介绍</title>
    <url>//posts/20210507-687f2a8f.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="类"><a class="markdownIt-Anchor" href="#类"></a> 类</h2>
<table>
<thead>
<tr>
<th></th>
<th>经典类</th>
<th>新式类</th>
</tr>
</thead>
<tbody>
<tr>
<td>python2</td>
<td>默认</td>
<td>需要显式继承object</td>
</tr>
<tr>
<td>python3</td>
<td>不支持</td>
<td>默认</td>
</tr>
<tr>
<td><code>__new__</code></td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td><code>type()</code></td>
<td><code>&lt;type 'instance'&gt;</code></td>
<td>class类</td>
</tr>
<tr>
<td><code>__class__</code></td>
<td>class类</td>
<td>class类</td>
</tr>
<tr>
<td><code>__slots__</code></td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td><code>__getattribute__</code></td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>相同父类构造函数</td>
<td>重复执行多次</td>
<td>只执行一次</td>
</tr>
<tr>
<td>基类搜索顺序</td>
<td>深度优先</td>
<td>广度优先</td>
</tr>
</tbody>
</table>
<h2 id="类方法"><a class="markdownIt-Anchor" href="#类方法"></a> 类方法</h2>
<p><strong>一个类在使用时，需要先实例化，再初始化</strong></p>
<h3 id="__new__"><a class="markdownIt-Anchor" href="#__new__"></a> <code>__new__</code></h3>
<p>该方法是一个实例化方法（静态方法，因为所有新式类都继承object类，而object类中该方法设置为静态方法）<br />
一个对象实例化时调用的第一个方法；</p>
<ul>
<li>
<p>返回创建的实例</p>
</li>
<li>
<p>当有父类时先执行父类的<code>new</code></p>
</li>
<li>
<p>不常用，但当继承一个不可改变的类型比如tuple 或 string时，一般返回实例化对象，最后会调用<code>__init__</code>,除非重写</p>
</li>
<li>
<p><strong><code>如果返回的不是该类的实例化对象，则不执行__init__方法</code></strong></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>
<h3 id="__init__"><a class="markdownIt-Anchor" href="#__init__"></a> <code>__init__</code></h3>
<p>初始化方法，构造函数被调用时任何参数都传递给他；</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __init__(self, *args, **kwargs):pass</code></p>
<h3 id="__call__"><a class="markdownIt-Anchor" href="#__call__"></a> <code>__call__</code></h3>
<p>让类的实例对象可以象函数一样调用</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __call__(self, *args, **kwargs):pass</code></p>
<h3 id="__del__"><a class="markdownIt-Anchor" href="#__del__"></a> <code>__del__</code></h3>
<p>相当于析构函数<br />
当一个对象在删除的时候进行清理工作，但当解释器退出时，如对象还在，不保证执行</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __del__(self):pass</code></p>
<h3 id="__repr__"><a class="markdownIt-Anchor" href="#__repr__"></a> <code>__repr__</code></h3>
<p>当对象要输出时，用来整理其属性及方法为可输出的格式</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __repr__(self):pass</code></p>
<h3 id="__str__"><a class="markdownIt-Anchor" href="#__str__"></a> <code>__str__</code></h3>
<p>可读性更好的obj==eval(repr(obj))的</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __str__(self):pass</code></p>
<h3 id="__dict__"><a class="markdownIt-Anchor" href="#__dict__"></a> <s><code>__dict__</code></s></h3>
<p>好像是python3之后就没了</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __dict__(self):pass</code></p>
<h3 id="__setattr__"><a class="markdownIt-Anchor" href="#__setattr__"></a> <code>__setattr__</code></h3>
<p>添加属性，并赋值</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __setattr__(self, key, value):pass</code></p>
<h3 id="__super__"><a class="markdownIt-Anchor" href="#__super__"></a> <code>__super__</code></h3>
<p><code>super(B, self)</code>首先找到B的父类A,然后把B的对象self转换为A的对象（通过某种方式），然后“被转换”的A对象调用自己的__init__；</p>
<blockquote>
<p><em>无返回值</em><br />
<code>def __super__(self):pass</code></p>
</blockquote>
<h3 id="__getattr__"><a class="markdownIt-Anchor" href="#__getattr__"></a> <code>__getattr__</code></h3>
<p>只有当__getattribute__抛出AttributeError时才调用</p>
<blockquote>
<p><em>无返回值</em></p>
</blockquote>
<p><code>def __setattr__(self, name):pass</code></p>
<h3 id="__getattribute__"><a class="markdownIt-Anchor" href="#__getattribute__"></a> <code>__getattribute__</code></h3>
<p><strong>这个方法很重要，会用于属性访问、super、类继承等</strong></p>
<p>访问某个属性时，无条件默认调用，找不到时会抛出AttributeError提示找不到这个属性；</p>
<blockquote>
<p>为了避免无限递归，应该把获取属性的方法指向其父类，即<code>super().__getattribute__(self, name)</code></p>
</blockquote>
<p><code>def __getattribute__(self, name):pass</code></p>
<h2 id="类属性"><a class="markdownIt-Anchor" href="#类属性"></a> 类属性</h2>
<p><strong>不论所属类是否实例化都会执行，使用时作为类的静态变量</strong></p>
<h3 id="__slots__"><a class="markdownIt-Anchor" href="#__slots__"></a> <code>__slots__</code></h3>
<p>用于限定属性，即外部能访问的属性<br />
<code>__slots__ = ['var', ...]</code></p>
<h3 id="__doc__"><a class="markdownIt-Anchor" href="#__doc__"></a> <code>__doc__</code></h3>
<p>帮助信息</p>
<h3 id="__name__"><a class="markdownIt-Anchor" href="#__name__"></a> <code>__name__</code></h3>
<p>类型名称</p>
<h3 id="__module__"><a class="markdownIt-Anchor" href="#__module__"></a> <code>__module__</code></h3>
<p>所在模块</p>
<h3 id="__class__"><a class="markdownIt-Anchor" href="#__class__"></a> <code>__class__</code></h3>
<p>类型</p>
<h3 id="__bases__"><a class="markdownIt-Anchor" href="#__bases__"></a> <code>__bases__</code></h3>
<p>所继承的基类</p>
<h3 id="__dict__-2"><a class="markdownIt-Anchor" href="#__dict__-2"></a> <code>__dict__</code></h3>
<p>存储所有类型成员<br />
key是属性名，value为属性值</p>
<blockquote>
<p>实例的__dict__只存储与该实例相关的实例属性，即实例属性<br />
类的__dict__存储所有实例变量共享的变量和函数，并不包含父类的属性<br />
类的__dict__是一个只读，对象的__dict__是一个一般的；</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">C</span>():</span></span><br><span class="line">    cls_name = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">c = C(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.__dict__)</span><br><span class="line"><span class="built_in">print</span>(C.__dict__)</span><br><span class="line"><span class="string">&quot;&quot;&quot;输出</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;c&#x27;&#125;</span></span><br><span class="line"><span class="string">&#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;cls_name&#x27;: &#x27;123&#x27;, &#x27;__init__&#x27;: &lt;function C.__init__ at 0x10e1ba950&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;C&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;C&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="对象属性访问顺序"><a class="markdownIt-Anchor" href="#对象属性访问顺序"></a> 对象属性访问顺序</h2>
<blockquote>
<p>通过<code>__getattribute__</code>访问</p>
</blockquote>
<ol>
<li>实例属性</li>
<li>类属性</li>
<li>父类属性</li>
<li><code>__getattr__()</code></li>
</ol>
<p>在每个层级访问时数据描述符优先于dict，而dict查找优先于非数据描述符；<br />
这里请参考<a href="https://app.yinxiang.com/shard/s13/nl/3147905/078df602-8bb3-4977-8f56-12e4a2113a2a/">python 描述符</a></p>
<h2 id="私有变量"><a class="markdownIt-Anchor" href="#私有变量"></a> 私有变量</h2>
<ul>
<li>
<p>以两个或以上下划线字符开头<strong>且没有以两个或以上下划线结尾</strong>的变量当作私有变量</p>
</li>
<li>
<p>私有变量会在代码生成之前被转换为长格式（变为公有），转换机制为：</p>
</li>
</ul>
<blockquote>
<p>在变量前端插入类名，再在前端加入一个下划线字符。这就是所谓的私有变量轧压（Private name mangling）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._age = <span class="number">1</span></span><br><span class="line">        self.__age = <span class="number">2</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self._age)</span><br><span class="line">        <span class="built_in">print</span>(self.__age)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;_name&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__name&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = Person()</span><br><span class="line">p._name()</span><br><span class="line">p.age()</span><br><span class="line"><span class="built_in">print</span>(p.__dict__)</span><br><span class="line"><span class="comment"># p.__name()    # AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__name&#x27;</span></span><br><span class="line"><span class="comment"># print(p.__age)  # AttributeError: &#x27;Person&#x27; object has no attribute &#x27;__age&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;Out</span></span><br><span class="line"><span class="string">_name</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">&#123;&#x27;_age&#x27;: 1, &#x27;_Person__age&#x27;: 2&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>2和3的不同</title>
    <url>//posts/20210514-42179e63.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h2>
<h3 id="print"><a class="markdownIt-Anchor" href="#print"></a> print</h3>
<ul>
<li>python2中，print被视为一个语句而不是一个函数，</li>
<li>python3中，print()被视为一个函数</li>
</ul>
<h3 id="整数除法"><a class="markdownIt-Anchor" href="#整数除法"></a> 整数除法</h3>
<ul>
<li>python2中，键入的任何不带小数的数字，将被视为整数的编程类型。比如5/2=2，解决方法：5.0/2.0=2.5</li>
<li>python3中，整数除法变得更直观 5/2=2.5</li>
</ul>
<h3 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h3>
<ul>
<li>2，默认ascii</li>
<li>3，默认unicode</li>
</ul>
<h3 id="int和long"><a class="markdownIt-Anchor" href="#int和long"></a> int和long</h3>
<ul>
<li>
<p>int(符号整数):通常被称为是整数或整数,没有小数点的正或负整数；</p>
</li>
<li>
<p>long(长整数):无限大小的整数,这样写整数和一个大写或小写的L</p>
</li>
</ul>
<h3 id="range和xrange"><a class="markdownIt-Anchor" href="#range和xrange"></a> range和xrange</h3>
<ul>
<li>2，range返回列表，xrange返回生成器</li>
<li>3，range返回生成器，无xrange</li>
</ul>
<h3 id="xreadlines-和readline"><a class="markdownIt-Anchor" href="#xreadlines-和readline"></a> xreadlines 和readline</h3>
<ul>
<li>xreadlines，返回生成器</li>
<li>readlines，返回读取的内容</li>
</ul>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>try异常捕获流程</title>
    <url>//posts/20210508-8216dc12.html</url>
    <content><![CDATA[<!-- toc -->
<p>[TOC]</p>
<h2 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h2>
<p>执行<code>try</code>或者<code>except</code>中的<code>return</code>语句之前，先将返回值保存起来，然后执行<code>finally</code>语句（如果<code>finally</code>存在）；</p>
<p>如果<code>finally</code>中有<code>return</code>语句，那么程序就<code>return</code>了，不会再<code>return</code> <code>try</code>或<code>except</code>中值，所以<code>finally</code>中最好不要包含<code>return</code></p>
<h3 id="finally-中有return时"><a class="markdownIt-Anchor" href="#finally-中有return时"></a> finally 中有return时</h3>
<p>函数返回值该<code>return</code>，且其返回值是变量<strong>执行的最后值</strong>;</p>
<h3 id="finally-中没有return-时"><a class="markdownIt-Anchor" href="#finally-中没有return-时"></a> finally 中没有return 时</h3>
<p>不论对错，执行按顺序执行遇到的最后的return，可以理解为将返回值保存起来，然后执行finally；</p>
<h3 id="有finally并且finally中有return语句且except中有raise"><a class="markdownIt-Anchor" href="#有finally并且finally中有return语句且except中有raise"></a> 有finally，并且finally中有return语句，且except中有raise</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment">#捕获异常并执行直到遇到raise或finally中的return</span></span><br><span class="line">        <span class="keyword">raise</span> e <span class="comment">#该句及其以后的except的的语句不会被执行</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="try性能"><a class="markdownIt-Anchor" href="#try性能"></a> try性能</h2>
<p>会损耗时间和性能;</p>
<h2 id="except捕捉异常类型"><a class="markdownIt-Anchor" href="#except捕捉异常类型"></a> except捕捉异常类型</h2>
<p>只能捕捉以 Exception 为基类的类；以Error为基类的不能；</p>
<h2 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;try&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        res = <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;except&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#当且仅当 try 不出错并且没有return时，才会执行</span></span><br><span class="line">        res = <span class="number">3</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;else&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        res = <span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">        <span class="comment">#return res</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>理解mataclass</title>
    <url>//posts/20210507-301efb7d.html</url>
    <content><![CDATA[<!-- toc -->
<p><strong><code>__metaclass__</code>很神奇、很魔术，但不要为了用而用</strong></p>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>css设计指南</title>
    <url>//posts/20210415-3c1222c8.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/5459c40f122543b386f3215d60d8b4ab.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>笔试题</title>
    <url>//posts/20210629-1813f66c.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="python基础"><a class="markdownIt-Anchor" href="#python基础"></a> python基础</h2>
<h3 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h3>
<ul>
<li>
<p><code>a=(1)</code>, <code>int</code></p>
</li>
<li>
<p><code>b=(1,)</code>,<code>str</code></p>
</li>
<li>
<p><code>c=(&quot;1&quot;)</code>,<code>tuple</code></p>
</li>
<li>
<p>列表推导式转生成器,<code>[i for i in [1,2]]</code>变更为<code>(i, for i in [1,2])</code></p>
</li>
</ul>
<h3 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h3>
<ol>
<li>set是一个无序、不重复元素序列；</li>
<li>创建一个空集合必须是<code>set()</code>，因为<code>&#123;&#125;</code>是一个字典；</li>
<li>不可索引、不可切片、不可修改元素；</li>
<li>可遍历</li>
<li>与<strong>字典</strong>一样，即使用hash，不可放入可变对象，因为是使用hash计算存储，无法判断两个可变对象是否相等；</li>
<li>元素必须是可哈希的，即不可变对象；</li>
<li><code>set()</code>参数为字符串时，默认变更为集合；</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = <span class="built_in">set</span>()</span><br><span class="line">s2 = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#交</span></span><br><span class="line">s3 = s1 &amp; s2</span><br><span class="line"><span class="comment">#并</span></span><br><span class="line">s3 = s1 | s2</span><br><span class="line">s3 = s1.union(s2)</span><br><span class="line"><span class="comment">#差</span></span><br><span class="line">s3 = s1.difference(s2)</span><br><span class="line">s3.add(<span class="number">1</span>)</span><br><span class="line">s3.pop()</span><br><span class="line">s3.clear()</span><br><span class="line">s3.remove(<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3>
<ul>
<li><code>extend()</code>两个列表合并，<strong>无返回值</strong></li>
<li>多列表合并</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]], [])</span><br><span class="line"><span class="comment"># [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>打乱列表元素,<code>random.shuffle(list)</code></li>
<li>通过切片获取列表可以超出长度，但通过索引获取元素不可以超过长度</li>
<li><code>避免索引错误</code>
<ul>
<li><code>当s=''时，s[0]和s[-1]会报IndexError: string index out of range，但是s[:1]）和s[-1:]不会。</code></li>
</ul>
</li>
</ul>
<h3 id="元祖"><a class="markdownIt-Anchor" href="#元祖"></a> 元祖</h3>
<p>不可变数据类型，不是真的不可变，是元素的地址不可变，比如如果元素是list，可以进行list的变更</p>
<h3 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h3>
<ul>
<li>sort，会改变原对象，但会<code>None</code></li>
<li>sorted，不改变原有对象，返回排序好的</li>
</ul>
<blockquote>
<p>其中key参数可以返回元祖，元祖的元素个数基本代表排序次数，默认小到大</p>
<p>key的元素或值：</p>
<p>​	True表示大值（要放后面），</p>
<p>​	False表示小值（要放前面）,</p>
<p>​	其他可排序的比如数字、字母就按照指定顺序排序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h3>
<ul>
<li>空间换时间，本质是数组，根据hash和偏移来存储和查询吗，当达到数2/3（不确定）时，会扩容</li>
<li>查询快</li>
<li>自定义key对象需要支持以下：
<ul>
<li>支持<code>hash()</code>函数</li>
<li>支持通过``方法检测相等</li>
<li>若值相等，则<code>hash()</code>也相等；</li>
</ul>
</li>
</ul>
<h3 id="什么样的语言能够用装饰器"><a class="markdownIt-Anchor" href="#什么样的语言能够用装饰器"></a> 什么样的语言能够用装饰器</h3>
<p>函数可以作为参数传递的语言；</p>
<h3 id="2和3的区别"><a class="markdownIt-Anchor" href="#2和3的区别"></a> 2和3的区别</h3>
<ol>
<li>python3的<code>print()</code>是内置函数，pyhton</li>
</ol>
<table>
<thead>
<tr>
<th>列项</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>print</td>
<td>语法结构</td>
<td>内置函数</td>
</tr>
<tr>
<td>range()返回值</td>
<td>列表</td>
<td>迭代器</td>
</tr>
<tr>
<td>默认编码</td>
<td>ascii</td>
<td>utf-8</td>
</tr>
<tr>
<td>字符串序列</td>
<td>unicode</td>
<td>str</td>
</tr>
<tr>
<td>字节序列</td>
<td>str</td>
<td>byte</td>
</tr>
<tr>
<td>int</td>
<td>长度取决于系统位数</td>
<td>长整型</td>
</tr>
<tr>
<td>long</td>
<td>不受限制</td>
<td>没有，只有无限长度的长整型</td>
</tr>
<tr>
<td>类继承即<code>__mro__</code>顺序</td>
<td>深度优先</td>
<td>广度优先</td>
</tr>
</tbody>
</table>
<h3 id="正则"><a class="markdownIt-Anchor" href="#正则"></a> 正则</h3>
<ol>
<li><code>re.compile()</code>作用，编译成一个对象，加快速度，重复利用；</li>
<li><code>(.*)</code> 贪婪匹配，尽可能多的匹配；<code>(.*?)</code>非贪婪匹配，尽可能少的匹配；</li>
</ol>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<ul>
<li><code>x.join()</code>，参数是可迭代对象，<code>x</code>插入可迭代对象中间，形成字符串；</li>
<li><code>zip()</code>，
<ul>
<li>以一个或多个序列（可迭代对象）做为参数，返回一个元组的列表。同时将这些序列中并排的元素配对。</li>
<li>参数可以接受任何类型的序列，同时也可以有两个以上的参数;当传入参数的长度不同时，zip能自动以最短序列长度为准进行截取，获得元组。</li>
</ul>
</li>
<li><code>sort</code>和<code>sorted</code>
<ul>
<li><code>sort</code>，属于列表成员方法；无返回值，会更改列表</li>
<li>sorted，可以对可迭代对象进行排序，返回新的有序列表</li>
</ul>
</li>
</ul>
<h3 id="传参"><a class="markdownIt-Anchor" href="#传参"></a> 传参</h3>
<p>可以理解为引用传递；</p>
<p>​	不可变类型因为不可变所以互不影响；</p>
<p>​	可变需要注意；</p>
<h3 id="编解码"><a class="markdownIt-Anchor" href="#编解码"></a> 编解码</h3>
<p>字符串在python中是<code>unicode</code>编码，编码转换时是以<code>unicode</code>作为中间编码</p>
<ul>
<li><code>encode</code>，将<code>unicode</code>编码转换成其他编码的字符串</li>
<li><code>decode</code>，将其他编码的字符串转换成<code>unicode</code>编码</li>
</ul>
<h3 id="字符串比较"><a class="markdownIt-Anchor" href="#字符串比较"></a> 字符串比较</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;456&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a和b为不可变类型，所以指向相同地址；</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>is</code>指地址相同</li>
<li><code>==</code>指值相同</li>
<li>字符串相加还是字符串</li>
<li>字符串不能与数字相加</li>
</ul>
<h3 id="legb"><a class="markdownIt-Anchor" href="#legb"></a> LEGB</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a</span>):</span></span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">add(x)</span><br></pre></td></tr></table></figure>
<p>会报错，因为LEGB规定了查找一个名称的顺序为</p>
<ul>
<li>L：local，即函数内部命名空间</li>
<li>E：encloseing function locals，外部嵌套函数的空间</li>
<li>G：global（module），模块空间</li>
<li>B：builtin，内置模块空间</li>
</ul>
<blockquote>
<p>如果不修改x，只去访问x，是合法的</p>
</blockquote>
<h3 id="类实例关系"><a class="markdownIt-Anchor" href="#类实例关系"></a> 类实例关系</h3>
<ul>
<li><code>isinstance(object, classinfo)</code>,用于判断object是否是classinfo的一个实例，或者object是否是classinfo类的子类的一个实例，如果是返回True.</li>
<li><code>issubclass(class, class)</code>,用于判断class是否是classinfo类的子类，如果是返回True.</li>
</ul>
<h3 id="__name__"><a class="markdownIt-Anchor" href="#__name__"></a> <code>__name__</code></h3>
<ol>
<li>定义在一个模块中，执行这个py文件时，值是<code>__main__</code></li>
<li>该模块被其他模块<code>import</code>时，其值是运行的py文件的名称</li>
</ol>
<h3 id="性能指标"><a class="markdownIt-Anchor" href="#性能指标"></a> 性能指标</h3>
<ul>
<li>QPS，每秒请求数</li>
<li>TPS，服务器每秒处理的事务数
<ul>
<li>平均</li>
<li>峰值</li>
<li>最低</li>
</ul>
</li>
<li>响应时间
<ul>
<li>平均</li>
<li>最大</li>
<li>平均</li>
</ul>
</li>
<li></li>
</ul>
<h3 id="迭代器和生成器"><a class="markdownIt-Anchor" href="#迭代器和生成器"></a> 迭代器和生成器</h3>
<p>生成器是通过函数的形式中调用yield或()的形式创建的。迭代器可以通过iter()内置函数创建。用法上：生成器在调用next()函数或for循环中，所有过程被执行，且返回值。而迭代器，所有值被返回，没有其他过程或动作</p>
<h3 id="迭代器和迭代对象"><a class="markdownIt-Anchor" href="#迭代器和迭代对象"></a> 迭代器和迭代对象</h3>
<ol>
<li>
<p>迭代器是这样一个对象，实现了无参数<code>__next__</code>方法，返回序列中的下一个元素，如果没有元素了，那么抛出StopIteration异常。</p>
</li>
<li>
<p>迭代对象</p>
<p>如果对象实现了能返回迭代器的<code>__iter__</code>方法，那么对象就是可迭代的。</p>
<p>根据可迭代协议，<code>__iter__</code>方法实例化并返回一个迭代器，</p>
<p>Python 中的迭代器还实现了<code>__iter__</code>方法，因此迭代器也可以迭代。</p>
</li>
</ol>
<ul>
<li>python迭代对象的流程<br />
在对一个可迭代对象迭代时，具体流程如下</li>
</ul>
<ol>
<li>
<p>检查对象是否实现了 <code>__iter__</code>方法，如果实现了就调用它，获取一个迭代器</p>
</li>
<li>
<p>如果没有实现<code>__iter__</code>方法，但是实现了<code>__getitem__</code>方法，<br />
python 会创建一个迭代器，尝试按顺序（从索引 0 开始）获取元素</p>
</li>
<li>
<p>如果尝试失败，python 抛出 TypeError 异常，通常会提示&quot;x object is not iterable&quot;</p>
</li>
</ol>
<p>迭代器与可迭代对象的关系<br />
python是通过可迭代对象来获取迭代器的。</p>
<h3 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h3>
<p>在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。</p>
<p>一般情况下，在我们认知当中，如果一个函数结束，函数的内部所有东西都会释放掉，还给内存，局部变量都会消失。但是闭包是一种特殊情况，如果外函数在结束的时候发现有自己的临时变量将来会在内部函数中用到，就把这个临时变量绑定给了内部函数，然后自己再结束。</p>
<blockquote>
<p>变量作用域请参考 LEGB</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mult</span>():</span></span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">lambda</span> x:x*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([m(<span class="number">3</span>) <span class="keyword">for</span> m <span class="keyword">in</span> mult()])</span><br><span class="line"><span class="comment"># [9, 9, 9, 9]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>比好的后期绑定，闭包中的变量时在内部函数被调用的时候查找的</p>
</blockquote>
<h3 id="匿名函数"><a class="markdownIt-Anchor" href="#匿名函数"></a> 匿名函数</h3>
<ul>
<li>通过lambda关键字来定义的函数称为匿名函数</li>
<li>简化代码复杂性，提高代码可读性</li>
</ul>
<h3 id="提高效率"><a class="markdownIt-Anchor" href="#提高效率"></a> 提高效率</h3>
<ul>
<li>使用生成器，减少内存使用</li>
<li>关键功能用其他编写，比如C</li>
<li>使用多进程、多线程</li>
<li>等等</li>
</ul>
<h3 id="pep8"><a class="markdownIt-Anchor" href="#pep8"></a> pep8</h3>
<p>代码格式建议,增强代码可读性以及规范性</p>
<p>pylint，flake8， autopep8</p>
<h3 id="python之禅"><a class="markdownIt-Anchor" href="#python之禅"></a> python之禅</h3>
<p>交互模式下<code>import this</code></p>
<h3 id="类型注解"><a class="markdownIt-Anchor" href="#类型注解"></a> 类型注解</h3>
<p>因为python是解释型语言，没有参数等的类型声明，类比java等编译型语言，增加代码可读性</p>
<h3 id="对象命名规则"><a class="markdownIt-Anchor" href="#对象命名规则"></a> 对象命名规则</h3>
<ul>
<li>模板，小写+下划线</li>
<li>类，大写驼峰</li>
<li>函数：小写、下划线</li>
<li>全局变量：全大写，下划线</li>
<li><code>_xxx</code>：表明是一个受保护对象，原则上不允许直接访问，外部类还是可以访问，是一个约定：警告这是一个私有变量，不要去访问他</li>
<li><code>__xxx</code>:双下划线开头，表示私有变量，只允许类本身访问，子类也不可以；
<ul>
<li>直接调用是报错</li>
<li>解释器会做名称修饰，防止被子类重写：可以使用_{ClassName}__xxx来访问</li>
</ul>
</li>
<li><code>__xxx__</code>：内置变量，可以直接访问</li>
<li><code>xxx_</code>：避免于关键字冲突</li>
<li><code>_xxx()</code>：私有方法</li>
<li><code>__xxx()</code>：同<code>__xxx</code></li>
</ul>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<ul>
<li>单行</li>
<li>多行</li>
</ul>
<h3 id="import可以同时导入多个库但不推荐"><a class="markdownIt-Anchor" href="#import可以同时导入多个库但不推荐"></a> import可以同时导入多个库，但不推荐</h3>
<h3 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h3>
<p>​	zip用户将元素打包，已长度小的为准</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="built_in">zip</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>),(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">r = <span class="built_in">zip</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">r = <span class="built_in">zip</span>((<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>),<span class="string">&#x27;1234&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)]</span><br><span class="line">[(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="对生成器实现列表的切片操作"><a class="markdownIt-Anchor" href="#对生成器实现列表的切片操作"></a> 对生成器实现列表的切片操作</h3>
<p><code>itertools.islice(生成器对象，start_index, end_index)</code></p>
<h3 id="类继承顺序"><a class="markdownIt-Anchor" href="#类继承顺序"></a> 类继承顺序</h3>
<p>请参考 2和3的区别</p>
<p>2是深度优先，3是广度优先</p>
<h3 id="reduce"><a class="markdownIt-Anchor" href="#reduce"></a> reduce</h3>
<p>一句话解决阶乘<code>reduce(lambda x,y:x*y, rnage(1, 10))</code></p>
<h3 id="描述符"><a class="markdownIt-Anchor" href="#描述符"></a> 描述符</h3>
<p><a href="https://iamfengdy.github.io/posts/20210507-bf389a0f.html">https://iamfengdy.github.io/posts/20210507-bf389a0f.html</a></p>
<h3 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h3>
<ul>
<li>类介绍，类方法、变量获取顺序等 <a href="https://iamfengdy.github.io/posts/20210507-687f2a8f.html">https://iamfengdy.github.io/posts/20210507-687f2a8f.html</a></li>
<li>tcp握手以及状态：<a href="https://iamfengdy.github.io/posts/20210219-b26c50c6.html">https://iamfengdy.github.io/posts/20210219-b26c50c6.html</a></li>
</ul>
<h3 id="复制"><a class="markdownIt-Anchor" href="#复制"></a> 复制</h3>
<ol>
<li>当复制对象是不可变对象时，复制的都是地址，即ID都一样；</li>
<li>当复制对象是可变对象时
<ol>
<li>若元素为不可变对象，则复制后元素改变互不影响；</li>
<li>若元素为可变对象，则复制后元素改变会共同影响；</li>
</ol>
</li>
</ol>
<h2 id="网络"><a class="markdownIt-Anchor" href="#网络"></a> 网络</h2>
<ol>
<li>tcp握手</li>
</ol>
<h2 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h2>
<h3 id="雪崩"><a class="markdownIt-Anchor" href="#雪崩"></a> 雪崩</h3>
<p>​	主要是缓存大面积失效，像雪崩一样；</p>
<ul>
<li>
<p>简介</p>
<p>指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
</li>
<li>
<p>方案</p>
<ul>
<li>数据过期时间设置随机，防止同一时间大量数据过期现象发生；</li>
<li>加锁排队，一般并发量不是特别多的时候，使用；</li>
<li>给每一个缓存数据增加相应的缓存标记，记录缓存的是否失效，如果缓存标记失效，则更新数据缓存</li>
</ul>
</li>
</ul>
<h3 id="穿透"><a class="markdownIt-Anchor" href="#穿透"></a> 穿透</h3>
<p>​	一定要注意<code>透</code>，就是缓存和数据库都没有；</p>
<ul>
<li>
<p>简介</p>
<p>指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉</p>
</li>
<li>
<p>方案</p>
<ul>
<li>
<p>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</p>
</li>
<li>
<p>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击；</p>
</li>
<li>
<p>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力；</p>
</li>
<li>
<p>Bitmap：典型的就是哈希表</p>
<ul>
<li>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了</li>
</ul>
</li>
<li>
<p>布隆过滤器（推荐）</p>
<ul>
<li>
<p>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。<br />
它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。<br />
Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。<br />
Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。</p>
<p>Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p>
<p>最重要的是：</p>
<ul>
<li><strong>一个元素如果判断结果为存在的时候元素不一定存在，但是判断结果为不存在的时候则一定不存在</strong>。</li>
<li><strong>布隆过滤器可以添加元素，但是不能删除元素</strong>。因为删掉元素会导致误判率增加。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="击穿"><a class="markdownIt-Anchor" href="#击穿"></a> 击穿</h3>
<p>​	<code>穿</code>，表示只是缓存没有，数据库有，所以只能是穿而不是透,一般指同一条数据；</p>
<ul>
<li>简介
<ul>
<li>缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库</li>
</ul>
</li>
<li>方案
<ul>
<li>设置热点数据永远不过期</li>
<li>加互斥锁，互斥锁</li>
</ul>
</li>
</ul>
<h3 id="预热"><a class="markdownIt-Anchor" href="#预热"></a> 预热</h3>
<ul>
<li>简介
<ul>
<li>像汽车发动一样，系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据；</li>
</ul>
</li>
<li>方案
<ul>
<li>直接写个缓存刷新页面，上线时手工操作一下；</li>
<li>数据量不大，可以在项目启动的时候自动进行加载</li>
<li>定时刷新；</li>
</ul>
</li>
</ul>
<h3 id="降级"><a class="markdownIt-Anchor" href="#降级"></a> 降级</h3>
<ul>
<li>
<p>简介</p>
<p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p>
<p><code>最终目的:</code>保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p>
<p>在进行降级之前要对系统进行梳理，看看系统是不是可以丢卒保帅；从而梳理出哪些必须誓死保护，哪些可降级；比如可以参考日志级别设置预案：</p>
<ul>
<li>一般：比如有些服务偶尔因为网络抖动或者服务正在上线而超时，可以自动降级；</li>
<li>警告：有些服务在一段时间内成功率有波动（如在95~100%之间），可以自动降级或人工降级，并发送告警</li>
<li>错误：比如可用率低于90%，或者数据库连接池被打爆了，或者访问量突然猛增到系统能承受的最大阀值，此时可以根据情况自动降级或者人工降级</li>
<li>严重错误：比如因为特殊原因数据错误了，此时需要紧急人工降级；</li>
</ul>
<p>服务降级的目的，是为了防止Redis服务故障，导致数据库跟着一起发生雪崩问题。因此，对于不重要的缓存数据，可以采取服务降级策略，例如一个比较常见的做法就是，Redis出现问题，不去数据库查询，而是直接返回默认值给用户。</p>
</li>
</ul>
<h3 id="热点key"><a class="markdownIt-Anchor" href="#热点key"></a> 热点key</h3>
<p>缓存中的一个Key(比如一个促销商品)，在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p>
<ul>
<li>方案
<ul>
<li>对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询</li>
</ul>
</li>
</ul>
<h3 id="更新提交问题"><a class="markdownIt-Anchor" href="#更新提交问题"></a> 更新提交问题</h3>
<p><img src="/assets/images/567f8de2b2a442d88fe5b392484e8ef5.png" alt="567f8de2b2a442d88fe5b392484e8ef5" /></p>
<h2 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> redis</h2>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>
<ul>
<li>
<p>优点</p>
<ul>
<li>数据机构丰富，键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合</li>
<li>快</li>
<li>支持数据持久化：RDB（redis database），AOF（append only file）</li>
<li>支持事务</li>
<li>支持主从复制</li>
</ul>
</li>
<li>
<p>缺点</p>
<ul>
<li>受物理内存限制</li>
<li>其他</li>
</ul>
</li>
</ul>
<h3 id="为什么快"><a class="markdownIt-Anchor" href="#为什么快"></a> 为什么快</h3>
<ul>
<li>完全基于内存，类似于HashMap，查找和操作的时间复杂度都是O(1)；</li>
<li>数据结构简单</li>
<li>采用单线程，避免了上下文切换和竞争等带来的消耗
<ul>
<li>是执行 Redis 命令的核心模块是单线程的，而不是整个 Redis 实例就一个线程，Redis 其他模块还有各自模块的线程的。</li>
</ul>
</li>
<li>使用非阻塞IO，即多路复用</li>
<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
</ul>
<h3 id="持久化"><a class="markdownIt-Anchor" href="#持久化"></a> 持久化</h3>
<p>​	同时使用时AOP优先RDB进行恢复；</p>
<ul>
<li>RDB模式（默认），redis-database
<ul>
<li>一定时间将数据以快照(某一时刻的状态记录）的形式保存到硬盘，生成dumo.rdb</li>
<li>优点
<ul>
<li>只有一个文件，方便持久化</li>
<li>性能最大化，fork子进程完成写，主进程继续处理命令（单独的子进程来进行持久化）</li>
<li>比AOF的启动效率高</li>
</ul>
</li>
<li>数据安全性低，发生故障时会发生数据丢失，适合数据不严谨的时候；</li>
<li></li>
</ul>
</li>
<li>AOF，append-only-file
<ul>
<li>
<p>将每次执行的写命令记录到单独日志中，重启时恢复</p>
</li>
<li>
<p>缺点</p>
<ul>
<li>文件大，恢复慢</li>
<li>启动效率低</li>
</ul>
<p>优缺点是什么？<br />
RDB更新频率高，优先使用AOF还原数据。<br />
AOF比RDB更安全也更大<br />
RDB性能比AOF好<br />
如果两个都配了优先加载AOF</p>
</li>
</ul>
</li>
</ul>
<h3 id="过期删除策略"><a class="markdownIt-Anchor" href="#过期删除策略"></a> 过期删除策略</h3>
<ul>
<li>
<p>定时</p>
<p>将数据创建一个定时器，会占用大量CPU资源去处理，从而影响效率</p>
</li>
<li>
<p>惰性定期</p>
<p>查询的时候才判断，过期则删除</p>
</li>
<li>
<p>定期</p>
<p>每隔一段时间清楚</p>
</li>
</ul>
<h3 id="redis的内存淘汰策略"><a class="markdownIt-Anchor" href="#redis的内存淘汰策略"></a> Redis的内存淘汰策略</h3>
<p>Redis的内存淘汰策略有哪些</p>
<p>Redis的内存淘汰策略是指在Redis的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p>
<ol>
<li>全局的键空间选择性移除<br />
noeviction：当内存不足以容纳新写入数据时，新写入操作会报错。<br />
allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。（这个是最常用的）<br />
allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</li>
<li>设置过期时间的键空间选择性移除<br />
volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。<br />
volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。<br />
volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</li>
<li>总结<br />
Redis的内存淘汰策略的选取并不会影响过期的key的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</li>
</ol>
<h3 id="内存用完会发生写错误但读不影响"><a class="markdownIt-Anchor" href="#内存用完会发生写错误但读不影响"></a> 内存用完，会发生写错误，但读不影响</h3>
<h3 id="为什么使用单线程"><a class="markdownIt-Anchor" href="#为什么使用单线程"></a> 为什么使用单线程</h3>
<p>因为Redis是基于内存的操作，CPU不是Redis的瓶颈，Redis的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章地采用单线程的方案了（毕竟采用多线程会有很多麻烦！）Redis利用队列技术将并发访问变为串行访问</p>
<ol>
<li>绝大部分请求是纯粹的内存操作（非常快速）</li>
<li>采用单线程,避免了不必要的上下文切换和竞争条件</li>
<li>非阻塞IO优点</li>
</ol>
<h3 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h3>
<ul>
<li><code>keys</code>命令会致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复；</li>
<li><code>scan</code>可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长;</li>
</ul>
<h3 id="与memcache相比"><a class="markdownIt-Anchor" href="#与memcache相比"></a> 与memcache相比</h3>
<p><img src="/assets/images/bd7addd5cc0649d98d30c4c0fee42798.png" alt="bd7addd5cc0649d98d30c4c0fee42798" /></p>
<h2 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> mysql</h2>
<h3 id="myisam-与-innodb-区别"><a class="markdownIt-Anchor" href="#myisam-与-innodb-区别"></a> MyISAM 与 InnoDB 区别：</h3>
<ol>
<li>InnoDB 支持事务，MyISAM 不支持，这一点是非常之重要。事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而 MyISAM</li>
</ol>
<p>就不可以了；</p>
<ol start="2">
<li>MyISAM 适合查询以及插入为主的应用，InnoDB 适合频繁修改以及涉及到安全性较高的应用；</li>
<li>InnoDB 支持外键，MyISAM 不支持；</li>
<li>对于自增长的字段，InnoDB 中必须包含只有该字段的索引，但是在 MyISAM表中可以和其他字段一起建立联合索引；</li>
<li>清空整个表时，InnoDB 是一行一行的删除，效率非常慢。MyISAM 则会重建表；</li>
</ol>
<h3 id="乐观锁和悲观锁"><a class="markdownIt-Anchor" href="#乐观锁和悲观锁"></a> 乐观锁和悲观锁</h3>
<p>悲观锁, 就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p>
<p>乐观锁，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制，乐观锁适用于多读的应用类型，这样可以提高吞吐量</p>
<h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2>
<h2 id="8大算法"><a class="markdownIt-Anchor" href="#8大算法"></a> 8大算法</h2>
<p><a href="https://iamfengdy.github.io/categories/algorithm/sorting/">https://iamfengdy.github.io/categories/algorithm/sorting/</a></p>
<h2 id="设计模式"><a class="markdownIt-Anchor" href="#设计模式"></a> 设计模式</h2>
<p><a href="https://iamfengdy.github.io/categories/design/java-design-patterns/">https://iamfengdy.github.io/categories/design/java-design-patterns/</a></p>
<h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2>
<h3 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h3>
<p><a href="https://iamfengdy.github.io/posts/20210218-7b216a3b.html">https://iamfengdy.github.io/posts/20210218-7b216a3b.html</a></p>
<p>红黑树 <a href="https://blog.csdn.net/u012414189/article/details/83832161">https://blog.csdn.net/u012414189/article/details/83832161</a></p>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>编写高质量python代码</title>
    <url>//posts/20210415-ee04faa2.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9f63707860c7456290a46dbb4c531536.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>twisted系列教程</title>
    <url>//posts/20210415-32c90503.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/cfaec6630c7946e68209427e08d0685b.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>css权威指南</title>
    <url>//posts/20210415-13b020f.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/bee66abdcec148789a10f73cb969a601.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解java虚拟机</title>
    <url>//posts/20210415-5bedbc4e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/e8fd67d6db734cbfb2ec44f9d37f9db5.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>java-understanding-the-jvm</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>html5权威指南</title>
    <url>//posts/20210415-4198c9c2.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/d35b05d699eb4c02830b59ac5559be78.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>js权威指南</title>
    <url>//posts/20210415-9cf49499.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/0e7f998032fa42e28666a461c316043b.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>language</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>AndrewNg机器学习</title>
    <url>//posts/20210415-e9e84773.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div> -->
<h1 id="课程-pdf"><a class="markdownIt-Anchor" href="#课程-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9976b74d8eb347e88e6f9129fd2b83e1.pdf">课程 PDF</a></h1>
<blockquote>
<p>week1-week6</p>
</blockquote>
<h1 id="总结-pdf"><a class="markdownIt-Anchor" href="#总结-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/b3ecc084763c4a07a0e9a5c56badc752.pdf">总结 PDF</a></h1>
]]></content>
      <categories>
        <category>machine-learning</category>
        <category>andrewNg</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>week2</title>
    <url>//posts/20210709-81ea26d4.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="multivariate-linear-regression多元线性回归"><a class="markdownIt-Anchor" href="#multivariate-linear-regression多元线性回归"></a> Multivariate Linear Regression（多元线性回归）</h2>
<h3 id="multiple-features多特性"><a class="markdownIt-Anchor" href="#multiple-features多特性"></a> Multiple Features（多特性）</h3>
<p>Linear regression with multiple variables is also known as “multivariate linear regression”.</p>
<p>We now introduce notation for equations where we can have any number of input variables.</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">x_j^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4577719999999998em;vertical-align:-0.4129719999999999em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4129719999999999em;"><span></span></span></span></span></span></span></span></span></span>= value of feature j in the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>i</mi><mrow><mi>t</mi><mi>h</mi></mrow></msup></mrow><annotation encoding="application/x-tex">i^{th}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span></span></span></span> training example</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span>=the input (features) of the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>t</mi><mi>h</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">i^{(th)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> training example</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> =the number of training examples</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> =the number of features</li>
</ul>
<p>The multivariable form of the hypothesis function accommodating these multiple features is as follows:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msub><mi>x</mi><mn>3</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>θ</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \theta_3 x_3 + \cdots + \theta_n x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>In order to develop intuition about this function, we can think about <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> as the basic price of a house, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> as the price per square meter, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\theta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> as the price per floor, etc. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> will be the number of square meters in the house, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> the number of floors, etc.</p>
<p>Using the definition of matrix multiplication, our multivariable hypothesis function can be concisely represented as:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>θ</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>θ</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>θ</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>0</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mi>θ</mi><mi>T</mi></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">h_θ(x)=\left[ \begin{matrix} \theta_0 &amp; \theta_1 &amp; ... &amp; \theta_n \end{matrix} \right]\left[ \begin{matrix} x_0 \\ x_1 \\ ... \\ x_n \end{matrix} \right] = \theta^Tx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8500000000000001em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35000000000000003em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span></p>
<p>This is a vectorization of our hypothesis function for one training example; see the lessons on vectorization to learn more.</p>
<p><code>Remark</code> Note that for convenience reasons in this course we assume <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mn>0</mn><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>=</mo><mn>1</mn><mtext> for </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mrow><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>m</mi></mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_{0}^{(i)} =1 \text{ for } (i\in { 1,\dots, m } )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.311108em;vertical-align:-0.26630799999999993em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord text"><span class="mord"> for </span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span></span><span class="mclose">)</span></span></span></span>. This allows us to do matrix operations with theta and x. Hence making the two vectors ‘<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span>’ and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> match each other element-wise (that is, have the same number of elements:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>).]</p>
<h3 id="gradient-descent-for-multiple-variables"><a class="markdownIt-Anchor" href="#gradient-descent-for-multiple-variables"></a> Gradient Descent for Multiple Variables</h3>
<p><code>NOTE</code>$h_\theta(x^{i())}) - y^{(i)} $是⼀个确定的值，因为在收敛开始之前就需要对参数 以及 初始化⼀个值，这 时该表达式的值就确定是⼀个实际值，在 Vectorization ⼩节会涉及到；</p>
<p>The gradient descent equation itself is generally the same form; we just have to repeat it for our ‘n’ features:</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲ &amp; \text{repeat…'>\begin{align*} &amp; \text{repeat until convergence:} \; \lbrace \newline \; &amp; \theta_0 := \theta_0 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_0^{(i)}\newline \; &amp; \theta_1 := \theta_1 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_1^{(i)} \newline \; &amp; \theta_2 := \theta_2 - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_2^{(i)} \newline &amp; \cdots \newline \rbrace \end{align*}
</p>
<p>in other words:</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲&amp; \text{repeat …'>\begin{align*}&amp; \text{repeat until convergence:} \; \lbrace \newline \; &amp; \theta_j := \theta_j - \alpha \frac{1}{m} \sum\limits_{i=1}^{m} (h_\theta(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)} \; &amp; \text{for j := 0...n}\newline \rbrace\end{align*}
</p>
<p>The following image compares gradient descent with one variable to gradient descent with multiple variables:</p>
<p><img src="/assets/images/20210709170310.png" alt="20210709170310" /></p>
<h3 id="gradient-descent-in-practice-1-feature-scaling"><a class="markdownIt-Anchor" href="#gradient-descent-in-practice-1-feature-scaling"></a> Gradient Descent in Practice 1 - Feature Scaling</h3>
<p>We can speed up gradient descent by having each of our input values in roughly the same range. This is because θ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</p>
<p>The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same. Ideally:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>1</mn><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">−1 ≤ x_{(i)} ≤ 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9911699999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>or</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>0.5</mn><mo>≤</mo><msub><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msub><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">−0.5 ≤ x_{(i)} ≤ 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9911699999999999em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span></p>
<p>These aren’t exact requirements; we are only trying to speed things up. The goal is to get all input variables into roughly one of these ranges, give or take a few.</p>
<p>Two techniques to help with this are <strong>feature scaling</strong> and <strong>mean normalization</strong>. Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1. Mean normalization involves subtracting the average value for an input variable from the values for that input variable resulting in a new average value for the input variable of just zero. To implement both of these techniques, adjust your input values as shown in this formula:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>:</mo><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>μ</mi><mi>i</mi></msub></mrow><msub><mi>s</mi><mi>i</mi></msub></mfrac></mstyle></mrow><annotation encoding="application/x-tex">x_i := \dfrac{x_i - \mu_i}{s_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>Where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>μ</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">μ_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>* is the <strong>average</strong> of all the values for feature (i) and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>* is the range of values (max - min), or <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the standard deviation.</p>
<p>Note that dividing by the range, or dividing by the standard deviation, give different results. The quizzes in this course use range - the programming exercises use standard deviation.</p>
<p>For example, if <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> represents housing prices with a range of 100 to 2000  and a mean value of 1000, then, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>:</mo><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>e</mi><mo>−</mo><mn>1000</mn></mrow><mn>1900</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">x_i := \dfrac{price-1000}{1900}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.02252em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365200000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">9</span><span class="mord">0</span><span class="mord">0</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<h3 id="gradient-descent-in-practice-2-learning-rate"><a class="markdownIt-Anchor" href="#gradient-descent-in-practice-2-learning-rate"></a> Gradient Descent in Practice 2 - Learning Rate</h3>
<p><strong>Debugging gradient descent.</strong> Make a plot with <em>number of iterations</em> on the x-axis. Now plot the cost function, J(θ) over the number of iterations of gradient descent. If J(θ) ever increases, then you probably need to decrease α.</p>
<p><strong>Automatic convergence test.</strong> Declare convergence if J(θ) decreases by less than E in one iteration, where E is some small value such as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mi mathvariant="normal">−</mi><mn>3</mn></mrow></msup></mrow><annotation encoding="application/x-tex">10^{−3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span>. However in practice it’s difficult to choose this threshold value.</p>
<p><img src="/assets/images/20210709171144.png" alt="20210709171144" /></p>
<p>It has been proven that if learning rate α is sufficiently small, then J(θ) will decrease on every iteration.</p>
<p><img src="/assets/images/20210709171202.png" alt="20210709171202" /></p>
<p>To summarize:</p>
<p>If <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> is too small: slow convergence.</p>
<p>If <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> is too large: ￼may not decrease on every iteration and thus may not converge.</p>
<h3 id="features-and-polynomial-regression多项式"><a class="markdownIt-Anchor" href="#features-and-polynomial-regression多项式"></a> Features and Polynomial Regression（多项式）</h3>
<p>We can improve our features and the form of our hypothesis function in a couple different ways.</p>
<p>We can <strong>combine</strong> multiple features into one. For example, we can combine <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> into a new feature <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> by taking <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>⋅</mo><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_1⋅x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.59445em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</p>
<p><strong>Polynomial Regression</strong></p>
<p>Our hypothesis function need not be linear (a straight line) if that does not fit the data well.</p>
<p>We can <strong>change the behavior or curve</strong> of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p>
<p>For example, if our hypothesis function is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">h_\theta(x) = \theta_0 + \theta_1 x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> then we can create additional features based on x_1<em>x</em>1, to get the quadratic function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span> or the cubic function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msub><mi>θ</mi><mn>3</mn></msub><msubsup><mi>x</mi><mn>1</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2 + \theta_3 x_1^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>In the cubic version, we have created new features <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">x_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">x_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x_2 = x_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub><mo>=</mo><msubsup><mi>x</mi><mn>1</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">x_3 = x_1^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>.</p>
<p>To make it a square root function, we could do: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>θ</mi><mn>2</mn></msub><msqrt><msub><mi>x</mi><mn>1</mn></msub></msqrt></mrow><annotation encoding="application/x-tex">h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 \sqrt{x_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.31472em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.72528em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.68528em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31472em;"><span></span></span></span></span></span></span></span></span></p>
<p>One important thing to keep in mind is, if you choose your features this way then feature scaling becomes very important.</p>
<p>eg. if <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> has range 1 - 1000 then range of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span> becomes 1 - 1000000 and that of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>x</mi><mn>1</mn><mn>3</mn></msubsup></mrow><annotation encoding="application/x-tex">x_1^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span> becomes 1 - 1000000000</p>
<h2 id="computering-parameters-analytically"><a class="markdownIt-Anchor" href="#computering-parameters-analytically"></a> Computering Parameters Analytically</h2>
<h3 id="normal-equation"><a class="markdownIt-Anchor" href="#normal-equation"></a> Normal Equation</h3>
<p>Gradient descent gives one way of minimizing J. Let’s discuss a second way of doing so, this time performing the minimization explicitly and without resorting to an iterative algorithm. In the “Normal Equation” method, we will minimize J by explicitly taking its derivatives with respect to the θj ’s, and setting them to zero. This allows us to find the optimum theta without iteration. The normal equation formula is given below:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo>=</mo><mo stretchy="false">(</mo><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>X</mi><mi>T</mi></msup><mi>y</mi></mrow><annotation encoding="application/x-tex">\theta = (X^T X)^{-1}X^Ty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></p>
<p><img src="/assets/images/20210709171831.png" alt="20210709171831" /></p>
<p>There is <strong>no need</strong> to do feature scaling with the normal equation.</p>
<p>The following is a comparison of gradient descent and the normal equation:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Gradient Descent</th>
<th style="text-align:left">Normal Equation</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Need to choose alpha</td>
<td style="text-align:left">No need to choose alpha</td>
</tr>
<tr>
<td style="text-align:left">Needs many iterations</td>
<td style="text-align:left">No need to iterate</td>
</tr>
<tr>
<td style="text-align:left"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><mi>k</mi><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(kn^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td style="text-align:left"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, need to calculate inverse of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding="application/x-tex">X^TX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></td>
</tr>
<tr>
<td style="text-align:left">Works well when n is large</td>
<td style="text-align:left">Slow if n is very large</td>
</tr>
</tbody>
</table>
<p>With the normal equation, computing the inversion has complexity <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>. So if we have a very large number of features, the normal equation will be slow. In practice, when n exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.</p>
<h3 id="normal-equation-nonivertibility"><a class="markdownIt-Anchor" href="#normal-equation-nonivertibility"></a> Normal Equation Nonivertibility</h3>
<p>When implementing the normal equation in octave we want to use the ‘pinv’ function rather than ‘inv.’ The ‘pinv’ function will give you a value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span> even if <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding="application/x-tex">X^TX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> is not invertible.</p>
<p>If <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>X</mi><mi>T</mi></msup><mi>X</mi></mrow><annotation encoding="application/x-tex">X^TX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> is <strong>noninvertible,</strong> the common causes might be having :</p>
<ul>
<li>Redundant features, where two features are very closely related (i.e. they are linearly dependent)</li>
<li>Too many features (e.g. m ≤ n). In this case, delete some features or use “regularization” (to be explained in a later lesson).</li>
</ul>
<p>Solutions to the above problems include deleting a feature that is linearly dependent with another or deleting one or more features when there are too many features.</p>
]]></content>
      <categories>
        <category>machine-learning</category>
        <category>andrewNg</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>week1</title>
    <url>//posts/20210709-18e3776e.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h2>
<h3 id="what-is-machine-learning"><a class="markdownIt-Anchor" href="#what-is-machine-learning"></a> What is Machine Learning?</h3>
<p>Two definitions of Machine Learning are offered. Arthur Samuel described it as: “the field of study that gives computers the ability to learn without being explicitly programmed.” This is an older, informal definition.</p>
<p>Tom Mitchell provides a more modern definition: “A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.”</p>
<p>Example: playing checkers.</p>
<p>E = the experience of playing many games of checkers</p>
<p>T = the task of playing checkers.</p>
<p>P = the probability that the program will win the next game.</p>
<p>In general, any machine learning problem can be assigned to one of two broad classifications:</p>
<p>Supervised learning and Unsupervised learning.</p>
<h3 id="supervised-learning监督学习"><a class="markdownIt-Anchor" href="#supervised-learning监督学习"></a> Supervised Learning（监督学习）</h3>
<p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p>
<p>Supervised learning problems are categorized into “regression”（回归） and “classification”（分类）problems. In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function. In a classification problem, we are instead trying to predict results in a discrete（离散） output. In other words, we are trying to map input variables into discrete categories.</p>
<p><strong>Example1</strong></p>
<p>Given data about the size of houses on the real estate market, try to predict their price. Price as a function of size is a continuous output, so this is a regression problem.</p>
<p>We could turn this example into a classification problem by instead making our output about whether the house “sells for more or less than the asking price.” Here we are classifying the houses based on price into two discrete categories.</p>
<p><strong>Example 2</strong>:</p>
<p>(a) Regression<code>（一个连续或真实的值）</code> - Given a picture of a person, we have to predict their age on the basis of the given picture.</p>
<p>(b) Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign.</p>
<h3 id="unsupervised-learning无监督学习"><a class="markdownIt-Anchor" href="#unsupervised-learning无监督学习"></a> Unsupervised Learning（无监督学习）</h3>
<p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p>
<p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p>
<p>With unsupervised learning there is no feedback based on the prediction results.</p>
<p><strong>Example:</strong></p>
<p>Clustering（聚类）: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p>
<p>Non-clustering: The “Cocktail Party Algorithm”, allows you to find structure in a chaotic environment. (i.e. identifying individual voices and music from a mesh of sounds at a <a href="https://en.wikipedia.org/wiki/Cocktail_party_effect">cocktail party</a>).</p>
<h2 id="model-and-cost-function"><a class="markdownIt-Anchor" href="#model-and-cost-function"></a> Model and Cost Function</h2>
<h3 id="model-representation模型表示"><a class="markdownIt-Anchor" href="#model-representation模型表示"></a> Model Representation（模型表示）</h3>
<p>To establish notation for future use, we’ll use <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> to denote the “input” variables (living area in this example), also called input features, and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> to denote the “output” or target variable that we are trying to predict (price). A pair <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo separator="true">,</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x^{(i)} , y^{(i)} )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>is called a training example, and the dataset that we’ll be using to learn—a list of m training examples$ {(x^{(i)} , y^{(i)} ); i = 1, . . . , m}$—is called a training set. Note that the superscript “(i)” in the notation is simply an index into the training set, and has nothing to do with exponentiation. We will also use X to denote the space of input values, and Y to denote the space of output values. In this example, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>Y</mi><mo>=</mo><mi mathvariant="normal">R</mi></mrow><annotation encoding="application/x-tex">X = Y = ℝ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord amsrm">R</span></span></span></span>.</p>
<p>To describe the supervised learning problem slightly more formally, our goal is, given a training set, to learn a function h : X → Y so that h(x) is a “good” predictor for the corresponding value of y. For historical reasons, this function h is called a hypothesis. Seen pictorially, the process is therefore like this:</p>
<p><img src="/assets/images/cb9f8c23c4fd4ade81f4f97283dabf67.png" alt="image-20210709102426328" /></p>
<p>When the target variable that we’re trying to predict is continuous, such as in our housing example, we call the learning problem a regression problem. When y can take on only a small number of discrete values (such as if, given the living area, we wanted to predict if a dwelling is a house or an apartment, say), we call it a classification problem.</p>
<h3 id="cost-function成本函数"><a class="markdownIt-Anchor" href="#cost-function成本函数"></a> Cost Function（成本函数）</h3>
<p>We can measure the accuracy of our hypothesis function by using a <strong>cost function</strong>. This takes an average difference (actually a fancier version of an average) of all the results of the hypothesis with inputs from x’s and the actual output y’s.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mover accent="true"><mi>y</mi><mo>^</mo></mover><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mn>2</mn></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo fence="true">(</mo><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow></mstyle></mstyle></mrow><annotation encoding="application/x-tex">J(\theta_0, \theta_1) = \dfrac {1}{2m} \displaystyle \sum _{i=1}^m \left ( \hat{y}_{i}- y_{i} \right)^2 = \dfrac {1}{2m} \displaystyle \sum _{i=1}^m \left (h_\theta (x_{i}) - y_{i} \right)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p>
<p>To break it apart, it is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\frac{1}{2} \bar{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span></span></span></span> where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo>ˉ</mo></mover></mrow><annotation encoding="application/x-tex">\bar{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.56778em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.56778em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.22222em;">ˉ</span></span></span></span></span></span></span></span></span> is the mean of the squares of $h_\theta (x_{i}) - y_{i} $, or the difference between the predicted value and the actual value.</p>
<p>This function is otherwise called the “Squared error function”（平方差）, or “Mean squared error”. The mean is halved $\left(\frac{1}{2}\right) $as a convenience for the computation of the gradient descent, as the derivative term of the square function will cancel out the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> term. The following image summarizes what the cost function does:</p>
<p><img src="/assets/images/20210709112930.png" alt="image-20210709112917965" /></p>
<p><code>NOTE:</code>选择合适的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1,\theta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 让<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mn>1</mn><mo separator="true">,</mo><mi>θ</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta1, \theta2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord">2</span><span class="mclose">)</span></span></span></span>最小</p>
<h3 id="cost-function-intuition-1"><a class="markdownIt-Anchor" href="#cost-function-intuition-1"></a> Cost Function - Intuition 1</h3>
<p>If we try to think of it in visual terms, our training data set is scattered on the x-y plane. We are trying to make a straight line (defined by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_\theta(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> which passes through these scattered data points.</p>
<p>Our objective is to get the best possible line. The best possible line will be such so that the average squared vertical distances of the scattered points from the line will be the least. Ideally, the line should pass through all the points of our training data set. In such a case, the value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta_0, \theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> will be 0. The following example shows the ideal situation where we have a cost function of 0.</p>
<p><img src="/assets/images/20210709143213.png" alt="image-20210709143150224" /></p>
<p>When <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\theta_1 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, we get a slope of 1 which goes through every single data point in our model. Conversely, when <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>=</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">\theta_1 = 0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">5</span></span></span></span>, we see the vertical distance from our fit to the data points increase.</p>
<p><img src="/assets/images/20210709143323.png" alt="image-20210709143251520" /></p>
<p>This increases our cost function to 0.58. Plotting several other points yields to the following graph:</p>
<p><img src="/assets/images/20210709143338.png" alt="image-20210709143307254" /></p>
<p>Thus as a goal, we should try to minimize the cost function. In this case, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\theta_1 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> is our global minimum.</p>
<h3 id="cost-function-intuition-2"><a class="markdownIt-Anchor" href="#cost-function-intuition-2"></a> Cost Function - Intuition 2</h3>
<p>A contour（轮廓，等高线） plot is a graph that contains many contour lines. A contour line of a two variable function has a constant value at all points of the same line. An example of such a graph is the one to the right below.</p>
<p><img src="/assets/images/20210709143754.png" alt="image-20210709143746810" /></p>
<p>Taking any color and going along the ‘circle’, one would expect to get the same value of the cost function. For example, the three green points found on the green line above have the same value for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta_0,\theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> and as a result, they are found along the same line. The circled x displays the value of the cost function for the graph on the left when <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo>=</mo><mn>800</mn></mrow><annotation encoding="application/x-tex">\theta_0 = 800</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>=</mo><mo>−</mo><mn>0.15</mn></mrow><annotation encoding="application/x-tex">\theta_1= -0.15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">5</span></span></span></span>. Taking another h(x) and plotting its contour plot, one gets the following graphs:</p>
<p><img src="/assets/images/20210709143941.png" alt="20210709143941" /></p>
<p>When <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub><mo>=</mo><mn>360</mn></mrow><annotation encoding="application/x-tex">\theta_0 = 360</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">6</span><span class="mord">0</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta_1 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, the value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta_0,\theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> in the contour plot gets closer to the center thus reducing the cost function error. Now giving our hypothesis function a slightly positive slope results in a better fit of the data.</p>
<p><img src="/assets/images/20210709144050.png" alt="20210709144050" /></p>
<p>The graph above minimizes the cost function as much as possible and consequently, the result of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>and<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> tend to be around 0.12 and 250 respectively. Plotting those values on our graph to the right seems to put our point in the center of the inner most ‘circle’.</p>
<h2 id="paramter-learning"><a class="markdownIt-Anchor" href="#paramter-learning"></a> Paramter Learning</h2>
<p>通过公式方法找到最合适的参数。</p>
<h3 id="gradient-descent梯度下降"><a class="markdownIt-Anchor" href="#gradient-descent梯度下降"></a> Gradient Descent（梯度下降）</h3>
<p>So we have our hypothesis function and we have a way of measuring how well it fits into the data. Now we need to estimate the parameters in the hypothesis function. That’s where gradient descent comes in.</p>
<p>Imagine that we graph our hypothesis function based on its fields <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> (actually we are graphing the cost function as a function of the parameter estimates). We are not graphing x and y itself, but the parameter range of our hypothesis function and the cost resulting from selecting a particular set of parameters.</p>
<p>We put <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>on the x axis and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> on the y axis, with the cost function on the vertical z axis. The points on our graph will be the result of the cost function using our hypothesis with those specific theta parameters. The graph below depicts such a setup.</p>
<p><img src="/assets/images/20210709144616.png" alt="20210709144616" /></p>
<p>We will know that we have succeeded when our cost function is at the very bottom of the pits in our graph, i.e. when its value is the minimum.  The red arrows show the minimum points in the graph.</p>
<p>The way we do this is by taking the derivative (the tangential line to a function) of our cost function. The slope of the tangent is the derivative at that point and it will give us a direction to move towards. We make steps down the cost function in the direction with the steepest descent. The size of each step is determined by the parameter α, which is called the learning rate.</p>
<p>For example, the distance between each ‘star’ in the graph above represents a step determined by our parameter α. A smaller α would result in a smaller step and a larger α results in a larger step. The direction in which the step is taken is determined by the partial derivative of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">J(\theta_0,\theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>. Depending on where one starts on the graph, one could end up at different points. The image above shows us two different starting points that end up in two different places.</p>
<p>The gradient descent algorithm is:</p>
<p>repeat until convergence:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mi>j</mi></msub><mo>−</mo><mi>α</mi><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta_0, \theta_1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.343548em;vertical-align:-0.972108em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.972108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>where j=0,1 represents the feature index number.​</p>
<p>At each iteration j, one should simultaneously update the parameters <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>θ</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">\theta_1, \theta_2,...,\theta_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>. Updating a specific parameter prior to calculating another one on the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>j</mi><mrow><mo stretchy="false">(</mo><mi>t</mi><mi>h</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">j^{(th)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">h</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span> iteration would yield to a wrong implementation.</p>
<p><img src="/assets/images/20210709145141.png" alt="20210709145141" /></p>
<h3 id="gradient-descent-intuition"><a class="markdownIt-Anchor" href="#gradient-descent-intuition"></a> Gradient Descent Intuition</h3>
<p>In this video we explored the scenario where we used one parameter <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and plotted its cost function to implement a gradient descent. Our formula for a single parameter was :</p>
<p>Repeat until convergence:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>1</mn></msub><mo>−</mo><mi>α</mi><mfrac><mi>d</mi><mrow><mi>d</mi><msub><mi>θ</mi><mn>1</mn></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\theta_1:=\theta_1-\alpha \frac{d}{d\theta_1} J(\theta_1)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.20744em;vertical-align:-0.8360000000000001em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>Regardless of the slope’s sign for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><msub><mi>θ</mi><mn>1</mn></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{d}{d\theta_1} J(\theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.325208em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>eventually converges to its minimum value. The following graph shows that when the slope is negative, the value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>increases and when it is positive, the value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> decreases.</p>
<p><img src="/assets/images/20210709145805.png" alt="20210709145805" /></p>
<p>On a side note, we should adjust our parameter <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span> to ensure that the gradient descent algorithm converges in a reasonable time. Failure to converge or too much time to obtain the minimum value imply that our step size is wrong.</p>
<p><img src="/assets/images/20210709145825.png" alt="20210709145825" /></p>
<h4 id="how-does-gradient-descent-converge-with-a-fixed-step-size-alpha"><a class="markdownIt-Anchor" href="#how-does-gradient-descent-converge-with-a-fixed-step-size-alpha"></a> How does gradient descent converge with a fixed step size <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span></span></span></span>?</h4>
<p>The intuition behind the convergence is that <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>d</mi><mrow><mi>d</mi><msub><mi>θ</mi><mn>1</mn></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><msub><mi>θ</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{d}{d\theta_1} J(\theta_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.325208em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> approaches 0 as we approach the bottom of our convex function. At the minimum, the derivative will always be 0 and thus we get:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub><mo>:</mo><mo>=</mo><msub><mi>θ</mi><mn>1</mn></msub><mo>−</mo><mi>α</mi><mo>∗</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\theta_1:=\theta_1-\alpha * 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></p>
<p><img src="/assets/images/20210709145847.png" alt="20210709145847" /></p>
<h3 id="gradient-descent-for-linear-regression线性回归"><a class="markdownIt-Anchor" href="#gradient-descent-for-linear-regression线性回归"></a> Gradient Descent For Linear Regression（线性回归）</h3>
<p><strong>Note:</strong> [At 6:15 “h(x) = -900 - 0.1x” should be “h(x) = 900 - 0.1x”]</p>
<p>When specifically applied to the case of linear regression, a new form of the gradient descent equation can be derived. We can substitute our actual cost function and our actual hypothesis function and modify the equation to :</p>
<p><img src="/assets/images/20210709161656.png" alt="20210709161656" /></p>
<p>where m is the size of the training set,$ \theta_0$ a constant that will be changing simultaneously with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_{i}, y_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>are values of the given training set (data).</p>
<p>Note that we have separated out the two cases for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\theta_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> into separate equations for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\theta_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>and<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>; and that for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>θ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\theta_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> we are multiplying <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>∗</mo></mrow><annotation encoding="application/x-tex">x_{i}*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∗</span></span></span></span>* at the end due to the derivative. The following is a derivation of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>θ</mi><mi>j</mi></msub></mrow></mfrac><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac {\partial}{\partial \theta_j}J(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4224279999999998em;vertical-align:-0.5423199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02778em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5423199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span> for a single example :</p>
<p><img src="/assets/images/20210709161907.png" alt="20210709161907" /></p>
<p>The point of all this is that if we start with a guess for our hypothesis and then repeatedly apply these gradient descent equations, our hypothesis will become more and more accurate.</p>
<p>So, this is simply gradient descent on the original cost function J. This method looks at every example in the entire training set on every step, and is called <strong>batch gradient descent</strong>. Note that, while gradient descent can be susceptible to local minima in general, the optimization problem we have posed here for linear regression has only one global, and no other local, optima; thus gradient descent always converges (assuming the learning rate α is not too large) to the global minimum. Indeed, J is a convex quadratic function. Here is an example of gradient descent as it is run to minimize a quadratic function.</p>
<p><img src="/assets/images/20210709161932.png" alt="20210709161932" /></p>
<p>The ellipses shown above are the contours of a quadratic function. Also shown is the trajectory taken by gradient descent, which was initialized at (48,30). The x’s in the figure (joined by straight lines) mark the successive values of θ that gradient descent went through as it converged to its minimum.</p>
<h2 id="linear-algebra-review线性代数"><a class="markdownIt-Anchor" href="#linear-algebra-review线性代数"></a> Linear Algebra Review（线性代数）</h2>
<h3 id="matrices-and-vectors矩阵和向量"><a class="markdownIt-Anchor" href="#matrices-and-vectors矩阵和向量"></a> Matrices and Vectors（矩阵和向量）</h3>
<p>向量是矩阵的子集。矩阵是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>,向量是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">m*1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>;</p>
<p>Matrices are 2-dimensional arrays:<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>10</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>12</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ \begin{matrix} 1 &amp; 2 &amp; 3\\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \\10 &amp; 11 &amp; 12 \end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>The above matrix has four rows and three columns, so it is a 4 x 3 matrix.</p>
<p>A vector is a matrix with one column and many rows:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ \begin{matrix} 1 \\ 2 \\ 3 \\ 4\end{matrix} \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.80204em;vertical-align:-2.15003em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>So vectors are a subset of matrices. The above vector is a 4 x 1 matrix.</p>
<p><strong>Notation and terms</strong>:</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">A_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> refers to the element in the ith row and jth column of matrix A.</li>
<li>A vector with ‘n’ rows is referred to as an ‘n’-dimensional vector.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>refers to the element in the ith row of the vector.</li>
<li>In general, all our vectors and matrices will be 1-indexed. Note that for some programming languages, the arrays are 0-indexed.</li>
<li>Matrices are usually denoted by uppercase names while vectors are lowercase.</li>
<li>“Scalar” means that an object is a single value, not a vector or matrix.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">\mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span> refers to the set of scalar real numbers.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\mathbb{R^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> refers to the set of n-dimensional vectors of real numbers.</li>
</ul>
<h3 id="addition-and-scalar-multiplication加法和标量乘法"><a class="markdownIt-Anchor" href="#addition-and-scalar-multiplication加法和标量乘法"></a> Addition and Scalar Multiplication（加法和标量乘法）</h3>
<p>就是矩阵的算术运算，请查阅线性代数知识。</p>
<h3 id="matrix-matrix-multiplication矩阵乘法"><a class="markdownIt-Anchor" href="#matrix-matrix-multiplication矩阵乘法"></a> Matrix-Matrix Multiplication（矩阵乘法）</h3>
<p>矩阵乘法,请参考线性代数；</p>
<h3 id="matrix-multiplication-properties"><a class="markdownIt-Anchor" href="#matrix-multiplication-properties"></a> Matrix Multiplication Properties</h3>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∗</mo><mi>B</mi><mi mathvariant="normal">≠</mi><mi>B</mi><mo>∗</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A*B \neq B*A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>A</mi><mo>∗</mo><mi>B</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>C</mi><mo>=</mo><mi>A</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>B</mi><mo>∗</mo><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(A*B)*C = A*(B*C)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></li>
<li>单位矩阵（identity matrix)<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>，左上到右下对角线为1其余为0的矩阵,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">‘</mi><mo>∗</mo><mi mathvariant="normal">‘</mi><mi>I</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">A`*`I=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord">‘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">‘</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span></li>
</ul>
<h3 id="inverse-and-transpose逆和转置"><a class="markdownIt-Anchor" href="#inverse-and-transpose逆和转置"></a> Inverse and Transpose（逆和转置）</h3>
<ul>
<li>逆矩阵，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi mathvariant="normal">‘</mi><mo>∗</mo><mi mathvariant="normal">‘</mi><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">A`*`A^{-1}=I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord">‘</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">‘</span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>，只有方阵矩阵存在逆矩阵</li>
<li>转置矩阵，即将矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup></mrow><annotation encoding="application/x-tex">90^o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span></span></span></span>顺时针旋转，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>A</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">A^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，存在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msubsup><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">A_{ij} = A_{ij}^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.236103em;vertical-align:-0.394772em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.394772em;"><span></span></span></span></span></span></span></span></span></span>;</li>
</ul>
]]></content>
      <categories>
        <category>machine-learning</category>
        <category>andrewNg</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习指南</title>
    <url>//posts/20210218-576e286f.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="学习之路"><a class="markdownIt-Anchor" href="#学习之路"></a> 学习之路</h1>
<h2 id="1基础"><a class="markdownIt-Anchor" href="#1基础"></a> 1：基础</h2>
<ol>
<li>
<p>英语</p>
<blockquote>
<p>大学英语4级</p>
</blockquote>
</li>
<li>
<p>高数（线性代数、微积分）</p>
<blockquote>
<p>关键概念经查阅能随时记忆起来</p>
</blockquote>
</li>
<li>
<p>编程</p>
</li>
<li>
<p>概率理论与统计学</p>
</li>
</ol>
<h2 id="2理论"><a class="markdownIt-Anchor" href="#2理论"></a> 2：理论</h2>
<ol>
<li>
<p>machine learning-Andrew Ng</p>
<ol>
<li>
<p><a href="https://pan.baidu.com/s/1gfzJlej#list/path=%2F">百度网盘</a></p>
</li>
<li>
<p><a href="https://www.coursera.org/learn/machine-learning">在线学习</a></p>
<blockquote>
<p>Coursera是一个非常知名的公开课网站，Andrew Ng讲授的的“machine learning”课程可以说是它的成名作</p>
</blockquote>
</li>
</ol>
</li>
<li>
<p>机器学习基石/技法-林轩田</p>
</li>
<li>
<p><a href="https://pan.baidu.com/s/17qGVLlChaK98-OVwSmHMng#list/path=%2F">百度网盘</a></p>
</li>
<li>
<p>统计学习方法-李航</p>
</li>
</ol>
<blockquote>
<p>介绍了统计机器学习的主要方法，主要是监督学习部分</p>
</blockquote>
<ol start="4">
<li>统计学习基础-Trevor Hastie</li>
</ol>
<blockquote>
<p>对当前较为流行的统计机器学习方法有较为全面的介绍</p>
</blockquote>
<ol start="5">
<li>机器学习-周志华</li>
</ol>
<blockquote>
<p>中文里最好的机器学习教科书</p>
</blockquote>
<ol start="6">
<li>DEEP LEARNING 深度学习</li>
</ol>
<blockquote>
<p>目前关于深度学习最全面的图书</p>
</blockquote>
<ol start="7">
<li>The element of statistical learning</li>
<li>算法导论</li>
</ol>
<h2 id="3实践"><a class="markdownIt-Anchor" href="#3实践"></a> 3.实践</h2>
<ol>
<li>机器学习实战</li>
</ol>
<blockquote>
<p>基于python对一些主要的机器学习算法进行了代码实现，一定要照着敲一遍</p>
</blockquote>
<ol start="2">
<li>
<p>利用Python进行数据分析</p>
<blockquote>
<p>numpy与pandas是python进行处理数据的两个关键库</p>
</blockquote>
</li>
<li>
<p>Python machine learning</p>
</li>
<li>
<p>cs231n（Convolutional Neural Networks for Visual Recognition）</p>
</li>
</ol>
<blockquote>
<p>做图像识别的</p>
</blockquote>
<ol start="5">
<li></li>
</ol>
<h2 id="4实战"><a class="markdownIt-Anchor" href="#4实战"></a> 4.实战</h2>
<ol>
<li><a href="https://www.kaggle.com/competitions">Competitions | Kaggle</a></li>
</ol>
<blockquote>
<p>一个机器学习竞赛网站</p>
</blockquote>
<ol start="2">
<li><a href="https://tianchi.aliyun.com/">阿里云天池</a></li>
<li><a href="https://js.dclab.run/v2/index.html">中国版kaggle</a></li>
<li>leetcode</li>
</ol>
<h2 id="5进阶"><a class="markdownIt-Anchor" href="#5进阶"></a> 5.进阶</h2>
<ol>
<li>模式分类 - Richard O. Duda</li>
<li>Pattern Recognition and Machine Learning -必读</li>
<li>机器学习 - Tom Mitchell</li>
<li>深度学习 - Ian Goodfellow</li>
<li>数据挖掘导论 - Pang-Ning Tan</li>
</ol>
<h1 id="推荐"><a class="markdownIt-Anchor" href="#推荐"></a> 推荐</h1>
<h2 id="1公开课"><a class="markdownIt-Anchor" href="#1公开课"></a> 1.公开课</h2>
<ol>
<li><a href="https://www.coursera.org/course/ml">AndrewNg在coursera伤的机器学习课程</a></li>
<li><a href="http://v.163.com/special/opencourse/machinelearning.html">AngrewNg在163上的机器学习视频</a></li>
<li><a href="https://www.coursera.org/course/pgm">Daphne Koller 图模型</a></li>
<li><a href="https://www.coursera.org/course/neuralnets">Geoffrey Hinton神经网络</a></li>
</ol>
<h2 id="2经典书籍"><a class="markdownIt-Anchor" href="#2经典书籍"></a> 2.经典书籍</h2>
<ol>
<li>Tom M.Mitchell. Machine Learning</li>
<li>Kevin P. Murphy. Machine Learning: A Probabilistic Perspective</li>
<li>Christopher M.Bishop. Pattern Recognition and Machine Learning</li>
<li>Trevor Hastie , Robert Tibshirani , Jerome Friedman. The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition</li>
<li>Richard O. Duda. Pattern Classification</li>
<li>李航，统计学习方法</li>
<li>David Barber ，Bayesian Reasoning and Machine Learning</li>
</ol>
]]></content>
      <categories>
        <category>machine-learning</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>js数结构</title>
    <url>//posts/20210414-83eb0930.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="dtree"><a class="markdownIt-Anchor" href="#dtree"></a> dtree</h2>
<h2 id="ztree"><a class="markdownIt-Anchor" href="#ztree"></a> ztree</h2>
]]></content>
      <categories>
        <category>language</category>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>计算机网络自顶向下方法</title>
    <url>//posts/20210414-76c02976.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="中文-v7-pdf"><a class="markdownIt-Anchor" href="#中文-v7-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/fa854888963643c18bce102a4d2dcabe.pdf">中文 v7 PDF</a></h1>
<h1 id="英文-v7-pdf"><a class="markdownIt-Anchor" href="#英文-v7-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/4dcb6404500b4881978510676f507390.pdf">英文 v7 PDF</a></h1>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>7层协议</title>
    <url>//posts/20210219-fde9e.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="7层协议简介"><a class="markdownIt-Anchor" href="#7层协议简介"></a> 7层协议简介</h2>
<p><img src="/assets/images/d63852c7f6014bc79ac0a1ebf21eac73.png" alt="d63852c7f6014bc79ac0a1ebf21eac73" /></p>
<h2 id="各层功能简介"><a class="markdownIt-Anchor" href="#各层功能简介"></a> 各层功能简介</h2>
<p><img src="/assets/images/7f37053f9384493983ce095476d3e75b.png" alt="7f37053f9384493983ce095476d3e75b" /></p>
<h2 id="协议组包与解包"><a class="markdownIt-Anchor" href="#协议组包与解包"></a> 协议组包与解包</h2>
<p><img src="/assets/images/40af9faba29a4c7589db37f4fefc1db8.jpg" alt="40af9faba29a4c7589db37f4fefc1db8" /></p>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>mac和ip地址的变更</title>
    <url>//posts/20210220-4a1ac349.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<ul>
<li>根据7层或4层网络模型，最底层是物理层（即第1层），最高层是应用层；</li>
<li>地址的变更是指设备在转发处理数据时是否对地址进行变更</li>
</ul>
<h2 id="在数据链路层及以下"><a class="markdownIt-Anchor" href="#在数据链路层及以下"></a> 在数据链路层及以下</h2>
<ol>
<li>MAC地址不会变更</li>
<li>IP地址不会变更
<ul>
<li>此时只是数据帧，比如以太网帧</li>
</ul>
</li>
</ol>
<h2 id="在网络层及以上"><a class="markdownIt-Anchor" href="#在网络层及以上"></a> 在网络层及以上</h2>
<ol>
<li>MAC地址会变更</li>
<li>IP地址有可能会变更，比如NAT（Network Address Translation，网络地址转换）</li>
</ol>
<blockquote>
<p>IP数据包经由路由转发的时候源IP，目的ip是否改变？</p>
<p>这是个搞网络的基础问题，答案是不能改变的，除非做了nat转换才能改变。否则，数据包在整个传输过程中，源IP和目的IP不会发生改变。</p>
<p>不过MAC地址是变化的，因为发送端开始不知道目的主机的MAC地址，所以每经过一个路由器，MAC地址都会发生变化。</p>
<p>目的MAC地址是如何得到的？</p>
<p>TCP/IP里面是用的ARP协议。比如新建了一个内网，如果一台机器A找机器B，封装Fram时（OSI的第二层用的数据格式），要封装对方的 MAC，开始时A不知道B的MAC，只知道IP，它就发一个ARP包，源IP是自己的，目的IP是B的，源MAC是自己的，目的MAC是广播的。然后这个ARP请求包在内网内被广播，当其他机器接到这个包时，用目的IP和自己的IP比较，不是的话就丢弃。是的话，B接到时，发现IP与自己的一样，就答应这个包的请求，把自己的MAC送给A。如果B是其他子网的机器，那么路由器会判断出B是其他子网，然后路由器把自己的MAC返回给A，A以后再给B发包时，目的MAC封装 的是路由器的。</p>
<p>路由转发过程：</p>
<p>当主机A发向主机B的数据流在网络层封装成IP数据包，IP数据包的首部包含了源地址和目标地址。主机A会用本机配置的24位IP网络掩码255.255.255.0与目标地址进行与运算，得出目标网络地址与本机的网络地址是不是在同一个网段中。如果不是将IP数据包转发到网关。</p>
<p>在发往网关前主机A还会通过ARP的请求获得默认网关的MAC地址。在主机A数据链路层IP数据包封装成以太网数据帧，然后才发住到网关……也就是路由器上的一个端口。</p>
<p>当网关路由器接收到以太网数据帧时，发现数据帧中的目标MAC地址是自己的某一个端口的物理地址，这时路由器会把以太网数据帧的封装去掉。路由器认为这个IP数据包是要通过自己进行转发，接着它就在匹配路由表。匹配到路由项后，它就将包发往下一条地址。</p>
<p>路由器转发数据包就是这样，所以它始终是不会改IP地址的。只会改MAC.</p>
<p>当有数据包传到路由器时，路由器首先将其的目的地址与路由表进行对比，如果是本地网络，将不会进行转发到外网络，而是直接转发给本地网内的目的主机；但是如果目的地址经路由表对比，发现不是在本网中，有nat就将改变源地址的IP（原源地址的Ip地址改为了路由器的IP地址），路由器将数据包转发到相应的端口，进行通信。</p>
<p>举个例子，如：A访问B：<br />
首先对比是否同一子网，如果是,检查ARP表,有B的MAC就直接发送,没有就发送ARP请求.如果否，发送到默认网关C，源IP为A，源MAC为A，目的IP为B，目的MAC地址为C，<br />
C接收到这个包，检查路由表，发送到下一跳D，源IP为A，源MAC为C，目的IP为B，目的MAC为D……<br />
如此循环,直到发送到B.</p>
</blockquote>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>dns</title>
    <url>//posts/20210219-82eddc41.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h1>
<h2 id="为什么需要dns解析域名为ip地址"><a class="markdownIt-Anchor" href="#为什么需要dns解析域名为ip地址"></a> 为什么需要DNS解析域名为IP地址</h2>
<p>网络通许是基于TCP/IP，IP不好记，域名可读性以及可记忆性更强，DNS就是将域名解析为实际IP</p>
<h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2>
<blockquote>
<p>DNS( Domain Name System)是“域名系统”的英文缩写<br />
用于TCP/IP网络，它所提供的服务是用来将主机名和域名转换为IP地址的工作;<br />
<img src="evernotecid://B62E03A7-9855-4E89-8AE8-17FEFD3A3510/appyinxiangcom/3147905/ENResource/p698" alt="64e9bda9af8a38340f2f9943b1f36945.jpeg" /></p>
</blockquote>
<h2 id="dns-体系架构"><a class="markdownIt-Anchor" href="#dns-体系架构"></a> DNS 体系架构</h2>
<h3 id="通信方式"><a class="markdownIt-Anchor" href="#通信方式"></a> 通信方式</h3>
<p>UDP，53端口</p>
<blockquote>
<p><a href="http://www.zhihu.com/question/22587247/answer/66417484">为什么域名根服务器只能有13台呢</a></p>
</blockquote>
<h3 id="工作过程"><a class="markdownIt-Anchor" href="#工作过程"></a> 工作过程</h3>
<p>当 DNS 客户机需要查询程序中使用的名称时，它会查询本地DNS 服务器来解析该名称。客户机发送的每条查询消息都包括3条信息，以指定服务器应回答的问题</p>
<ol>
<li>指定的 DNS 域名，表示为完全合格的域名 (FQDN)</li>
<li>指定的查询类型，它可根据类型指定资源记录，或作为查询操作的专门类型</li>
<li>DNS域名的指定类别</li>
</ol>
<h1 id="解析顺序"><a class="markdownIt-Anchor" href="#解析顺序"></a> 解析顺序</h1>
<ol>
<li>浏览器缓存<br />
当用户通过浏览器访问某域名时，浏览器首先会在自己的缓存中查找是否有该域名对应的IP地址（若曾经访问过该域名且没有清空缓存便存在）；</li>
<li>系统缓存<br />
　　当浏览器缓存中无域名对应IP则会自动检查用户计算机系统Hosts文件DNS缓存是否有该域名对应IP；</li>
<li>路由器缓存<br />
　　当浏览器及系统缓存中均无域名对应IP则进入路由器缓存中检查，以上三步均为客服端的DNS缓存；</li>
<li>ISP（互联网服务提供商）DNS缓存<br />
　　当在用户客服端查找不到域名对应IP地址，则将进入ISP DNS缓存中进行查询。比如你用的是电信的网络，则会进入电信的DNS缓存服务器中进行查找；</li>
<li>根域名服务器<br />
　　当以上均未完成，则进入根服务器进行查询。全球仅有13台根域名服务器，1个主根域名服务器，其余12为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（<a href="http://xn--bvs.com">如.com</a>）服务器IP告诉本地DNS服务器；</li>
<li>顶级域名服务器<br />
　　顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的IP地址告诉本地DNS服务器；</li>
<li>主域名服务器<br />
　　主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录；</li>
<li>保存结果至缓存<br />
　　本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时将该结果反馈给客户端，客户端通过这个IP地址与web服务器建立链接。</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>链路层</title>
    <url>//posts/20210220-bd608ff7.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="以太网和ieee-802封装"><a class="markdownIt-Anchor" href="#以太网和ieee-802封装"></a> 以太网和IEEE 802封装</h2>
<h3 id="以太网"><a class="markdownIt-Anchor" href="#以太网"></a> 以太网</h3>
<blockquote>
<p>一般是指数字设备公司（Digital Equipment Corp.）、英特尔公司（Intel Corp.）和Xerox公司在1982年联合公布的一个标准</p>
</blockquote>
<blockquote>
<p>采用一种称作CSMA/CD的媒体接入方法，其意思是带冲突检测的载波侦听多路接入（Carrier Sense, Multiple Access with Collision Detection）。它的速率为10 Mb/s，地址为48 bit。</p>
</blockquote>
<h3 id="ieee-802封装"><a class="markdownIt-Anchor" href="#ieee-802封装"></a> IEEE 802封装</h3>
<blockquote>
<p>IEEE（电子电气工程师协会）802委员会发布</p>
</blockquote>
<ul>
<li>802.3针对整个CSMA/CD网络</li>
<li>802.4针对令牌总线网络</li>
<li>802.5针对令牌环网络</li>
</ul>
<blockquote>
<p>这三者的共同特性由802.2标准来定义，那就是802网络共有的逻辑链路控制（LLC）</p>
</blockquote>
<blockquote>
<p>802.2和802.3定义了一个与以太网不同的帧格式</p>
</blockquote>
<h3 id="格式区别"><a class="markdownIt-Anchor" href="#格式区别"></a> 格式区别</h3>
<p><img src="/assets/images/82714dc4dab047048cc0d6623bbe2c73.jpg" alt="82714dc4dab047048cc0d6623bbe2c73" /></p>
<ol>
<li>
<p>字段区别</p>
<ol>
<li>802标准
<ul>
<li>长度字段：指它后续数据的字节长度，但不包括CRC检验码</li>
<li>3字节的802.2LLC
<ul>
<li>1个字节的目的服务访问点（Destination Service Access Point, DSAP），值设为0xaa</li>
<li>1个字节的源服务访问点（Source Service Access Point, SSAP），值设为0xaa</li>
<li>1个字节的ctrl字段，值设为3</li>
</ul>
</li>
<li>5字节的802.2SNAP
<ul>
<li>3个字节org code值设为0</li>
<li>2个字节的类型</li>
</ul>
</li>
</ul>
</li>
<li>以太网
<ul>
<li>类型字段：定义了后续数据的类型</li>
</ul>
</li>
</ol>
</li>
<li>
<p>CRC字段<br />
用于帧内后续字节差错的循环冗余码检验（检验和）（它也被称为FCS或帧检验序列）</p>
</li>
<li>
<p>最小长度</p>
<ol>
<li>802.3规定数据部分必须至少为38字节</li>
<li>以太网要求最少要有46字节</li>
</ol>
<blockquote>
<p>必须在不足的空间插入填充（pad）字节</p>
</blockquote>
</li>
</ol>
<h2 id="以太网帧格式ieee8023"><a class="markdownIt-Anchor" href="#以太网帧格式ieee8023"></a> 以太网帧格式–IEEE802.3</h2>
<blockquote>
<p>按照顺序</p>
</blockquote>
<p><img src="/assets/images/1e881edeb5714d4f9151d8c19463bc5f.jpg" alt="1e881edeb5714d4f9151d8c19463bc5f" /></p>
<blockquote>
<p>LSB（ Last（Least） Significant Bit，最低有效位，或低位前导）</p>
</blockquote>
<blockquote>
<p>MSB（Most Significant Bit，最高有效位）</p>
</blockquote>
<ol>
<li>
<p>前导码（preamble）<strong>一般不计入帧头部</strong></p>
<ul>
<li>让接收设备能够跟踪到来的比特流</li>
<li>7字节，交替的0和1，即7个1字节的‘10101010’，</li>
<li>数据是从低比特开始传送，因此在代码中为方便阅读的前导码数值为0x55555555555555</li>
<li><img src="evernotecid://B62E03A7-9855-4E89-8AE8-17FEFD3A3510/appyinxiangcom/3147905/ENResource/p573" alt="2d7ecb513db01df9a9de1950afc3fce4.png" /></li>
</ul>
</li>
<li>
<p>帧开始符（SFD，Start frame delimiter）</p>
<ul>
<li>表示帧数据的开始</li>
<li>1字节，值为‘10101011’，最后两个1让接收方能够识别中间的 0 和 1 交替模式，进而同步并检查到数据开头</li>
<li>数据是从低比特开始传送，所以数值为0xd5</li>
</ul>
<blockquote>
<p>‘10101011’ 传送为 ‘11010101’</p>
</blockquote>
</li>
<li>
<p>目的地址（DA,Destination Address）</p>
<ul>
<li>LSB优先</li>
<li>6B</li>
<li>不是目的主机的MAC地址，而下一跳的MAC地址</li>
<li>回程的数据的目的地址不是源主机的私有IP地址，而经过转换的公网地址，转换的对应关系在NAT设备上有转换表，回程数据查表后改变目的IP地址，发给目的主机</li>
</ul>
</li>
<li>
<p>原地址（SA）</p>
<ul>
<li>LSB优先</li>
<li>6B</li>
<li>当前设备的MAC地址</li>
</ul>
</li>
<li>
<p>长度/类型</p>
<ul>
<li>当有效数据量（Length）小于46字节时需要用0对数据进行填充，保证数据和填充字段总和不低于46字节，注意，填充0并不会改变Length字段值。</li>
</ul>
</li>
<li>
<p>数据</p>
</li>
<li>
<p>帧校验序列（FCS）</p>
<ul>
<li>存储 CRC(Cyclic Redundancy Check，循环冗余校验)</li>
</ul>
</li>
<li>
<p>帧间距 <strong>一般不计入帧头部</strong></p>
<ul>
<li>当一个帧发送出去之后，发送方在下次发送帧之前，需要再发送至少12个octet的空闲线路状态码</li>
</ul>
</li>
</ol>
<h2 id="尾部封装"><a class="markdownIt-Anchor" href="#尾部封装"></a> 尾部封装</h2>
<blockquote>
<p>RFC 893[Leffler and Karels 1984]描述了另一种用于以太网的封装格式，称作尾部封装（trailer encapsulation）。这是一个早期BSD系统在DEC VA X机上运行时的试验格式，它通过调整IP数据报中字段的次序来提高性能。在以太网数据帧中，开始的那部分是变长的字段（IP首部和TCP首部）。把它们移到尾部（在CRC之前），这样当把数据复制到内核时，就可以把数据帧中的数据部分映射到一个硬件页面，节省内存到内存的复制过程。TCP数据报的长度是512字节的整数倍，正好可以用内核中的页表来处理。两台主机通过协商使用ARP扩展协议对数据帧进行尾部封装。这些数据帧需定义不同的以太网帧类型值。</p>
</blockquote>
<p>现在，尾部封装已遭到反对，因此我们不对它举任何例子。有兴趣的读者请参阅RFC 893以及文献[Leffler et al.1989]的11.8节。</p>
<h2 id="slip串行线路ip"><a class="markdownIt-Anchor" href="#slip串行线路ip"></a> SLIP：串行线路IP</h2>
<p>全称是Serial Line IP,它是一种在串行线路上对IP数据报进行封装的简单形式;</p>
<blockquote>
<p>在RFC 1055[Romkey 1988]中有详细描述。</p>
</blockquote>
<blockquote>
<p>SLIP适用于家庭中每台计算机几乎都有的RS-232串行端口和高速调制解调器接入Internet</p>
</blockquote>
<h3 id="帧格式"><a class="markdownIt-Anchor" href="#帧格式"></a> 帧格式</h3>
<ol>
<li>IP数据报以一个称作END（0xc0）的特殊字符结束。同时，为了防止数据报到来之前的线路噪声被当成数据报内容，大多数实现在数据报的开始处也传一个END字符</li>
</ol>
<blockquote>
<p>如果有线路噪声，那么END字符将结束这份错误的报文。这样当前的报文得以正确地传输，而前一个错误报文交给上层后，会发现其内容毫无意义而被丢弃</p>
</blockquote>
<ol start="2">
<li>
<p>如果IP报文中某个字符为END，那么就要连续传输两个字节0xdb和0xdc来取代它。0xdb这个特殊字符被称作SLIP的ESC字符，但是它的值与ASCII码的ESC字符（0x1b）不同</p>
</li>
<li>
<p>如果IP报文中某个字符为SLIP的ESC字符，那么就要连续传输两个字节0xdb和0xdd来取代它</p>
</li>
</ol>
<p><img src="/assets/images/1c2539ea0f7c4d41a1802a9a9554a407.jpg" alt="1c2539ea0f7c4d41a1802a9a9554a407" /></p>
<h3 id="缺陷"><a class="markdownIt-Anchor" href="#缺陷"></a> 缺陷</h3>
<ol>
<li>
<p>每一端必须知道对方的IP地址。没有办法把本端的IP地址通知给另一端。</p>
</li>
<li>
<p>数据帧中没有类型字段（类似于以太网中的类型字段）。如果一条串行线路用于SLIP，那么它不能同时使用其他协议。</p>
</li>
<li>
<p>SLIP没有在数据帧中加上检验和（类似于以太网中的CRC字段）。如果SLIP传输的报文被线路噪声影响而发生错误，只能通过上层协议或新型的调制解调器检测并纠正错误报</p>
</li>
<li>
<p>性能</p>
<ol>
<li>
<p>速率通常较低（19200 b/s或更低）</p>
</li>
<li>
<p>通信经常是交互式的（如Telnet和Rlogin，二者都使用TCP），因此在SLIP线路上有许多小的TCP分组进行交换</p>
<blockquote>
<p>为了传送1个字节的数据需要20个字节的IP首部和20个字节的TCP首部，总数超过40个字节,比如Rlogin命令</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<h2 id="cslip压缩的slip"><a class="markdownIt-Anchor" href="#cslip压缩的slip"></a> CSLIP：压缩的SLIP</h2>
<blockquote>
<p>在RFC 1144[Jacobson 1990a]中被详细描述</p>
</blockquote>
<p>为了解决SLIP的性能问题；</p>
<p>一般能把上面的40个字节压缩到3或5个字节。它能在CSLIP的每一端维持多达16个TCP连接，并且知道其中每个连接的首部中的某些字段一般不会发生变化。对于那些发生变化的字段，大多数只是一些小的数字和的改变。</p>
<h2 id="ppp点对点协议"><a class="markdownIt-Anchor" href="#ppp点对点协议"></a> PPP：点对点协议</h2>
<h3 id="内容"><a class="markdownIt-Anchor" href="#内容"></a> 内容</h3>
<ol>
<li>
<p>在串行链路上封装IP数据报的方法。PPP既支持数据为8位和无奇偶检验的异步模式（如大多数计算机上都普遍存在的串行接口），还支持面向比特的同步链接。</p>
</li>
<li>
<p>建立、配置及测试数据链路的链路控制协议（LCP：Link Control Protocol）。它允许通信双方进行协商，以确定不同的选项。</p>
</li>
<li>
<p>针对不同网络层协议的网络控制协议（NCP：Network Control Protocol）体系。</p>
<blockquote>
<p>当前RFC定义的网络层有IP、OSI网络层、DECnet以及AppleTalk</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>RFC 1548[Simpson 1993]描述了报文封装的方法和链路控制协议。<br />
RFC 1332[McGregor 1992]描述了针对IP的网络控制协议</p>
</blockquote>
<h3 id="数据帧格式"><a class="markdownIt-Anchor" href="#数据帧格式"></a> 数据帧格式</h3>
<p><img src="/assets/images/eda7c990a4b642c0afd76a38d6a71084.jpg" alt="eda7c990a4b642c0afd76a38d6a71084" /></p>
<ol>
<li>每一帧都以标志字符0x7e开始和结束</li>
<li>紧接着是一个地址字节，值始终是0xff</li>
<li>然后是一个值为0x03的控制字节</li>
<li>接下来是协议字段，类似于以太网中类型字段的功能。当它的值为0x0021时，表示信息字段是一个IP数据报；值为0xc021时，表示信息字段是链路控制数据；值为0x8021时，表示信息字段是网络控制数据</li>
<li>CRC字段（或FCS，帧检验序列）是一个循环冗余检验码，以检测数据帧中的错误</li>
</ol>
<h3 id="字符转义"><a class="markdownIt-Anchor" href="#字符转义"></a> 字符转义</h3>
<blockquote>
<p>比如标志字符的值0x7e</p>
</blockquote>
<ol>
<li>
<p>在同步链路中，该过程是通过一种称作比特填充(bit stuffing)的硬件技术来完成的[Tanenbaum 1989]。</p>
</li>
<li>
<p>在异步链路中，特殊字符0x7d用作转义字符。当它出现在PPP数据帧中时，那么紧接着的字符的第6个比特要取其补码，具体实现过程如下：</p>
<ol>
<li>当遇到字符0x7e时，需连续传送两个字符：0x7d和0x5e，以实现标志字符的转义。</li>
<li>当遇到转义字符0x7d时，需连续传送两个字符：0x7d和0x5d，以实现转义字符的转义。</li>
<li>默认情况下，如果字符的值小于0x20（比如，一个ASCII控制字符），一般都要进行转义。例如，遇到字符0x01时需连续传送0x7d和0x21两个字符（这时，第6个比特取补码后变为1，而前面两种情况均把它变为0）。</li>
</ol>
<blockquote>
<p>这样做的原因是防止它们出现在双方主机的串行接口驱动程序或调制解调器中，因为有时它们会把这些控制字符解释成特殊的含义。<br />
另一种可能是用链路控制协议来指定是否需要对这32个字符中的某一些值进行转义。默认情况下是对所有的32个字符都进行转义</p>
</blockquote>
</li>
</ol>
<h3 id="相比slip优点"><a class="markdownIt-Anchor" href="#相比slip优点"></a> 相比SLIP优点</h3>
<ol>
<li>PPP支持在单根串行线路上运行多种协议，不只是IP协议；</li>
<li>每一帧都有循环冗余检验；</li>
<li>通信双方可以进行IP地址的动态协商(使用IP网络控制协议)；</li>
<li>与CSLIP类似，对TCP和IP报文首部进行压缩；</li>
<li>链路控制协议可以对多个数据链路选项进行设置。</li>
</ol>
<blockquote>
<p>为这些优点付出的代价是在每一帧的首部增加3个字节，当建立链路时要发送几帧协商数据，以及更为复杂的实现。</p>
</blockquote>
<h2 id="环回接口loopback-interface"><a class="markdownIt-Anchor" href="#环回接口loopback-interface"></a> 环回接口（Loopback Interface）</h2>
<p>允许运行在同一台主机上的客户程序和服务器程序通过TCP/IP进行通信；<br />
A类网络号127就是为环回接口预留的；<br />
一个传给环回接口的IP数据报不能在任何网络上出现；</p>
<h3 id="处理流程"><a class="markdownIt-Anchor" href="#处理流程"></a> 处理流程</h3>
<p><img src="/assets/images/7868b46843c34d9588b81d3ad2345815.jpg" alt="7868b46843c34d9588b81d3ad2345815" /></p>
<p>关键点：</p>
<ol>
<li>任何传给该主机IP地址的数据均送到环回接口。</li>
<li>传给环回地址（一般是127.0.0.1）的任何数据（交给环回驱动程序）均作为IP输入。</li>
<li>传给广播地址或多播地址的数据报复制一份传给环回接口，然后送到以太网上。这是因为广播传送和多播传送的定义包含主机本身。</li>
</ol>
<h2 id="最大传输单元mtu"><a class="markdownIt-Anchor" href="#最大传输单元mtu"></a> 最大传输单元（MTU）</h2>
<blockquote>
<p>超过时，数据需要分片（fragmentation）</p>
</blockquote>
<p><img src="/assets/images/ba0a46fe385945e8a91a28be3e94998c.jpg" alt="ba0a46fe385945e8a91a28be3e94998c" /></p>
<h2 id="路径mtu"><a class="markdownIt-Anchor" href="#路径mtu"></a> 路径MTU</h2>
<p>两台通信主机路径中的最小MTU，被称作路径MTU；</p>
<ul>
<li>两台主机之间的路径MTU不一定是个常数，它取决于当时所选择的路由。</li>
<li>选路不一定是对称的（从A到B的路由可能与从B到A的路由不同），因此路径MTU在两个方向上不一定是一致的</li>
</ul>
<blockquote>
<p>RFC 1191[Mogul and Deering 1990]描述了路径MTU的发现机制</p>
</blockquote>
<h2 id="串行线路吞吐量计算"><a class="markdownIt-Anchor" href="#串行线路吞吐量计算"></a> 串行线路吞吐量计算</h2>
<p>略</p>
<h2 id="答疑"><a class="markdownIt-Anchor" href="#答疑"></a> 答疑</h2>
<h3 id="以太网数据帧最小-大长度"><a class="markdownIt-Anchor" href="#以太网数据帧最小-大长度"></a> 以太网数据帧最小、大长度</h3>
<p><em><strong>关于最小发送间隙和最小帧长的规定也是为了避免冲突</strong></em></p>
<ol>
<li>
<p>前提条件<br />
CSMA/CD冲突避免的方法：先听后发、边听边发、随机延迟后重发。一旦发生冲突，必须让每台主机都能检测到。</p>
</li>
<li>
<p>案例分析<br />
考虑如下的情况，主机发送的帧很小，而两台冲突主机相距很远。在主机A发送的帧传输到B的前一刻，B开始发送帧。这样，当A的帧到达B时，B检测到冲突，于是发送冲突信号。假如在B的冲突信号传输到A之前，A的帧已经发送完毕，那么A将检测不到冲突而误认为已发送成功。由于信号传播是有时延的，因此检测冲突也需要一定的时间。这也是为什么必须有个最小帧长的限制</p>
</li>
<li>
<p>解决<br />
按照标准，10Mbps以太网采用中继器时，连接的最大长度是2500米，最多经过4个中继器，因此规定对10Mbps以太网一帧的最小发送时间为51.2微秒。这段时间所能传输的数据为512位，因此也称该时间为512位时。这个时间定义为以太网时隙，或冲突时槽。512位＝64字节，这就是<strong>以太网帧最小64字节的原因</strong></p>
<blockquote>
<p>512位时是主机捕获信道的时间。如果某主机发送一个帧的64字节仍无冲突，以后也就不会再发生冲突了，称此主机捕获了信道</p>
</blockquote>
<blockquote>
<p><code>64-（6+6+2+4）=64-18=46</code>，所以<strong>IP数据包长度最小为46</strong></p>
</blockquote>
</li>
<li>
<p>结论</p>
<p>由于信道是所有主机共享的，如果数据帧太长就会出现有的主机长时间不能发送数据，而且有的发送数据可能超出接收端的缓冲区大小，造成缓冲溢出。为避免单一主机占用信道时间过长，规定了<strong>以太网帧的最大帧数据长为1500</strong></p>
</li>
</ol>
<blockquote>
<p>100Mbps以太网的时隙仍为512位时，以太网规定一帧的最小发送时间必须为5.12μs</p>
</blockquote>
<h3 id="抓包得到的最大帧是1514字节不是1526"><a class="markdownIt-Anchor" href="#抓包得到的最大帧是1514字节不是1526"></a> 抓包得到的最大帧是1514字节，不是1526</h3>
<p>当数据帧到达网卡时，在物理层上网卡要先去掉<code>前导同步码</code>和<code>帧开始定界符</code>，然后对帧进行<code>CRC检验</code>，如果帧校验和错，就丢弃此帧。如果校验和正确，就判断帧的目的硬件地址是否符合自己的接收条件（目的地址是自己的物理硬件地址、广播地址、可接收的多播硬件地址等），如果符合，就将帧交“设备驱动程序”做进一步处理。这时我们的抓包软件才能抓到数据去掉前导同步码、帧开始分界符、FCS之外的数据，其最大值是<code>6＋6＋2＋1500＝1514</code>。</p>
<h3 id="目的-源地址"><a class="markdownIt-Anchor" href="#目的-源地址"></a> 目的、源地址</h3>
<p>每经过一台路由器，数据帧的源、目IP不会改变，但<strong>源、目MAC都会变化</strong></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mrow><mi>B</mi><mi>o</mi><mi>t</mi><mi>h</mi><mtext> </mtext><mi>S</mi><mi mathvariant="normal">.</mi><mi>A</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mi>D</mi><mi mathvariant="normal">.</mi><mi>A</mi><mtext> </mtext><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi></mrow></mstyle></mrow><annotation encoding="application/x-tex">\color{red}{Both\ S.A\ and\ D.A\ change}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord" style="color:red;"><span class="mord mathdefault" style="margin-right:0.05017em;color:red;">B</span><span class="mord mathdefault" style="color:red;">o</span><span class="mord mathdefault" style="color:red;">t</span><span class="mord mathdefault" style="color:red;">h</span><span class="mspace" style="color:red;"><span style="color:red;"> </span></span><span class="mord mathdefault" style="margin-right:0.05764em;color:red;">S</span><span class="mord" style="color:red;">.</span><span class="mord mathdefault" style="color:red;">A</span><span class="mspace" style="color:red;"><span style="color:red;"> </span></span><span class="mord mathdefault" style="color:red;">a</span><span class="mord mathdefault" style="color:red;">n</span><span class="mord mathdefault" style="color:red;">d</span><span class="mspace" style="color:red;"><span style="color:red;"> </span></span><span class="mord mathdefault" style="margin-right:0.02778em;color:red;">D</span><span class="mord" style="color:red;">.</span><span class="mord mathdefault" style="color:red;">A</span><span class="mspace" style="color:red;"><span style="color:red;"> </span></span><span class="mord mathdefault" style="color:red;">c</span><span class="mord mathdefault" style="color:red;">h</span><span class="mord mathdefault" style="color:red;">a</span><span class="mord mathdefault" style="color:red;">n</span><span class="mord mathdefault" style="margin-right:0.03588em;color:red;">g</span><span class="mord mathdefault" style="color:red;">e</span></span></span></span></span>，所有设备都只知道与自己直连设备的MAC地址。</p>
<h3 id="链路层如何知道目标mac地址"><a class="markdownIt-Anchor" href="#链路层如何知道目标mac地址"></a> 链路层如何知道目标mac地址</h3>
<blockquote>
<p>假设网络拓扑结构为：A-R1-R2-B</p>
</blockquote>
<blockquote>
<p>目的MAC为广播MAC(FF:FF:FF:FF:FF:FF)</p>
</blockquote>
<pre class="mermaid">graph TD
A_find_in_same_segment[主机A发现目标IP是否在统一网段] -->|不在| A2R(需要经过路由器转发)
A2R --> A_get_R{查路由表获得R1的IP地址及出接口?}
A_get_R --> |N| A_arp_request[发起ARP请求,目的IP为R1,目的MAC为广播MAC,源IP和源MAC为主机A网卡的IP和MAC]
A_arp_request --> A_arp_response[R1收到ARP请求,将主机A的IP和MAC加入自己的ARP缓存表,用自身IP和MAC响应主机A的ARP请求]
A_arp_response --> A_save_arp[主机A收到ARP响应,将R1的IP和MAC加入自己的ARP缓存表]
A_save_arp --> A2R_data[用自身IP和MAC为源,主机B的IP和R1的MAC为目的,封装数据帧,并将其转发给R1,此时此时数据帧源IP为主机A,目的IP为主机B,源MAC为主机A,目的MAC为R1]
A[模块A] -->|A1| B(模块B)
B --> C{判断条件C}
C -->|条件C1| D[模块D]
C -->|条件C2| E[模块E]
C -->|条件C3| F[模块F]</pre>
<p>用自身IP和MAC为源,主机B的IP和R1的MAC为目的,封装数据帧,并将其转发给R1(此时数据帧源IP为主机A,目的IP为主机B,源MAC为主机A，目的MAC为R1)</p>
<pre class="mermaid">sequenceDiagram
A->>A: 目标IP是否在同一网段？
A-->>A: 不在（需要经过路由器转发），
B-->>A: 已收到消息</pre>]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>mac地址</title>
    <url>//posts/20210219-2449ef86.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="mac地址"><a class="markdownIt-Anchor" href="#mac地址"></a> MAC地址</h2>
<blockquote>
<p>Media Access Control， 介质访问控制）地址</p>
</blockquote>
<ol>
<li>
<p>组成（48bit-&gt;6Byte)</p>
<ul>
<li>前24位叫做组织唯一标志符（OUI，Organizationally Unique Identifier），是由IEEE的注册管理机构给不同厂家分配的代码，区分了不同的厂家</li>
<li>后24位是由厂家自己分配的，称为扩展标识符（UAA，Universally Administered Address),同一个厂家生产的网卡中MAC地址后24位是不同的</li>
</ul>
</li>
<li>
<p>功能</p>
<ul>
<li>对应于OSI参考模型的第二层数据链路层</li>
</ul>
<blockquote>
<p>工作在数据链路层的交换机维护着计算机MAC地址和自身端口的数据库，交换机根据收到的数据帧中的“目的MAC地址”字段来转发数据帧</p>
</blockquote>
<ul>
<li>
<p>MAC地址用于在网络中唯一标示一个网卡</p>
<blockquote>
<p>一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>唯一性</p>
</li>
</ol>
<ul>
<li>客观上是全球唯一的，因为是厂家在生产网卡时直接烧写；</li>
<li>理论上可以修改，但需要保证局域网内唯一
<blockquote>
<p>同一个局域网里如果有两个phy芯片的mac地址一样，系统会报出mac地址冲突的异常，此时两个phy都不能正常传输数据<br />
好像是交换机有个位标识，标识这是本地局域的，还是全球唯一的</p>
</blockquote>
</li>
</ul>
<h2 id="和ip地址区别"><a class="markdownIt-Anchor" href="#和ip地址区别"></a> 和IP地址区别</h2>
<ol>
<li>分配不同：IP是基于网络拓扑结构，MAC是基于制造商；</li>
<li>长度不同：IP是32为，MAC是48位</li>
<li>协议层不同：IP是网络层，MAC是数据链路层</li>
</ol>
<h2 id="有了mac为什么还需要ip"><a class="markdownIt-Anchor" href="#有了mac为什么还需要ip"></a> 有了MAC为什么还需要IP</h2>
<ol>
<li>
<p>历史角度<br />
早期的以太网只有交换机，没有路由器，以太网内通过MAC地址通信</p>
</li>
<li>
<p>MAC本身<br />
MAC地址是制造商提供，只能表示网卡，并不表示用户在网络中的位置；</p>
</li>
<li>
<p>局域网角度<br />
局域网下IP是动态分配的，所以与设备不总是对应（比如设备下线之后，该IP会分配到其他设备上）的，而MAC地址和设备是一一对应的；</p>
</li>
<li>
<p>如果不使用IP地址，那么就需要维护一个极其庞大的MAC地址表，在查找目的机器的时候，就需要向全世界发送数据包，可想而知会造成多大的网络流量</p>
</li>
</ol>
<h2 id="有了ip为什么还需要mac"><a class="markdownIt-Anchor" href="#有了ip为什么还需要mac"></a> 有了IP为什么还需要MAC</h2>
<ol>
<li>
<p>信息传递<br />
信息传递时候，需要知道的其实是两个地址：终点地址、下一跳的地址。IP地址本质上是终点地址，它在跳过路由器的时候不会改变，而MAC地址则是下一跳的地址，每跳过一次路由器都会改变。这时MAC地址起到了<strong>记录下一跳的信息的作用</strong>。</p>
</li>
<li>
<p>网络体系的分层<br />
MAC地址和IP地址两个地址，用于分别表示物理地址和逻辑地址是有好处的。这样分层可以使网络层与数据链路层的协议更灵活地替换</p>
</li>
<li>
<p>历史原因<br />
早期的以太网只有集线器，没有交换机，所以发出去的包能被以太网内的所有机器监听到，因此要附带上MAC地址，每个机器只需要接受与自己MAC地址相匹配的包</p>
</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>网络设备</title>
    <url>//posts/20210220-de3e3a54.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="路由器"><a class="markdownIt-Anchor" href="#路由器"></a> 路由器</h2>
<ul>
<li>工作在网络层</li>
<li>根据IP地址进行数据转发</li>
<li>强大的路由功能</li>
</ul>
<h2 id="交换机"><a class="markdownIt-Anchor" href="#交换机"></a> 交换机</h2>
<h3 id="2层交换机"><a class="markdownIt-Anchor" href="#2层交换机"></a> 2层交换机</h3>
<ul>
<li>工作在数据链路层</li>
<li>根据MAC地址进行数据转发，即MAC地址表（MAC地址与端口的对应关系）</li>
<li></li>
</ul>
<h3 id="3层交换机"><a class="markdownIt-Anchor" href="#3层交换机"></a> 3层交换机</h3>
<ul>
<li>
<p>工作在数据链路层和网络层</p>
</li>
<li>
<p>三层交换技术就是将路由技术与交换技术合二为一的技术。</p>
<blockquote>
<p>在对第一个数据流进行路由后，它将会产生一个MAC地址与IP地址的映射表，当同样的数据流再次通过时，将根据此表直接从二层通过而不是再次路由，从而消除了路由器进行路由选择而造成网络的延迟，提高了数据包转发的效率。</p>
</blockquote>
</li>
<li>
<p><strong>最重要的目的是加快大型局域网内部的数据交换</strong></p>
</li>
</ul>
<h2 id="路由器与交换机的区别"><a class="markdownIt-Anchor" href="#路由器与交换机的区别"></a> 路由器与交换机的区别</h2>
<ol>
<li>
<p>回路</p>
<ol>
<li>路由器，路由器之间可以有多条通路来平衡负载，提高可靠性</li>
<li>交换机，不允许存在，一旦存在回路，必须启动生成树算法，阻塞掉产生回路的端口</li>
</ol>
</li>
<li>
<p>负载集中</p>
<ol>
<li>路由器，OSPF路由协议算法不但能产生多条路由，而且能为不同的网络应用选择各自不同的最佳路由</li>
<li>交换机，只能有一条通路</li>
</ol>
</li>
<li>
<p>广播控制</p>
<ol>
<li>路由器，可以隔离广播域，广播报文不能通过路由器继续进行广播</li>
<li>交换机，只能缩小冲突域，而不能缩小广播域</li>
</ol>
</li>
<li>
<p>子网划分</p>
<ol>
<li>路由器，很方便，而且主要功能就是用于连接不同的网络</li>
<li>交换机，只能识别MAC地址</li>
</ol>
</li>
<li>
<p>保密<br />
路由器比交换机更方便对数据过滤，应为路由器工作在更高一层的网络层</p>
</li>
<li>
<p>功能</p>
<ol>
<li>路由器，功能强大，使用范围广；</li>
<li>交换机，单一；</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>socket</title>
    <url>//posts/20210220-5e568bb.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="流程理解"><a class="markdownIt-Anchor" href="#流程理解"></a> 流程理解</h2>
<pre class="mermaid">sequenceDiagram
Server->>Server: create
Server->>Server: bind
Server->>Server: listen
Client->>Client: create
Client->>Server: connect
Server->>Server: accept
Client->>Server: write
Server->>Server: read
Server-->>Client: write
Client->>Client: read
Server->>Server: close
Client->>Client: close</pre>
<h3 id="create"><a class="markdownIt-Anchor" href="#create"></a> create</h3>
<p>创建一个用于监听的socket，这个socket不负责连接建立后的数据交互，只负责端口的监听</p>
<h3 id="bind"><a class="markdownIt-Anchor" href="#bind"></a> bind</h3>
<p>为socket关联地址和端口，可以不使用；</p>
<h3 id="listen"><a class="markdownIt-Anchor" href="#listen"></a> listen</h3>
<p>为端口连接创建了一个队列，当系统检测到带端口有连接请求（3次握手后）时，将该请求放入队列</p>
<h3 id="accept"><a class="markdownIt-Anchor" href="#accept"></a> accept</h3>
<p>开始准备接受连接<code>conn, addr = socket.accept()</code><br />
accept就是不断轮训着去队列中取出连接并建立真正的连接，此时listen继续去监听端口</p>
<blockquote>
<p>accept就是不断轮训着去队列中取出连接并建立真正的连接，此时listen继续去监听端口</p>
</blockquote>
<h2 id="accept返回的socket描述符的端口和listen描述符端口是一样的吗"><a class="markdownIt-Anchor" href="#accept返回的socket描述符的端口和listen描述符端口是一样的吗"></a> <code>accept()</code>返回的socket描述符的端口和listen描述符端口是一样的吗？</h2>
<p>一样</p>
<ul>
<li>一个socket是由一个五元组来唯一标示的，即(协议，server_ip, server_port, client_ip, client_port)。</li>
<li>只要该五元组中任何一个值不同，则其代表的socket就不同。<br />
(忽略协议的区别，在同一协议的基础上)服务器端的listen socket的端口可以看成<code>(server_ip, server_port, *, *)</code>,其中<code>*</code>是通配符，它跟任何一个client_ip, client_port值都不同，可以简单看成是（0,0）对，当然实现不是这样的。这样在服务器端accept之后，返回的连接socket的四元组就是(server_ip, server_port, client_ip, client_port)，这里的client_ip，client_port因连接的客户端的不同而不同。<br />
所以<strong>accept返回的socket和listen socket是不同的</strong><br />
不同之处就在于四元组中的客户端ip和port，而服务器端的server_ip和server_port还是相同的，也就是<code>accpet()</code>函数返回的新的socket描述符的端口和listen端口是一样的。可以使用<code>getsockname()</code>函数来查看它们之间的不同。</li>
</ul>
<h2 id="accept是又产生一个socket端口吗"><a class="markdownIt-Anchor" href="#accept是又产生一个socket端口吗"></a> <code>accept</code>是又产生一个Socket端口吗?</h2>
<p>如果一个程序创建了一个socket，并让其监听80端口，其实是向TCP/IP协议栈声明了其对80端口的占有。以后，所有目标是80端口的TCP数据包都会转发给该程序（这里的程序，因为使用的是Socket编程接口，所以首先由Socket层来处理）。所谓accept函数，其实抽象的是TCP的连接建立过程。accept函数返回的新socket其实指代的是本次创建的连接，而一个连接是包括两部分信息的，一个是源IP和源端口，另一个是宿IP和宿端口。所以，accept可以产生多个不同的socket，而这些socket里包含的宿IP和宿端口是不变的，变化的只是源IP和源端口。这样的话，这些socket宿端口就可以都是80，而Socket层还是能根据源/宿对来准确地分辨出IP包和socket的归属关系，从而完成对TCP/IP协议的操作封装！</p>
<h2 id="单机最大的tcp连接数及其修改"><a class="markdownIt-Anchor" href="#单机最大的tcp连接数及其修改"></a> 单机最大的TCP连接数及其修改</h2>
<blockquote>
<p>一个误解: 单个服务器程序可承受最大连接数“理论”上是“65535”</p>
</blockquote>
<blockquote>
<blockquote>
<p>65535这个数字的由来，很多人想当然地将它与port最大值联系起来。的确，TCP的端口数，最大值确实为65535，但最大连接数即<code>accept</code>数，与端口号无关；</p>
</blockquote>
</blockquote>
<p>单机最大TCP连接数由以下介个参数共同决定：</p>
<ol>
<li>
<p>最大TCP连接数<br />
可通过配置表等配置，默认为16M</p>
</li>
<li>
<p>最大动态端口数<br />
<code>MaxUserPort</code></p>
</li>
</ol>
<blockquote>
<p>TCP客户端和服务器连接时，客户端必须分配一个动态端口，默认情况下这个动态端口的分配范围为 1024-5000；</p>
</blockquote>
<blockquote>
<p>可通过配置表等配置；</p>
</blockquote>
<ol start="3">
<li>最大PCB数<br />
<code>MaxFreeTcbs</code></li>
</ol>
<blockquote>
<p>系统为每个TCP 连接分配一个TCP 控制块(TCP control block or TCB)，这个控制块用于缓存TCP连接的一些参数，每个TCB需要分配 0.5 KB的pagepool 和 0.5KB 的Non-pagepool，也就说，每个TCP连接会占用 1KB 的系统内存</p>
</blockquote>
<ol start="4">
<li>最大TCN Hash Table数<br />
<code>MaxHashTableSize</code></li>
</ol>
<blockquote>
<p>TCB 是通过Hash table 来管理的<br />
这个值指明分配 pagepool 内存的数量，也就是说，如果MaxFreeTcbs = 1000 , 则 pagepool 的内存数量为 500KB<br />
那么 MaxHashTableSize 应大于 500 才行。这个数量越大，则Hash table 的冗余度就越高，每次分配和查找 TCP  连接用时就越少。这个值必须是2的幂，且最大为65536.</p>
</blockquote>
<ol start="5">
<li>网络包大小以及内存消耗等</li>
</ol>
<h3 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h3>
<ul>
<li>单个连接消耗内存</li>
</ul>
<blockquote>
<p>默认大小都是87K和16K, 最低是4K和4K, 最高是2M,2M, 实际使用默认值最低也要保留8K,8K.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/proc/sys/net/ipv4/tcp_rmem <span class="comment">#for read</span></span><br><span class="line">/proc/sys/net/ipv4/tcp_wmem <span class="comment">#for write</span></span><br></pre></td></tr></table></figure>
<ul>
<li>逻辑IO缓冲区<br />
就是比如你监听了recv事件 事件来了 你要有内存可用(一般都是socket建立起就分配好,断开才会释放的).<br />
这个内存是自己写socket程序时候自己控制的, 最低也要4K,4K, 实际使用8K,8K至少.</li>
</ul>
<p>现在设定一个优化方案和使用场景, 首先假设4G内存全部为空闲(系统和其他进程也要内存的…</p>
<ol>
<li>
<p>假如网络包的大小都可以控制在4K以下, 假设所有连接的网络都不会拥堵, 或者拥堵时候的总量在4K以下:<br />
一个连接的内存消耗是4+4+4+4=16K<br />
4G/16K=26.2万并发</p>
</li>
<li>
<p>假如网络包的大小都可以控制在8K以下, 假设所有连接的网络都不会拥堵, 或者拥堵时候的总量在8K以下<br />
一个socket的内存占用介于 24K ~ 32K之间, 保守的按照32K算<br />
4G/32K=13.1万并发, 这个在生产环境作为一个纯网络层面的内存消耗, 是可以作为参考的.</p>
</li>
<li>
<p>假如使用默认配置, 假如所有连接的网络都出现严重拥堵, 不考虑逻辑上的发送队列的占用,<br />
使用默认配置是2M+2M+8+8 ~= 4M<br />
4G/4M=1024并发</p>
</li>
<li>
<p>如果考虑到发送队列也拥堵的话 自己脑补.<br />
如果只是为了跑分 为了并发而优化, 没有常驻的逻辑缓冲区 并且socket的网络吞吐量很小并且负载平滑, 把socket buffer size设置系统最低.<br />
那么是<br />
4G/8K = 52.4万并发 这个应该是极限值了.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>tcp连接以及状态</title>
    <url>//posts/20210219-b26c50c6.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="报文简介"><a class="markdownIt-Anchor" href="#报文简介"></a> 报文简介</h2>
<p><img src="/assets/images/9f16fb6dfd9149569cf6db425488a1de.jpg" alt="9f16fb6dfd9149569cf6db425488a1de" /></p>
<h3 id="标识位"><a class="markdownIt-Anchor" href="#标识位"></a> 标识位</h3>
<h4 id="syn"><a class="markdownIt-Anchor" href="#syn"></a> SYN</h4>
<ul>
<li>
<p>SYN=1 表示这是一个连接请求或连接接受报文。</p>
</li>
<li>
<p>在建立连接时用来进行同步序号（个人理解是，在建立连接的时候，提醒对方记录本方的起始序号）。</p>
</li>
<li>
<p>当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若是同意建立连接，则应响应的报文段中使SYN=1、ACK=1。</p>
</li>
</ul>
<h4 id="ack"><a class="markdownIt-Anchor" href="#ack"></a> ACK</h4>
<p>确认号只有在该位设置为1的时候才生效，当该位为0是表示确认号无效。TCP规定，在TCP连接建立后所有传送的数据报文段ACK都必须设置为1</p>
<h4 id="fin"><a class="markdownIt-Anchor" href="#fin"></a> FIN</h4>
<p>当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接</p>
<h3 id="编号"><a class="markdownIt-Anchor" href="#编号"></a> 编号</h3>
<h4 id="序号seq"><a class="markdownIt-Anchor" href="#序号seq"></a> 序号<code>seq</code></h4>
<p>占4个字节，它的范围在0-2^32-1；<br />
序号随着通信的进行不断的递增，当达到最大值的时候重新回到0在开始递增。TCP是面向字节流的，在一个TCP连接中传送的字节流中的每一个字节都按照顺序编号。整个要传送的字节流的起始号必须在连接建立时设置。首部中的序列号字段指的是本报文段所发送的数据的第一个字节的序号。</p>
<blockquote>
<p>例如，一个报文序号是301，而携带的数据共有100字节。则表示本次报文中的序号是301，下一个报文的序号是401.重复一下，每一个报文的序号是该报文包含的字节中第一个字节的编号</p>
</blockquote>
<h4 id="确认号ack"><a class="markdownIt-Anchor" href="#确认号ack"></a> 确认号<code>ack</code></h4>
<p>占4个字节，确认号，是对<strong>下一个想要接受的字节</strong>的期望，这里隐式确认了对上一个数据包的成功接收。</p>
<blockquote>
<p>如上例，在成功接收了序号为301的数据包，想要接收下一个数据包因为上个数据包包含100字节，所以此时的确认号应该是401，表示希望接收下一个序号是401的数据包</p>
</blockquote>
<h2 id="三次握手建立连接"><a class="markdownIt-Anchor" href="#三次握手建立连接"></a> 三次握手建立连接</h2>
<p><img src="/assets/images/8f952df3f5854e34b4be62b5e6077035.jpg" alt="8f952df3f5854e34b4be62b5e6077035" /></p>
<h2 id="四次握手关闭连接"><a class="markdownIt-Anchor" href="#四次握手关闭连接"></a> 四次握手关闭连接</h2>
<p><img src="/assets/images/97bf2cda240340778d867ca73ab16305.jpg" alt="97bf2cda240340778d867ca73ab16305" /><br />
当客户A 没有东西要发送时就要释放 A 这边的连接，A会发送一个报文（没有数据），其中 FIN 设置为1,  服务器B收到后会给应用程序一个信，这时A那边的连接已经关闭，即A不再发送信息（但仍可接收信息）。  A收到B的确认后进入<strong>等待</strong>状态，等待B请求释放连接， B数据发送完成后就向A请求连接释放，也是用FIN=1 表示， 并且用 ack = u+1(如图）， A收到后回复一个确认信息，并进入 TIME_WAIT 状态， 等待 2MSL 时间</p>
<h3 id="状态变迁"><a class="markdownIt-Anchor" href="#状态变迁"></a> 状态变迁</h3>
<h4 id="完整"><a class="markdownIt-Anchor" href="#完整"></a> 完整</h4>
<p><img src="/assets/images/3b475b534aaf407fb549f7630b3ab69f.jpg" alt="3b475b534aaf407fb549f7630b3ab69f" /></p>
<h4 id="简单时序图"><a class="markdownIt-Anchor" href="#简单时序图"></a> 简单时序图</h4>
<p><img src="/assets/images/c6dcb94c407041a6bd6311c4159a77ea.jpg" alt="c6dcb94c407041a6bd6311c4159a77ea" /></p>
<h3 id="客户端为什么要等待"><a class="markdownIt-Anchor" href="#客户端为什么要等待"></a> 客户端为什么要等待？</h3>
<p>不知道</p>
<h3 id="为什么需要等待2msl"><a class="markdownIt-Anchor" href="#为什么需要等待2msl"></a> 为什么需要等待2MSL？</h3>
<p>我们必须假想网络是不可靠的，你无法保证你最后发送的ACK报文一定会被对方收到，就是说对方处于LAST_ACK 状态下的SOCKET可能会因为超时未收到ACK报文，而重发FIN报文，所以这个TIME_WAIT 状态的作用就是用来重发可能丢失的ACK报文</p>
<h2 id="11种状态"><a class="markdownIt-Anchor" href="#11种状态"></a> 11种状态</h2>
<h3 id="closed"><a class="markdownIt-Anchor" href="#closed"></a> CLOSED</h3>
<p>初始状态，表示TCP连接是“关闭着的”或“未打开的”。</p>
<h3 id="listen"><a class="markdownIt-Anchor" href="#listen"></a> LISTEN</h3>
<p>表示服务器端的某个SOCKET处于监听状态，可以接受客户端的连接。</p>
<h3 id="syn_rcvd"><a class="markdownIt-Anchor" href="#syn_rcvd"></a> SYN_RCVD</h3>
<p>表示服务器接收到了来自客户端请求连接的SYN报文。在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat很难看到这种状态，除非故意写一个监测程序，将三次TCP握手过程中最后一个ACK报文不予发送。当TCP连接处于此状态时，再收到客户端的ACK报文，它就会进入到ESTABLISHED 状态。</p>
<h3 id="syn_sent"><a class="markdownIt-Anchor" href="#syn_sent"></a> SYN_SENT</h3>
<p>这个状态与SYN_RCVD 状态相呼应，当客户端SOCKET执行connect()进行连接时，它首先发送SYN报文，然后随即进入到SYN_SENT 状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT 状态表示客户端已发送SYN报文。</p>
<h3 id="established"><a class="markdownIt-Anchor" href="#established"></a> ESTABLISHED</h3>
<p>表示TCP连接已经成功建立。</p>
<h3 id="fin_wait_1"><a class="markdownIt-Anchor" href="#fin_wait_1"></a> FIN_WAIT_1</h3>
<p>这个状态得好好解释一下，其实FIN_WAIT_1 和FIN_WAIT_2 两种状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET进入到FIN_WAIT_1 状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2 状态。当然在实际的正常情况下，无论对方处于任何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1 状态一般是比较难见到的，而FIN_WAIT_2 状态有时仍可以用netstat看到。</p>
<h3 id="fin_wait_2"><a class="markdownIt-Anchor" href="#fin_wait_2"></a> FIN_WAIT_2</h3>
<p>上面已经解释了这种状态的由来，实际上FIN_WAIT_2状态下的SOCKET表示半连接，即有一方调用close()主动要求关闭连接。注意：FIN_WAIT_2 是没有超时的（不像TIME_WAIT 状态），这种状态下如果对方不关闭（不配合完成4次挥手过程），那这个 FIN_WAIT_2 状态将一直保持到系统重启，越来越多的FIN_WAIT_2 状态会导致内核crash。</p>
<h3 id="time_wait"><a class="markdownIt-Anchor" href="#time_wait"></a> TIME_WAIT</h3>
<p>表示收到了对方的FIN报文，并发送出了ACK报文。 TIME_WAIT状态下的TCP连接会等待<code>2*MSL</code>（Max Segment Lifetime，最大分段生存期，指一个TCP报文在Internet上的最长生存时间。每个具体的TCP协议实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟，但BSD传统实现采用了30秒，Linux可以cat /proc/sys/net/ipv4/tcp_fin_timeout看到本机的这个值），然后即可回到CLOSED 可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（这种情况应该就是四次挥手变成三次挥手的那种情况）</p>
<h3 id="closing"><a class="markdownIt-Anchor" href="#closing"></a> CLOSING</h3>
<p>这种状态在实际情况中应该很少见，属于一种比较罕见的例外状态。正常情况下，当一方发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING 状态表示一方发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？那就是当双方几乎在同时close()一个SOCKET的话，就出现了双方同时发送FIN报文的情况，这是就会出现CLOSING 状态，表示双方都正在关闭SOCKET连接。</p>
<h3 id="close_wait"><a class="markdownIt-Anchor" href="#close_wait"></a> CLOSE_WAIT</h3>
<p>表示正在等待关闭。怎么理解呢？当对方close()一个SOCKET后发送FIN报文给自己，你的系统毫无疑问地将会回应一个ACK报文给对方，此时TCP连接则进入到CLOSE_WAIT状态。接下来呢，你需要检查自己是否还有数据要发送给对方，如果没有的话，那你也就可以close()这个SOCKET并发送FIN报文给对方，即关闭自己到对方这个方向的连接。有数据的话则看程序的策略，继续发送或丢弃。简单地说，当你处于CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</p>
<h3 id="last_ack"><a class="markdownIt-Anchor" href="#last_ack"></a> LAST_ACK</h3>
<p>当被动关闭的一方在发送FIN报文后，等待对方的ACK报文的时候，就处于LAST_ACK 状态。当收到对方的ACK报文后，也就可以进入到CLOSED 可用状态了。</p>
]]></content>
      <categories>
        <category>network</category>
        <category>tcp</category>
      </categories>
  </entry>
  <entry>
    <title>tcp-ip</title>
    <url>//posts/20210220-40733714.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="分层"><a class="markdownIt-Anchor" href="#分层"></a> 分层</h2>
<h3 id="7层分法"><a class="markdownIt-Anchor" href="#7层分法"></a> 7层分法</h3>
<p>应表会传网链物</p>
<blockquote>
<p>见Library</p>
</blockquote>
<h3 id="4层分法"><a class="markdownIt-Anchor" href="#4层分法"></a> 4层分法</h3>
<h4 id="应用层"><a class="markdownIt-Anchor" href="#应用层"></a> 应用层</h4>
<p>各种应用，比如FTP等</p>
<h4 id="运输层"><a class="markdownIt-Anchor" href="#运输层"></a> 运输层</h4>
<p>端到端的通信；</p>
<ul>
<li>TCP（传输控制协议）</li>
<li>UDP（用户数据报协议）</li>
</ul>
<h4 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h4>
<p>处理分组等；</p>
<ul>
<li>IP协议（网际协议）</li>
<li>ICMP协议（Internet互联网控制报文协议）
<ul>
<li>IP层用它来与其他主机或路由器交换错误报文和其他重要信息</li>
<li>IP协议的附属协议</li>
<li>比如：Ping和Tracetoute</li>
</ul>
</li>
<li>IGMP协议（Internet组管理协议）
<ul>
<li>用来把一个UDP数据报多播到多个主机</li>
</ul>
</li>
</ul>
<h4 id="链路层"><a class="markdownIt-Anchor" href="#链路层"></a> 链路层</h4>
<p>数据链路层或网络接口层，通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡。</p>
<blockquote>
<p>它们一起处理与电缆（或其他任何传输媒介）的物理接口细节。</p>
</blockquote>
<ul>
<li>ARP（地址解析协议）</li>
<li>RARP（逆地址解析协议）</li>
<li>发送和接收IP数据报</li>
</ul>
<h3 id="网关和路由器"><a class="markdownIt-Anchor" href="#网关和路由器"></a> 网关和路由器</h3>
<h4 id="网关"><a class="markdownIt-Anchor" href="#网关"></a> 网关</h4>
<p>网关这个术语只用来表示应用层网关：一个连接两种不同协议族的进程（例如，TCP/IP和IBM的SNA），它为某个特定的应用程序服务（常常是电子邮件或文件传输）。</p>
<h4 id="路由器"><a class="markdownIt-Anchor" href="#路由器"></a> 路由器</h4>
<p>一个路由器具有两个或多个网络接口层（因为它连接了两个或多个网络）</p>
<blockquote>
<p>任何具有多个接口的系统，英文都称作是多接口的(multihomed)</p>
</blockquote>
<ul>
<li>
<p>一个主机也可以有多个接口，但一般不称作路由器,除非它的功能只是单纯地把分组从一个接口传送到另一个接口。</p>
</li>
<li>
<p>路由器并不一定指那种在互联网中用来转发分组的特殊硬件盒。大多数的TCP/IP实现也允许一个多接口主机来担当路由器的功能，但是主机为此必须进行特殊的配置。</p>
</li>
</ul>
<h2 id="ip地址"><a class="markdownIt-Anchor" href="#ip地址"></a> IP地址</h2>
<h3 id="地址分类"><a class="markdownIt-Anchor" href="#地址分类"></a> 地址分类</h3>
<p><img src="/assets/images/ee71066731fc426587e6ca0a0458b02a.jpg" alt="ee71066731fc426587e6ca0a0458b02a" /></p>
<h3 id="范围"><a class="markdownIt-Anchor" href="#范围"></a> 范围</h3>
<p><img src="/assets/images/7350542e589c4154a285e66c07d6dfd1.jpg" alt="7350542e589c4154a285e66c07d6dfd1" /></p>
<h3 id="类型"><a class="markdownIt-Anchor" href="#类型"></a> 类型</h3>
<ol>
<li>单播地址（目的为单个主机）</li>
<li>广播地址（目的端为给定网络上的所有主机）</li>
<li>多播地址（目的端为同一组内的所有主机）</li>
</ol>
<h2 id="封装"><a class="markdownIt-Anchor" href="#封装"></a> 封装</h2>
<p><img src="/assets/images/eabfee1f115e4ceebcc45c16c7d92632.jpg" alt="eabfee1f115e4ceebcc45c16c7d92632" /></p>
<h2 id="分用"><a class="markdownIt-Anchor" href="#分用"></a> 分用</h2>
<p><img src="/assets/images/febf39f5b6ef46dcaa7fc9b6c1c639c1.jpg" alt="febf39f5b6ef46dcaa7fc9b6c1c639c1" /></p>
]]></content>
      <categories>
        <category>network</category>
        <category>tcp</category>
      </categories>
  </entry>
  <entry>
    <title>http权威指南</title>
    <url>//posts/20210415-77650e2e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/3df07be1895a410092545e3dd4b858fb.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>network</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>web性能权威指南</title>
    <url>//posts/20210415-9875019f.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/17f3a48d165940f5ba53815e992e87ed.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>network</category>
        <category>web</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>公式</title>
    <url>//posts/20210218-13aedf83.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="多项式"><a class="markdownIt-Anchor" href="#多项式"></a> 多项式</h2>
<ol>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mn>0</mn></msubsup><msup><mi>a</mi><mi>n</mi></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup><msup><mi>b</mi><mi>k</mi></msup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>C</mi><mi>n</mi><mi>n</mi></msubsup><msup><mi>b</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">(a+b)^n = C_n^0a^n  + ... + C_n^ka^{n-k}b^k + ... + C_n^nb^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.061108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.096108em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9414399999999999em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></li>
</ol>
<h2 id="指数"><a class="markdownIt-Anchor" href="#指数"></a> 指数</h2>
<ol>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mi>a</mi></mfrac><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">≠</mi><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{-n} = \frac{1}{a} (a\neq0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mfrac><mi>m</mi><mi>n</mi></mfrac></msup><mo>=</mo><mroot><msup><mi>a</mi><mi>m</mi></msup><mi>n</mi></mroot></mrow><annotation encoding="application/x-tex">a^{\frac{m}{n}} = \sqrt[n]{a^m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84708em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.15980399999999995em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6475152000000001em;"><span style="top:-2.9322352em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801960000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span><span style="top:-2.840196em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15980399999999995em;"><span></span></span></span></span></span></span></span></span></li>
</ol>
<h2 id="对数"><a class="markdownIt-Anchor" href="#对数"></a> 对数</h2>
<ol>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>N</mi></msubsup></msup><mo>=</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">a^{\log_a^N} = N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.006365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.006365em;"><span style="top:-3.006365em;margin-right:0.05em;"><span class="pstrut" style="height:2.643365em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><msup><mi>b</mi><mi>n</mi></msup></msubsup><mo>=</mo><mi>n</mi><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>b</mi></msubsup></mrow><annotation encoding="application/x-tex">\log_a^{b^n} = n\log_a^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.21132em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.96432em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1804479999999997em;vertical-align:-0.247em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9334479999999998em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>a</mi></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\log_a^a = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.995732em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mn>1</mn></msubsup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\log_a^1 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.145448em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mrow><mi>M</mi><mi>N</mi></mrow></msubsup><mo>=</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>M</mi></msubsup><mo>+</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\log_a^{MN} = \log_a^M + \log_a^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1726709999999998em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9256709999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1726709999999998em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9256709999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9256709999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mfrac><mi>M</mi><mi>N</mi></mfrac></msubsup><mo>=</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>M</mi></msubsup><mo>−</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>N</mi></msubsup></mrow><annotation encoding="application/x-tex">\log_a^{\frac{M}{N}} = \log_a^M - \log_a^N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3905049999999999em;vertical-align:-0.19444em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.196065em;"><span style="top:-2.883408em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.5856000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11659199999999997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1726709999999998em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9256709999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9256709999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>a</mi><mi>b</mi></msubsup><mo>=</mo><mfrac><mn>1</mn><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>b</mi><mi>a</mi></msubsup></mfrac></mrow><annotation encoding="application/x-tex">\log_a^b = \frac{1}{\log_b^a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1804479999999997em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9334479999999998em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.4331679999999998em;vertical-align:-0.5880599999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop mtight">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6523428571428572em;"><span style="top:-2.1527714285714286em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">b</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3472285714285714em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5880599999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>lg</mi><mo>⁡</mo><mi>a</mi><mo>=</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mn>10</mn><mi>a</mi></msubsup></mrow><annotation encoding="application/x-tex">\lg a = \log_{10}^a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.995732em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ln</mi><mo>⁡</mo><mi>a</mi><mo>=</mo><msubsup><mo><mi>log</mi><mo>⁡</mo></mo><mi>e</mi><mi>a</mi></msubsup></mrow><annotation encoding="application/x-tex">\ln a = \log_e^a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.995732em;vertical-align:-0.247em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.748732em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></li>
</ol>
]]></content>
      <categories>
        <category>primary</category>
        <category>math</category>
      </categories>
  </entry>
  <entry>
    <title>公式大全</title>
    <url>//posts/20210414-b3d59b06.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/6ba6c44bd298463094b9e751fdaa43c6.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>primary</category>
        <category>math</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>并发与并行</title>
    <url>//posts/20210220-5eeaa342.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="并发concurren"><a class="markdownIt-Anchor" href="#并发concurren"></a> 并发（concurren)</h2>
<p>同时发生，即同时存在，但不一定是同时执行，可能是轮流执行；</p>
<h2 id="并行parallel"><a class="markdownIt-Anchor" href="#并行parallel"></a> 并行（parallel）</h2>
<p>同时进行，即同时执行；</p>
<p><img src="/assets/images/6ba18950b2124085b9701ecabda1b5eb.jpg" alt="6ba18950b2124085b9701ecabda1b5eb" /></p>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>io模式</title>
    <url>//posts/20210220-38bb6713.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="相关引用"><a class="markdownIt-Anchor" href="#相关引用"></a> 相关引用</h2>
<ol>
<li>
<p><a href="/primary/computer/user-and-kernel-space/">用户空间与内核空间</a></p>
</li>
<li>
<p><a href="/primary/computer/sync-async-block-nonblock/">同步和异步与阻塞和非阻塞</a></p>
</li>
<li>
<p>文件描述符</p>
<p>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统</p>
</li>
<li>
<p>缓存I/O</p>
<p>又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，<strong>数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间</strong>；</p>
<p>缺点：数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的；</p>
</li>
</ol>
<h2 id="io模式"><a class="markdownIt-Anchor" href="#io模式"></a> I/O模式</h2>
<p>对于一次IO访问（以read操作为例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p>
<pre><code>1. 数据准备阶段，即将数据读到缓冲区；
2. 数据复制阶段，即将数据从内核缓存区拷贝到进程中；
</code></pre>
<p>因此，有以下5种模式</p>
<h3 id="阻塞"><a class="markdownIt-Anchor" href="#阻塞"></a> 阻塞</h3>
<p>默认所有socket都是阻塞的，其流程大概为：</p>
<ul>
<li>
<p>当用户进程发出recvfrom系统调用后，进行进入第1个阶段即数据准备阶段（对于网络IO来说，可能是需要等待数据的到来），此时进程阻塞；</p>
</li>
<li>
<p>当kernel数据准备完成，就开始第2个阶段即数据复制阶段完成后kernel返回结果，用户进程解除block的状态，重新运行起来；</p>
</li>
</ul>
<p>即用户进程在2个阶段都是阻塞的；</p>
<p><img src="/assets/images/3bd03c6a98284a009e780e5e3ea2e622.jpg" alt="3bd03c6a98284a009e780e5e3ea2e622" /></p>
<h3 id="非阻塞"><a class="markdownIt-Anchor" href="#非阻塞"></a> 非阻塞</h3>
<ul>
<li>当进程调用recvfrom系统调用后，如果kernel没有准备好数据，则立刻返回一个error，这样用户程序检测返回结果是error后，然后再次发送系统recvfrom调用，此时进程可以理解为非阻塞，因为可以理解返回；</li>
<li>当kernel准备好数据之后，同时再次收到recvfrom调用，就开启第2阶段，即将数据复制到用户内存，此时进程是阻塞的，需要等待复制完毕；</li>
</ul>
<p>即用户进程在第1阶段非阻塞（其实还是阻塞，因为需要循环检测），第2阶段阻塞；</p>
<p><img src="/assets/images/f035d835a93a49cdacf0a2b3878d1f97.jpg" alt="f035d835a93a49cdacf0a2b3878d1f97" /></p>
<h3 id="多路复用"><a class="markdownIt-Anchor" href="#多路复用"></a> <a href="/primary/computer/io-multiplexing/">多路复用</a></h3>
<p><img src="/assets/images/3daa501b859e4074adefb9ed2c4f7ee9.jpg" alt="3daa501b859e4074adefb9ed2c4f7ee9" /></p>
<p>从图可以看出，以select为例，select过程即第1阶段是非阻塞的，之后发出recffrom系统该调用之后是阻塞的；</p>
<h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h3>
<p>当用户进程发出异步的read命令后，kernel会完成准备和复制阶段之通知用户进程，这段时间用户进程是异步的；</p>
<p><img src="/assets/images/c7173222877840c1aaf009c7f1505209.jpg" alt="c7173222877840c1aaf009c7f1505209" /></p>
<h3 id="信号驱动"><a class="markdownIt-Anchor" href="#信号驱动"></a> 信号驱动</h3>
<p>不常用，略</p>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>知识体系</title>
    <url>//posts/20210220-ae826b35.html</url>
    <content><![CDATA[<!-- toc -->
<p><img src="/assets/images/f55a48b915b74be1af5888088d07d3d7.gif" alt="f55a48b915b74be1af5888088d07d3d7" /></p>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>io多路复用</title>
    <url>//posts/20210220-cc06837d.html</url>
    <content><![CDATA[<!-- toc -->
<p>水平触发（Level Triggered）：将就绪的fd告诉进程后，若进程没有对其进行IO操作，则下次执行检测时会再次报告这些fd，select、poll、epoll均支持；</p>
<p>边缘触发（Edge Triggered）：只告诉一遍，下次就不在告诉了，仅epoll支持；</p>
<h2 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    maxfd：一个整数值，是指集合中所有文件描述符的范围，即所有文件描述符的最大值加1</span></span><br><span class="line"><span class="comment">    rdset、wrset、exset：要监视的读、写、异常文件描述符的集合</span></span><br><span class="line"><span class="comment">    timeout:超时时间</span></span><br><span class="line"><span class="comment">        NULL：将select置于阻塞状态，一定等到监视文件描述符集合中某个文件描述符发生变化为止；</span></span><br><span class="line"><span class="comment">        0：不管文件描述符是否有变化，都立刻返回继续执行，文件无变化返回0，有变化返回一个正值；</span></span><br><span class="line"><span class="comment">        &gt;0：等待的超时时间，即在timeout时间内阻塞，之内有事件到来就返回了，否则在超时后返回，返回值同上述</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">    &lt;0：错误，并设置errorno</span></span><br><span class="line"><span class="comment">    0：等待超时</span></span><br><span class="line"><span class="comment">    &gt;0：可读写或异常的文件描述符的个数</span></span><br><span class="line"><span class="comment">fd_set</span></span><br><span class="line"><span class="comment">    是一个数组的宏定义，实际上是一long类型的数组，每一个数组元素都能与一打开的文件句柄(socket、文件、管道、设备等)建立联系，建立联系的工作由程序员完成，当调用select()时，由内核根据IO状态修改fd_set的内容，由此来通知执行了select()的进程哪个句柄可读，其中每一bit对应一个文件描述符id，</span></span><br><span class="line"><span class="comment">    FD_SET(int fd, fd_set *fdset);       //将fd加入set集合 </span></span><br><span class="line"><span class="comment">    FD_CLR(int fd, fd_set *fdset);       //将fd从set集合中清除 </span></span><br><span class="line"><span class="comment">    FD_ISSET(int fd, fd_set *fdset);     //检测fd是否在set集合中，不在则返回0 </span></span><br><span class="line"><span class="comment">    FD_ZERO(fd_set *fdset);              //将set清零使集合中不含任何fd</span></span><br><span class="line"><span class="comment">    FD_SETSIZE，它是数据类型fd_set的描述字数量，其值通常是1024</span></span><br><span class="line"><span class="comment">    fd_set的大小决定了select可操作fd的大小；</span></span><br><span class="line"><span class="comment">    fd的最大值必须&lt;FD_SETSIZE</span></span><br><span class="line"><span class="comment">    为方便理解，去fd_set为1字节长度即8bit：</span></span><br><span class="line"><span class="comment">        1）执行fd_set set; FD_ZERO(&amp;set);则set用位表示是0000,0000。</span></span><br><span class="line"><span class="comment">        2）若fd＝5,执行FD_SET(fd,&amp;set);后set变为0001,0000(第5位置为1)</span></span><br><span class="line"><span class="comment">        3）若再加入fd＝2，fd=1,则set变为0001,0011</span></span><br><span class="line"><span class="comment">        4）执行select(6,&amp;set,0,0,0)阻塞等待</span></span><br><span class="line"><span class="comment">        5）若fd=1,fd=2上都发生可读事件，则select返回，此时set变为0000,0011。注意：没有事件发生的fd=5被清空。</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> maxfd,fd_set *rdset,fd_set *wrset,fd_set *exset,struct timeval *timeout)</span></span>; </span><br><span class="line"><span class="comment">//select返回时会将处理rdset、wrset、exset，即将未有时间发生的fd从fd_set中清除；</span></span><br></pre></td></tr></table></figure>
<h3 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h3>
<p>对所有的fd进行线性扫描，即轮询一次</p>
<h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3>
<ol>
<li>
<p>单个进程可监视的fd数量被限制，即能监听端口的大小有限</p>
<p>一般来说这个数目和系统内存关系很大，具体数目可以<code>cat /proc/sys/fs/file-max</code>查看。32位机默认是1024个。64位机默认是2048</p>
</li>
<li>
<p>对socket进行扫描时是线性扫描，即采用轮询的方法，效率较低</p>
<p>当套接字比较多的时候，每次select()都要通过遍历FD_SETSIZE个Socket来完成调度,不管哪个Socket是活跃的,都遍历一遍。这会浪费很多CPU时间</p>
</li>
<li>
<p>每次调用select，需要把fd集合从用户态拷贝到内核态，然后在内核遍历fd集合，当fd集合很大时，开销会比较大</p>
</li>
</ol>
<h2 id="poll"><a class="markdownIt-Anchor" href="#poll"></a> poll</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    fds[]：要监视的文件描述符数组</span></span><br><span class="line"><span class="comment">    nfds：数组fds中结构体元素的总数量</span></span><br><span class="line"><span class="comment">    timeouts，同select</span></span><br><span class="line"><span class="comment">pollfd：</span></span><br><span class="line"><span class="comment">    struct pollfd &#123;</span></span><br><span class="line"><span class="comment">        int fd; //文件描述符</span></span><br><span class="line"><span class="comment">        short events; // 等待的需要测试事件</span></span><br><span class="line"><span class="comment">        short revents; // 实际发生了的事件，也就是返回结果</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">events、revents:</span></span><br><span class="line"><span class="comment">    POLLIN 有数据可读。</span></span><br><span class="line"><span class="comment">    POLLRDNORM   有普通数据可读。</span></span><br><span class="line"><span class="comment">    POLLRDBAND　 有优先数据可读。</span></span><br><span class="line"><span class="comment">    POLLPRI 有紧迫数据可读。</span></span><br><span class="line"><span class="comment">    POLLOUT      写数据不会导致阻塞。</span></span><br><span class="line"><span class="comment">    POLLWRNORM　  写普通数据不会导致阻塞。</span></span><br><span class="line"><span class="comment">    POLLWRBAND　   写优先数据不会导致阻塞。</span></span><br><span class="line"><span class="comment">    POLLMSGSIGPOLL 消息可用。</span></span><br><span class="line"><span class="comment">revents域中还可能返回下列事件：</span></span><br><span class="line"><span class="comment">    POLLER   指定的文件描述符发生错误。</span></span><br><span class="line"><span class="comment">    POLLHUP 指定的文件描述符挂起事件。</span></span><br><span class="line"><span class="comment">    POLLNVAL指定的文件描述符非法。</span></span><br><span class="line"><span class="comment">返回值：同select</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd fds[], <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span>；</span></span><br><span class="line"><span class="function"><span class="comment">//poll执行后，当指定fd的有事件发生时，会设置其对应的结构体的revents</span></span></span><br></pre></td></tr></table></figure>
<h3 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h3>
<p>poll本质上和select没有区别，但它没有最大连接数的限制，原因是它是基于链表来存储的</p>
<h3 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点</h3>
<ol>
<li>它没有最大连接数的限制，原因是它是基于链表来存储的</li>
<li>poll还有一个特点是“水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd</li>
</ol>
<h2 id="epoll"><a class="markdownIt-Anchor" href="#epoll"></a> epoll</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="comment">/*创建内核事件表</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    size：并不起作用，只是给内核一个提示，告诉它事件表需要多大</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">    &gt;0，文件描述符，指定要访问的内核事件表，是其他所有epoll系统调用的句柄。</span></span><br><span class="line"><span class="comment">    -1，失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="comment">/*操作内核事件表</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    epfd：epoll_create返回值</span></span><br><span class="line"><span class="comment">    op：操作类型</span></span><br><span class="line"><span class="comment">        EPOLL_CTL_ADD， 往事件表中注册fd上的事件；</span></span><br><span class="line"><span class="comment">        EPOLL_CTL_MOD， 修改fd上注册的事件；</span></span><br><span class="line"><span class="comment">        EPOLL_CTL_DEL， 删除fd上注册的事件</span></span><br><span class="line"><span class="comment">    fd：需要监控的fd</span></span><br><span class="line"><span class="comment">    event：指定事件数组</span></span><br><span class="line"><span class="comment">epoll_event：</span></span><br><span class="line"><span class="comment">    struct epoll_event</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        __int32_t events;       //epoll事件</span></span><br><span class="line"><span class="comment">        epoll_data_t data;      //用户数据</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    typedef union epoll_data</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        void *ptr;</span></span><br><span class="line"><span class="comment">        int  fd;</span></span><br><span class="line"><span class="comment">        uint32_t u32;</span></span><br><span class="line"><span class="comment">        uint64_t u64;</span></span><br><span class="line"><span class="comment">    &#125;epoll_data;</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">    0，成功</span></span><br><span class="line"><span class="comment">    -1，失败</span></span><br><span class="line"><span class="comment">在使用epoll_ctl时，是把fd添加、修改到内核事件表中，或从内核事件表中删除fd的事件。如果是添加事件到事件表中，可以往data中的fd上添加事件events，或者不用data中的fd，而把fd放到用户数据ptr所指的内存中（因为epoll_data是一个联合体，只能使用其中一个数据）,再设置events。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"><span class="comment">/*一段时间内等待一个组文件描述符上的事件</span></span><br><span class="line"><span class="comment">参数：</span></span><br><span class="line"><span class="comment">    epfd：epoll_create返回值</span></span><br><span class="line"><span class="comment">    events：一个epoll_event*的指针，当epoll_wait这个函数操作成功之后，epoll_events里面将储存所有的读写事件</span></span><br><span class="line"><span class="comment">    maxevents：当前需要监听的所有fd数</span></span><br><span class="line"><span class="comment">    timeout:</span></span><br><span class="line"><span class="comment">        0，马上返回</span></span><br><span class="line"><span class="comment">        -1，阻塞，直到有事件发生</span></span><br><span class="line"><span class="comment">        &gt;0，超时时间</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">    &gt;0，成功，就绪文件fd的个数</span></span><br><span class="line"><span class="comment">    -1：失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h3>
<p>epoll支持水平触发和边缘触发，会把监控的fd放在内核中的一个事件表中，使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一旦该fd就绪，内核将触发回调函数，该回调函数将就绪的文件描述符和事件拷贝到用户空间events所管理的内存，epoll_wait便可以收到通知</p>
<h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3>
<ol>
<li>没有最大并发连接的限制</li>
<li>效率提升</li>
<li>内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销</li>
</ol>
<h2 id="三种比较"><a class="markdownIt-Anchor" href="#三种比较"></a> 三种比较</h2>
<table>
<thead>
<tr>
<th>比较点</th>
<th>select</th>
<th>poll</th>
<th>epoll</th>
</tr>
</thead>
<tbody>
<tr>
<td>一个进程最大连接数</td>
<td>由FD_SETSIZE宏定义，其大小是32个整数的大小，可以对进行修改，然后重新编译内核，但是性能可能会受到影响，这需要进一步的测试</td>
<td>基于链接存储，无限制</td>
<td>上限很大，1G内存的可以打开10万左右的连接</td>
</tr>
<tr>
<td>效率</td>
<td>因为每次调用时都会对连接进行线性遍历，所以随着FD的增加会造成遍历速度慢的“线性下降性能问题”。</td>
<td>同select</td>
<td>不是轮询的方式，不会随着FD数目的增加效率下降。只有活跃可用的FD才会调用callback函数；即Epoll最大的优点就在于它只管你“活跃”的连接，而跟连接总数无关，因此在实际的网络环境中，Epoll的效率就会远远高于select和poll</td>
</tr>
<tr>
<td>消息传递方式</td>
<td>内核需要将消息传递到用户空间，都需要内核拷贝动作</td>
<td>同select</td>
<td>内核需要将消息传递到用户空间，都需要内核拷贝动作</td>
</tr>
<tr>
<td>事件集合</td>
<td>内核会修改fd_set，五哦一每次调用都需要重置fd_set</td>
<td>events传入revents反馈</td>
<td>使用内核事件表管理；epoll_eait的events仅用来保存就绪事件</td>
</tr>
<tr>
<td>索引就绪fd的时间复杂度</td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>内核实现</td>
<td>轮询</td>
<td>轮询</td>
<td>回调</td>
</tr>
<tr>
<td>工作模式</td>
<td>LT</td>
<td>LT</td>
<td>LT和ET</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>语言分类</title>
    <url>//posts/20210220-79d2e2f3.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="发展与分类"><a class="markdownIt-Anchor" href="#发展与分类"></a> 发展与分类</h2>
<h3 id="编译型语言"><a class="markdownIt-Anchor" href="#编译型语言"></a> 编译型语言</h3>
<p>指用专用的编译器，针对特定的操作平台（操作系统）将某种高级语言源代码一次性翻译成可被硬件平台直接运行的二进制机器码（具有操作数，指令、及相应的格式），这个过程叫做编译；</p>
<h4 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h4>
<p>可脱离开发环境，特定的平台上独立运行，运行效率高；</p>
<h4 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h4>
<p>无法移植，需要时必须重新编译；</p>
<p>有些程序编译后，还需要把其他编译好的，可能需要组装两个以上的目标代码生成最终的可执行性文件，称为链接（可实现对低层次代码的复用）。</p>
<h4 id="语言"><a class="markdownIt-Anchor" href="#语言"></a> 语言</h4>
<ul>
<li>C语言、C++等。</li>
<li>java</li>
</ul>
<blockquote>
<p>Java语言是一门很特殊的语言，Java程序需要进行编译步骤，但并不会生成特定平台的二进制机器码，它编译后生成的是一种与平台无关的字节码文件（*.class）（移植性好的原因），这种字节码自然不能被平台直接执行，运行时需要由解释器解释成相应平台的二进制机器码文件；大多数人认为Java是一种编译型语言，但我们说Java即是编译型语言，也是解释型语言也并没有错。</p>
</blockquote>
<h3 id="解释型语言"><a class="markdownIt-Anchor" href="#解释型语言"></a> 解释型语言</h3>
<p>指用专门解释器对源程序逐行解释成特定平台的机器码并立即执行的语言；相当于把编译型语言的编译链接过程混到一起同时完成的。</p>
<h4 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2"></a> 优点</h4>
<p>但它的跨平台型比较容易，只需提供特定解释器即可。</p>
<h4 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2"></a> 缺点</h4>
<p>解释型语言执行效率较低，且不能脱离解释器运行，</p>
<h4 id="语言-2"><a class="markdownIt-Anchor" href="#语言-2"></a> 语言</h4>
<ul>
<li>Python（同时是脚本语言）</li>
<li>Ruby</li>
</ul>
<h3 id="脚本语言"><a class="markdownIt-Anchor" href="#脚本语言"></a> 脚本语言</h3>
<p>为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。</p>
<h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4>
<p>程序代码即是最终的执行文件，只是这个过程需要解释器的参与，所以说脚本语言与解释型语言有很大的联系。脚本语言通常是被解释执行的，而且程序是文本文件。</p>
<h4 id="语言-3"><a class="markdownIt-Anchor" href="#语言-3"></a> 语言</h4>
<ul>
<li>JavaScript</li>
<li>Python等。</li>
</ul>
<h3 id="系统语言与脚本语言区别"><a class="markdownIt-Anchor" href="#系统语言与脚本语言区别"></a> 系统语言与脚本语言区别</h3>
<ol>
<li>
<p>抽象的级别<br />
这是最重要也是最明显示的不同。脚本语言对程序员提供了更高级的抽象。这一点明显表现在：在这种语言自身中，存在有高级的数据结构，如列表和字典结构，和对这种结构简单方便的嵌套和操作。这样可以创建非常成功的程序。</p>
</li>
<li>
<p>类型定义<br />
系统语言通常是强类型和静态类型定义。这就意味着所有变量的类型要在程序中指定，在编译时检查。相反地，脚本语言是最松散的类型定义，完全没有类型声明，并且在运行时进行动态类型检查。</p>
</li>
<li>
<p>执行<br />
系统语言的特点是编译的。程序被编译成可执行的二进制。另一方面，脚本语言的特点是解释，也就是，指令被立即执行，不存在一个编译的中间状态。这就意味着脚本语言是交互式的(你可以在提示符下敲入命令，并且看到结果)，这是另一个巨大的胜利。这样完全将编译过程从编辑-编译-运行循环中去掉了。</p>
</li>
<li>
<p>速度<br />
以上三点是脚本语言一方面在速度与效率， 一方面在易用性与表示式的强大性之间进行折衷的典型例子。这就使得脚本语言的执行速度比系统语言慢一个数量级。这就是对脚本语言诽谤最多的方面。性能的降低不是真正的问题，因为思想是用脚本语言来组合组件，这些组件是用象C  这样的快速系统语言来编写的。所以所有需要运行快速的东西将因为是用快速的语言实现的而运行得快速。脚本语言只用于将东西绑在一起，并且这些通常不是性能的瓶颈(   或如果是，你需要重新检查你的设计)。</p>
</li>
</ol>
<h2 id="执行分类"><a class="markdownIt-Anchor" href="#执行分类"></a> 执行分类</h2>
<p>计算机并不能直接地接受和执行用高级语言编写的源程序，源程序在输入计算机时，通过&quot;翻译程序&quot;翻译成机器语言形式的目标程序，计算机才能识别和执行。这种&quot;翻译&quot;通常有两种方式，即编译方式和解释方式：</p>
<h4 id="1编译方式"><a class="markdownIt-Anchor" href="#1编译方式"></a> 1.编译方式</h4>
<p>指利用事先编好的一个称为编译程序的机器语言程序，作为系统软件存放在计算机内，当用户将高级语言编写的源程序输入计算机后，编译程序便把源程序整个地翻译成用机器语言表示的与之等价的目标程序，然后计算机再执行该目标程序，以完成源程序要处理的运算并取得结果</p>
<h4 id="2解释方式"><a class="markdownIt-Anchor" href="#2解释方式"></a> 2.解释方式</h4>
<p>指源程序进入计算机后，解释程序边扫描边解释，逐句输入逐句翻译，计算机一句句执行，并不产生目标程序</p>
<h3 id="编译执行"><a class="markdownIt-Anchor" href="#编译执行"></a> 编译执行</h3>
<p>需要对源程序进行一个编译，生成一个目标文件，计算机再对这个目标程序进行执行。虽然这的编译的过程比上面提到的翻译的过程要复杂（通常要对代码进行语法分析，还要对代码进行优化，并分配内存，最后形成目标文件），但是一旦形成目标文件，就一劳永逸，不必再进行编译，所以执行速度较快</p>
<blockquote>
<p>相当于做一整桌子的菜，做完之后再吃；</p>
</blockquote>
<h4 id="代表语言"><a class="markdownIt-Anchor" href="#代表语言"></a> 代表语言</h4>
<p>C&amp;C++，C#，Java；</p>
<h3 id="解释执行"><a class="markdownIt-Anchor" href="#解释执行"></a> 解释执行</h3>
<p>对源语言写成的源语句进行一句一句的翻译，翻译一句就提交给计算机执行一句，并不会形成目标程序。它的有点是翻译本身并不费事。它的缺点是运行速度慢，比如当程序中存在循环条件时，循环体内的语句就会被多次的翻译，从而影响运行速度。</p>
<blockquote>
<p>相当于吃火锅，煮一个吃一个；</p>
</blockquote>
<h4 id="代表语言-2"><a class="markdownIt-Anchor" href="#代表语言-2"></a> 代表语言</h4>
<p>html，javascript，python</p>
<h3 id="区别"><a class="markdownIt-Anchor" href="#区别"></a> 区别</h3>
<ol>
<li>
<p>编译型语言的源代码有错误编译不通过，无法生成可执行代码，更无法执行程序；解释型语言只有执行时才会判断是否出错，即使一句出错，也可以继续执行下一句</p>
</li>
<li>
<p>编译型语言都为强类型，即必须说明数据的类型，如int a；解释型语言多为弱类型，如js中var a，a可以为字符串也可以为整形；</p>
</li>
<li>
<p>编译型语言执行效率上大大优于解释型，主要因为编译器在编译过程中会根据不同平台自动优化目标代码，且特点为1次编译，N次运行，另外强类型的程序安全性高；解释型语言无上述过程，逐语句翻译造成执行效率低下，每次执行都会重复解释一遍，并且安全性低；</p>
</li>
<li>
<p>编译型程序适合对通用性，重复性，高效性有要求的系统，如开发操作系统；相比解释型语言更具灵活性，如开发网站前台页；</p>
</li>
</ol>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>机器数表示法</title>
    <url>//posts/20210220-70724c8b.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<p>针对的是有符号的，即最高位为符号位，0正1负</p>
<table>
<thead>
<tr>
<th></th>
<th>原码</th>
<th>反码</th>
<th>补码</th>
</tr>
</thead>
<tbody>
<tr>
<td>正整数</td>
<td>最高位为0</td>
<td>同原码</td>
<td>同原码</td>
</tr>
<tr>
<td>负整数</td>
<td>最高位为1</td>
<td>非符号位取反</td>
<td>反码+1</td>
</tr>
</tbody>
</table>
<p><strong>负数-X的补码等于+X-1的取反码（即非符号位0变1,1变0）；</strong></p>
<p><strong>正整数与负整数相加时，是补码操作，得到的结果中，舍弃溢出位，得到的结果也是补码；</strong></p>
<h2 id="问题与答案"><a class="markdownIt-Anchor" href="#问题与答案"></a> 问题与答案</h2>
<h3 id="为啥有符号的char可以表示-128~127即-27-~-2-1范围的数值"><a class="markdownIt-Anchor" href="#为啥有符号的char可以表示-128~127即-27-~-2-1范围的数值"></a> 为啥有符号的char可以表示 -128~127即 -2^7 ~ 2^-1范围的数值？</h3>
<p>因为最高位为符号位，当最高位为0，可以表示0，1~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^7-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>当最高位为1，可以表示-1~-127还有-128，因为负数在计算机中是通过补码表示的，所以最小负数的源码为（1111 1111），此时的补码为（1 0000 0000），此时为转换为10进制为128，此时表示为-0；</p>
<h3 id="0的表示"><a class="markdownIt-Anchor" href="#0的表示"></a> 0的表示</h3>
<table>
<thead>
<tr>
<th></th>
<th>原码</th>
<th>反码</th>
<th>补码</th>
</tr>
</thead>
<tbody>
<tr>
<td>+0</td>
<td>（0）000 0000</td>
<td>（0）000 0000</td>
<td>（0）000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>（1）000 0000</td>
<td>（1）111 1111</td>
<td>（1）000 0000</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>同步和异步与阻塞和非阻塞</title>
    <url>//posts/20210220-37386c87.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="同步和异步"><a class="markdownIt-Anchor" href="#同步和异步"></a> 同步和异步</h2>
<blockquote>
<p>主要针对C端，即客户端</p>
<p>跟S端不是完全没有关系，同步/异步机制必须S端配合才能实现. 同步/异步是由c端自己控制, 但是S端是否阻塞/非阻塞, C端完全不需要关心.</p>
</blockquote>
<p>线程在执行中如果遇到磁盘读写或网络通信（统称为I/O 操作），通常要耗费较长的时间，这时操作系统会剥夺这个线程的CPU 控制权，使其暂停执行，同时将资源让给其他的工作线程，这种线程调度方式称为 阻塞。当I/O 操作完毕时，操作系统将这个线程的阻塞状态解除，恢复其对CPU的控制权，令其继续执行。这种I/O 模式就是通常的同步式I/O（Synchronous I/O）或阻塞式I/O （Blocking I/O）</p>
<h3 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步</h3>
<p>所谓同步，就是在c端发出一个功能调用时，在没有得到结果之前，该调用就不返回。<strong>也就是必须一件一件事做</strong>,等前一件做完了才能做下一件事；</p>
<h3 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h3>
<p>异步的概念和同步相对。当c端一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者；</p>
<p>例如 ajax请求（异步）: 请求通过事件触发-&gt;服务器处理（这是浏览器仍然可以作其他事情）-&gt;处理完毕</p>
<h2 id="阻塞和非阻塞"><a class="markdownIt-Anchor" href="#阻塞和非阻塞"></a> 阻塞和非阻塞</h2>
<blockquote>
<p>主要针对S端，即服务端</p>
</blockquote>
<p>相应地，异步式I/O （Asynchronous I/O）或非阻塞式I/O （Non-blocking I/O）则针对所有I/O 操作不采用阻塞的策略。当线程遇到I/O 操作时，不会以阻塞的方式等待I/O 操作的完成或数据的返回，而只是将I/O 请求发送给操作系统，继续执行下一条语句。当操作系统完成I/O 操作时，以事件的形式通知执行I/O 操作的线程，线程会在特定时候处理这个事件。为了处理异步I/O，线程必须有事件循环，不断地检查有没有未处理的事件，依次予以处理。阻塞模式下，一个线程只能处理一项任务，要想提高吞吐量必须通过多线程。而非阻塞模式下，一个线程永远在执行计算操作，这个线程所使用的CPU 核心利用率永远是100%，I/O 以事件的方式通知。在阻塞模式下，多线程往往能提高系统吞吐量，因为一个线程阻塞时还有其他线程在工作，多线程可以让CPU 资源不被阻塞中的线程浪费。而在非阻塞模式下，线程不会被I/O 阻塞，永远在利用CPU。</p>
<h3 id="阻塞"><a class="markdownIt-Anchor" href="#阻塞"></a> 阻塞</h3>
<blockquote>
<p>进程阻塞，此时不占用CPU资源</p>
</blockquote>
<p>阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回</p>
<h3 id="非阻塞"><a class="markdownIt-Anchor" href="#非阻塞"></a> 非阻塞</h3>
<p>非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p>
<p>还是等快递的例子：如果用忙轮询的方法，每隔5分钟到A楼一层(内核缓冲区）去看快递来了没有。如果没来，立即返回。而快递来了，就放在A楼一层，等你去取。</p>
<h2 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h2>
<h3 id="对象的阻塞模式和阻塞函数调用"><a class="markdownIt-Anchor" href="#对象的阻塞模式和阻塞函数调用"></a> 对象的阻塞模式和阻塞函数调用</h3>
<p>对象是否处于阻塞模式和函数是不是阻塞调用有很强的相关性，但是并不是一一对应的。阻塞对象上可以有非阻塞的调用方式，我们可以通过一定的API去轮询状 态，在适当的时候调用阻塞函数，就可以避免阻塞。而对于非阻塞对象，调用特殊的函数也可以进入阻塞调用。函数select就是这样的一个例子。</p>
<ol>
<li>同步，就是C端调用一个功能，该功能没有结束前，c端一直等待结果；</li>
<li>异步，就是C端调用一个功能，不需要知道该功能结果，该功能有结果后通知C端即回调通知；</li>
<li>阻塞，就是调用S端，S端没有得到结果之前，不会返回；</li>
<li>非阻塞，就是调用S端，S端立即返回，通过select通知调用者；</li>
</ol>
<h3 id="同步和异步io"><a class="markdownIt-Anchor" href="#同步和异步io"></a> 同步和异步I/O</h3>
<p>应用程序的调用是否立即返回！</p>
<h3 id="阻塞和非阻塞io"><a class="markdownIt-Anchor" href="#阻塞和非阻塞io"></a> 阻塞和非阻塞I/O</h3>
<p>数据访问的时候进程是否等待！</p>
<h3 id="阻塞和同步"><a class="markdownIt-Anchor" href="#阻塞和同步"></a> 阻塞和同步</h3>
<p>阻塞调用是当前线程挂起，而同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回而已。 例如，我们在socket中调用recv函数，如果缓冲区中没有数据，这个函数就会一直等待，直到有数据才返回。而此时，当前线程还会继续处理各种各样的消息。（比如到你某个时候到A楼一层（假如是内核缓冲区）取快递，但是你不知道快递什么时候过来，你又不能干别的事，只能死等着。但你可以睡觉（进程处于休眠状态），因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你））</p>
<h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2>
<ol>
<li>同步阻塞：老王用水壶煮水，并且站在那里，不管水开没开，每隔一定时间看看水开了没；</li>
<li>同步非阻塞：老王用水壶煮水，不再傻傻的站在那里看水开，跑去寝室上网，但是还是会每隔一段时间过来看看水开了没有，水没有开就走人；</li>
<li>异步阻塞：老王用响水壶来煮水，站在那里，但是不会再每隔一段时间去看水开，而是等水开了，水壶会自动的通知他；</li>
<li>异步非阻塞：老王使用响水壶煮水，跑到客厅上网去，等着响水壶自己把水煮熟了以后通知他；</li>
</ol>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>线程与进程</title>
    <url>//posts/20210220-5bf4d040.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2>
<h3 id="通信方式"><a class="markdownIt-Anchor" href="#通信方式"></a> 通信方式</h3>
<h4 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道</h4>
<p>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>
<h4 id="有名管道"><a class="markdownIt-Anchor" href="#有名管道"></a> 有名管道</h4>
<p>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信；</p>
<h4 id="信号量"><a class="markdownIt-Anchor" href="#信号量"></a> 信号量</h4>
<p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段；</p>
<h4 id="消息队列"><a class="markdownIt-Anchor" href="#消息队列"></a> 消息队列</h4>
<p>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点；</p>
<h4 id="信号"><a class="markdownIt-Anchor" href="#信号"></a> 信号</h4>
<p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</p>
<h4 id="共享内存"><a class="markdownIt-Anchor" href="#共享内存"></a> 共享内存</h4>
<p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制（如信号量）配合使用，来实现进程间的同步和通信；</p>
<h4 id="套接字"><a class="markdownIt-Anchor" href="#套接字"></a> 套接字</h4>
<p>套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信</p>
<h2 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h2>
<h3 id="通信方式-2"><a class="markdownIt-Anchor" href="#通信方式-2"></a> 通信方式</h3>
<p>线程间的通信目的主要是用于线程同步，所以线程没有像进程通信中的用于数据交换的通信机制。</p>
<h4 id="锁机制"><a class="markdownIt-Anchor" href="#锁机制"></a> 锁机制</h4>
<ol>
<li>互斥锁：提供了以排他方式防止数据结构被并发修改的方法</li>
<li>读写锁：允许多个线程同时读共享数据，而对写操作是互斥的</li>
<li>条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件的测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用；</li>
</ol>
<h4 id="信号量-2"><a class="markdownIt-Anchor" href="#信号量-2"></a> 信号量</h4>
<p>包括无名线程信号量和命名线程信号量</p>
<h4 id="信号机制"><a class="markdownIt-Anchor" href="#信号机制"></a> 信号机制</h4>
<p>类似进程间的信号处理</p>
<h4 id="join"><a class="markdownIt-Anchor" href="#join"></a> join</h4>
<p>main是主线程，在main中创建了thread线程，在main中调用了thread.join()，那么等thread结束后再执行main代码。</p>
<p>在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</p>
<h2 id="区别与联系"><a class="markdownIt-Anchor" href="#区别与联系"></a> 区别与联系</h2>
<h3 id="划分尺度"><a class="markdownIt-Anchor" href="#划分尺度"></a> 划分尺度</h3>
<p><em>线程</em>小于<em>进程</em></p>
<blockquote>
<p>使得多线程的并发性高；</p>
</blockquote>
<h3 id="执行过程"><a class="markdownIt-Anchor" href="#执行过程"></a> 执行过程</h3>
<ul>
<li><em>进程</em>拥有独立的内存单元，<em>线程</em>共享内存</li>
</ul>
<blockquote>
<p>使多线程提供了程序的运行效率，避免了内存切换</p>
</blockquote>
<ul>
<li>每个线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</li>
</ul>
<h3 id="多执行"><a class="markdownIt-Anchor" href="#多执行"></a> 多执行</h3>
<ul>
<li>多线程的意义在于一个应用程序中，有多个执行部分可以同时执行</li>
<li>多进程的意思在于并行多个程序</li>
</ul>
<h3 id="在linux系统中"><a class="markdownIt-Anchor" href="#在linux系统中"></a> 在Linux系统中</h3>
<ul>
<li>线程机制提供了在统一程序内共享内存地址空间运行的一组线程</li>
<li>在内核角度，没有线程的概念，而是把所有的线程当作进程来实现（调度算法等也是与进程一样）</li>
</ul>
<blockquote>
<p>简单的说就是线程是一个与其他进程共享某些资源的进程</p>
</blockquote>
<blockquote>
<p>参考《linux内核设计与实现》，3.4节，注意看3.4.3小节，线程的创建与进程的创建一样，不过需要传递参数</p>
</blockquote>
<h3 id="其他系统"><a class="markdownIt-Anchor" href="#其他系统"></a> 其他系统</h3>
<p>提供了专门支持线程的机制</p>
<h3 id="重要区别"><a class="markdownIt-Anchor" href="#重要区别"></a> 重要区别</h3>
<p><em>线程</em>是CPU执行和调度的基础单元；<br />
<em>进程</em>是资源分配的基础单元；</p>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>用户与内核空间</title>
    <url>//posts/20210220-6a4da07b.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="用户空间与内核空间"><a class="markdownIt-Anchor" href="#用户空间与内核空间"></a> 用户空间与内核空间</h2>
<p>在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G（2的32次方）。操心系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核，保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。每个进程可以通过系统调用进入内核，因此，Linux内核由系统内的所有进程共享。于是，从具体进程的角度来看，每个进程可以拥有4G字节的虚拟空间。空间分配如下图所示：</p>
<p><img src="/assets/images/4c0db47c8f724163b937d285625c75b2.png" alt="4c0db47c8f724163b937d285625c75b2" /></p>
<p>有了用户空间和内核空间，整个linux内部结构可以分为三部分，从最底层到最上层依次是：硬件–&gt;内核空间–&gt;用户空间。如下图所示：</p>
<p><img src="/assets/images/be17db6137414adaaee5f56227255ada.png" alt="be17db6137414adaaee5f56227255ada" /></p>
<blockquote>
<ol>
<li>内核空间中存放的是内核代码和数据，而进程的用户空间中存放的是用户程序的代码和数据。不管是内核空间还是用户空间，它们都处于虚拟空间中；</li>
<li>Linux使用两级保护机制：0级供内核使用，3级供用户程序使用</li>
</ol>
</blockquote>
<h3 id="内核态"><a class="markdownIt-Anchor" href="#内核态"></a> 内核态</h3>
<p>当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态）。此时处理器处于特权级最高的（0级）内核代码中执行。当进程处于内核态时，执行的内核代码会使用当前进程的内核栈。每个进程都有自己的内核栈；</p>
<h3 id="用户态"><a class="markdownIt-Anchor" href="#用户态"></a> 用户态</h3>
<p>当进程在执行用户自己的代码时，则称其处于用户运行态（用户态）。此时处理器在特权级最低的（3级）用户代码中运行。当正在执行用户程序而突然被中断程序中断时，此时用户程序也可以象征性地称为处于进程的内核态。因为中断处理程序将使用当前进程的内核栈；</p>
<h2 id="进程上下文与中断上下文"><a class="markdownIt-Anchor" href="#进程上下文与中断上下文"></a> 进程上下文与中断上下文</h2>
<h3 id="进程上下文状态"><a class="markdownIt-Anchor" href="#进程上下文状态"></a> 进程上下文状态</h3>
<p>程序在执行过程中通常有用户态和内核态两种状态，CPU对处于内核态根据上下文环境进一步细分，因此有了下面三种状态：</p>
<ol>
<li>内核态，运行于进程上下文，内核代表进程运行于内核空间</li>
<li>内核态，运行于中断上下文，内核代表硬件运行于内核空间</li>
<li>用户态，运行于用户空间</li>
</ol>
<h3 id="上下文环境"><a class="markdownIt-Anchor" href="#上下文环境"></a> 上下文环境</h3>
<p>所谓的“进程上下文”，可以看作是用户进程传递给内核的这些参数以及内核要保存的那一整套的变量和寄存器值和当时的环境等；</p>
<p>进程执行时的环境，具体来说就是各个变量和数据，包括所有的寄存器变量、进程打开的文件、内存信息等。一个进程的上下文可以分为三个部分</p>
<ol>
<li>用户级上下文: 正文、数据、用户堆栈以及共享存储区；</li>
<li>寄存器上下文: 通用寄存器、程序寄存器(IP)、处理器状态寄存器(EFLAGS)、栈指针(ESP)；</li>
<li>系统级上下文: 进程控制块task_struct、内存管理信息(mm_struct、vm_area_struct、pgd、pte)、内核栈。</li>
</ol>
]]></content>
      <categories>
        <category>primary</category>
        <category>os</category>
      </categories>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>//posts/20210414-118b8ca3.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/7f6ee4e75da741cdb45384ea43842306.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>primary</category>
        <category>principle</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解计算机系统</title>
    <url>//posts/20210414-e8670b7a.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/a2eaa602b6c24b63bfd1372c62612b00.pdf">PDF</a></h1>
<h3 id="字长与虚拟地址范围关系"><a class="markdownIt-Anchor" href="#字长与虚拟地址范围关系"></a> 字长与虚拟地址范围关系</h3>
<blockquote>
<p>首先要明白“字”的含义：是用来表示一次性处理事务的固定长度。</p>
<p>一个字的位数，即<strong>字长</strong></p>
<p>计算机中大多数<a href="https://baike.baidu.com/item/%E5%AF%84%E5%AD%98%E5%99%A8">寄存器</a>的大小是一个字长。计算机处理的典型数值也可能是以字长为单位。<a href="https://baike.baidu.com/item/CPU">CPU</a>和<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98">内存</a>之间的数据传送单位也通常是一个字长。还有内存中用于指明一个存储位置的地址也经常是以字长为单位的。</p>
</blockquote>
<p>字长决定的是每次同时处理的位数，由数据线决定。<br />
指针变量中存放的是地址值，是一个整数，这个数的最大值受字长限制；<br />
所以一个指针变量所能指向的最大地址范围是由字长决定的，指针的值就是虚拟地址，但<code>虚拟地址范围不等同于寻址空间</code>；</p>
<ul>
<li>操作系统负责管理虚拟地址空间，并将虚拟地址翻译为物理地址；</li>
</ul>
<h3 id="右移"><a class="markdownIt-Anchor" href="#右移"></a> 右移</h3>
<h4 id="算数右移"><a class="markdownIt-Anchor" href="#算数右移"></a> 算数右移</h4>
<ul>
<li>在左端补n个最高有效位；</li>
<li>针对有符号数，默认或假设是这样；</li>
</ul>
<h4 id="逻辑右移"><a class="markdownIt-Anchor" href="#逻辑右移"></a> 逻辑右移</h4>
<ul>
<li>在左端补n个0；</li>
<li>针对无符号数，必须是这样；</li>
</ul>
<h3 id="正码-反码和补码"><a class="markdownIt-Anchor" href="#正码-反码和补码"></a> 正码、反码和补码</h3>
<table>
<thead>
<tr>
<th>x</th>
<th>[x]正码</th>
<th>[x]反码</th>
<th>[x]补码</th>
<th>[-x]补</th>
</tr>
</thead>
<tbody>
<tr>
<td>正数</td>
<td>普通二进制</td>
<td>同正码</td>
<td>同正码</td>
<td>[x]补码各位取反+1，包括符号位</td>
</tr>
<tr>
<td>负数</td>
<td></td>
<td>正码除符号位之外取反</td>
<td>反码+1</td>
<td>[x]补码各位取反+1，包括符号位</td>
</tr>
</tbody>
</table>
<blockquote>
<p>反码真实值计算公式：w是二进制位数</p>
</blockquote>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mo>−</mo><msub><mi>x</mi><mrow><mi>w</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>∗</mo><msup><mn>2</mn><mrow><mi>w</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>w</mi><mo>−</mo><mn>2</mn></mrow></munderover><msub><mi>x</mi><mi>i</mi></msub><mo>∗</mo><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">V = -x_{w-1}*2^{w-1} + \sum_{i=0}^{w-2}x_i*2^i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li>补码加减法：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>y</mi><mo stretchy="false">]</mo><mi mathvariant="normal">补</mi><mo>=</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mi mathvariant="normal">补</mi><mo>+</mo><mo stretchy="false">[</mo><mo>±</mo><mi>y</mi><mo stretchy="false">]</mo><mi mathvariant="normal">补</mi></mrow><annotation encoding="application/x-tex">[x+y]补 = [x]补+[±y]补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mord cjk_fallback">补</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mord cjk_fallback">补</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">±</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mord cjk_fallback">补</span></span></span></span></li>
</ul>
<h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h3>
<ul>
<li>C语言只指定了每种数据类型的最小范围而不是确定范围；</li>
<li>无符号与有符号类型转换规则：数值会变，位不变；</li>
</ul>
<h3 id="汇编语言"><a class="markdownIt-Anchor" href="#汇编语言"></a> 汇编语言</h3>
<ul>
<li><a href="http://c.biancheng.net/view/3294.html">学习网站</a></li>
</ul>
]]></content>
      <categories>
        <category>primary</category>
        <category>principle</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>现代编译原理-c语言描述</title>
    <url>//posts/20210414-10df4f3b.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8b046253a170475c852d7c7f16ad712a.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>primary</category>
        <category>principle</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁之道</title>
    <url>//posts/20210414-2f4d2249.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>project-management</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机程序设计艺术</title>
    <url>//posts/20210414-8747a79d.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="卷1-pdf"><a class="markdownIt-Anchor" href="#卷1-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/20bf12ade4e147f48f8fa914e93ad422.pdf">卷1 PDF</a></h1>
<h1 id="卷2-pdf"><a class="markdownIt-Anchor" href="#卷2-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/cf6f813950bd4367bcb9cafc35caddf0.pdf">卷2 PDF</a></h1>
<h1 id="卷3-pdf"><a class="markdownIt-Anchor" href="#卷3-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/990e77225cd94e899cee447e1698a8eb.pdf">卷3 PDF</a></h1>
<h1 id="卷1-英文-pdf"><a class="markdownIt-Anchor" href="#卷1-英文-pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/411cf651e1c94529a6dc2d31a4f1d9b3.pdf">卷1-？英文 PDF</a></h1>
<blockquote>
<p>不知道</p>
</blockquote>
]]></content>
      <categories>
        <category>primary</category>
        <category>principle</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>git-branching-model</title>
    <url>//posts/20210415-c43737e6.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/e4bd6dc284824a87a469e7c17f1efdf0.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>project-management</category>
        <category>code</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>项目管理知识体系指南</title>
    <url>//posts/20210415-6f3994c0.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div>-->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/201c59c80de74f0db7017aa2dda2d5a5.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>project-management</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>api版本命名规则</title>
    <url>//posts/20211108-79b5eea1.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p><img src="/assets/images/43e12f067ad9494a8c8b841dc8225718.jpg" alt="43e12f067ad9494a8c8b841dc8225718" /></p>
<p><img src="/assets/images/1b782174f12243bd82d3bc74b8d6488f.jpg" alt="1b782174f12243bd82d3bc74b8d6488f" /></p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p>[接口（Api）版本号命名规则] (<a href="https://blog.csdn.net/u012107143/article/details/78731272">https://blog.csdn.net/u012107143/article/details/78731272</a>)</p>
]]></content>
      <categories>
        <category>project-management</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>beyondcompare</title>
    <url>//posts/20210220-940c2250.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="v4"><a class="markdownIt-Anchor" href="#v4"></a> v4</h2>
<p>delete or rename <code>registry.dat</code> and <code>BC4Key.txt</code> files in directory <code>Beyond Compare</code></p>
<p><code>delete /Users/fengdy/Library/Application Support/Beyond Compare</code></p>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>charles</title>
    <url>//posts/20210220-36babffb.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="v1"><a class="markdownIt-Anchor" href="#v1"></a> v1</h2>
<ol>
<li>
<p>用户名</p>
<p><code>https://zhile.io</code></p>
</li>
<li>
<p>注册码</p>
<p><code>48891cf209c6d32bf4</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>hexo</title>
    <url>//posts/20210220-ab21860c.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h1>
<h2 id="next主题table-of-content-无效"><a class="markdownIt-Anchor" href="#next主题table-of-content-无效"></a> next主题table of content 无效</h2>
<p><code>npm uninstall hexo-toc</code></p>
<h2 id="首页只显示部分摘要不显示全文"><a class="markdownIt-Anchor" href="#首页只显示部分摘要不显示全文"></a> 首页只显示部分摘要（不显示全文）</h2>
<p>修改配置<code>excerpt_description: true</code></p>
<ol>
<li>写概述，在文章的front-matter中添加description</li>
<li>文章截断，在文中需要的地方写<code>&lt;!--more--&gt;</code></li>
</ol>
<h2 id="中文目录不能跳转"><a class="markdownIt-Anchor" href="#中文目录不能跳转"></a> 中文目录不能跳转</h2>
<p><a href="https://github.com/theme-next/hexo-theme-next/pull/1540/files">https://github.com/theme-next/hexo-theme-next/pull/1540/files</a></p>
<blockquote>
<p>themes/next/source/js/util.js 中增加两行代码，删除两行代码</p>
</blockquote>
<p><img src="/assets/images/53f8c4ae241d44d4ad122c184eb7312c.jpeg" alt="53f8c4ae241d44d4ad122c184eb7312c" /></p>
<h2 id="katex无效"><a class="markdownIt-Anchor" href="#katex无效"></a> katex无效</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save # or hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>navicate</title>
    <url>//posts/20210220-d2d6018e.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="无限使用"><a class="markdownIt-Anchor" href="#无限使用"></a> 无限使用</h2>
<ol>
<li>
<p>脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VER=120 <span class="comment"># 你使用的Navicat Premium版本号，12.0.x为120，12.1.x为121，以此类推。</span></span><br><span class="line">DSTR=$(date +%Y%m%d)</span><br><span class="line">defaults write ~/Library/Preferences/com.prect.NavicatPremium12.plist ptc<span class="variable">$VER</span> <span class="string">&quot;<span class="variable">$DSTR</span>&quot;</span></span><br><span class="line">defaults write ~/Library/Preferences/com.prect.NavicatPremium12.plist ptcl<span class="variable">$VER</span> <span class="string">&quot;<span class="variable">$DSTR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$DSTR</span>&quot;</span> &gt; ~/Library/Application\ Support/PremiumSoft\ CyberTech/Navicat\ CC/Navicat\ Premium/.tc<span class="variable">$VER</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$DSTR</span>&quot;</span> &gt; ~/Library/Caches/com.prect.NavicatPremium12/.tcl<span class="variable">$VER</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加host</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0.0.0.0 activate.navicat.com</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>pycharm</title>
    <url>//posts/20210220-1a3626ab.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="激活"><a class="markdownIt-Anchor" href="#激活"></a> 激活</h2>
<ol>
<li>获取注册码地址： <a href="http://idea.lanyus.com">http://idea.lanyus.com</a></li>
<li>输入注册码</li>
<li><code>this license XXXXXXXX has been cancelled</code> 错误
<ol>
<li>追加<code>0.0.0.0 account.jetbrains.com</code>到<code>/ets/hosts</code></li>
<li>重新申请注册码</li>
</ol>
</li>
</ol>
<h2 id="包源"><a class="markdownIt-Anchor" href="#包源"></a> 包源</h2>
<blockquote>
<p>https不行就用http</p>
</blockquote>
<ul>
<li><a href="https://pypi.python.org/pypi">https://pypi.python.org/pypi</a></li>
<li><a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li>
<li><a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></li>
</ul>
<h2 id="控制台中文编码设置"><a class="markdownIt-Anchor" href="#控制台中文编码设置"></a> 控制台中文编码设置</h2>
<p>修改pycharm.exe.vmoptions文件, 添加-Dfile.encoding=UTF-8 将本地环境设置为UTF-8</p>
<h2 id="尽量将文字风格更改为source-code"><a class="markdownIt-Anchor" href="#尽量将文字风格更改为source-code"></a> 尽量将文字风格更改为Source Code</h2>
<h2 id="右下角小人用于设置下划波浪线"><a class="markdownIt-Anchor" href="#右下角小人用于设置下划波浪线"></a> 右下角小人用于设置下划波浪线</h2>
<p>主要用于：</p>
<ol>
<li>None：无</li>
<li>Syntax，只有语法错误时才显示波浪线；</li>
<li>Inspections，语法错误或不符合PEB8规范时显示</li>
</ol>
<h2 id="模板变量"><a class="markdownIt-Anchor" href="#模板变量"></a> 模板变量</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;PROJECT_NAME&#125;</span> - 当前Project名称;</span><br><span class="line"><span class="variable">$&#123;NAME&#125;</span> - 在创建文件的对话框中指定的文件名;</span><br><span class="line"><span class="variable">$&#123;USER&#125;</span> - 当前用户名;</span><br><span class="line"><span class="variable">$&#123;DATE&#125;</span> - 当前系统日期;</span><br><span class="line"><span class="variable">$&#123;TIME&#125;</span> - 当前系统时间;</span><br><span class="line"><span class="variable">$&#123;YEAR&#125;</span> - 年;</span><br><span class="line"><span class="variable">$&#123;MONTH&#125;</span> - 月;</span><br><span class="line"><span class="variable">$&#123;DAY&#125;</span> - 日;</span><br><span class="line"><span class="variable">$&#123;HOUR&#125;</span> - 小时;</span><br><span class="line"><span class="variable">$&#123;MINUTE&#125;</span> - 分钟；</span><br><span class="line"><span class="variable">$&#123;PRODUCT_NAME&#125;</span> - 创建文件的IDE名称;</span><br><span class="line"><span class="variable">$&#123;MONTH_NAME_SHORT&#125;</span> - 英文月份缩写, 如: Jan, Feb, etc;</span><br><span class="line"><span class="variable">$&#123;MONTH_NAME_FULL&#125;</span> - 英文月份全称, 如: January, February, etc；</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>securecrt</title>
    <url>//posts/20210220-d987e0dd.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="mac下无限使用"><a class="markdownIt-Anchor" href="#mac下无限使用"></a> mac下无限使用</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm Users/用户名/Library/Application Support/VanDyke/SecureCRT/Config/SecureCRT_eval.lic</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>sourcetree</title>
    <url>//posts/20210220-aba14267.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="外部差异对比使用beyondcompare"><a class="markdownIt-Anchor" href="#外部差异对比使用beyondcompare"></a> 外部差异对比使用BeyondCompare</h2>
<ol>
<li>
<p>安装Install Command Line Tools</p>
</li>
<li>
<p>建立链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln /Applications/Beyond\ Compare.app/Contents/MacOS/bcomp /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置<br />
打开SourceTree，打开主菜单，选中diff选项卡</p>
</li>
</ol>
<blockquote>
<p>可视对比工具：自定义<br />
比较命令：<code>/usr/local/bin/bcomp</code><br />
参数：<code>$LOCAL $REMOTE</code></p>
</blockquote>
<blockquote>
<p>合并工具：自定义<br />
合并命令：<code>/usr/local/bin/bcomp</code><br />
参数：<code>$LOCAL $REMOTE $BASE $MERGED</code></p>
</blockquote>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>sublime</title>
    <url>//posts/20210220-238c95be.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="3激活码"><a class="markdownIt-Anchor" href="#3激活码"></a> 3激活码</h2>
<h2 id="package-control手动安装"><a class="markdownIt-Anchor" href="#package-control手动安装"></a> Package Control手动安装</h2>
<ol>
<li>下载https://github.com/wbond/package_control</li>
<li>解压重命名为Package Control</li>
<li>将文件夹复制到sublimetext/Packages/, 与User目录同级</li>
</ol>
<blockquote>
<p>打开Sublime Text 2，点击PreFerences --&gt; Browse Packages，进入一个文件夹后返回该文件夹的上一级“Sublime Text2”，找到一个“Installed Packages”文件夹（如果没有该文件夹则创建个新的），将下载好的Package Control的安装包放到“Installed Packages”文件夹下即可；</p>
</blockquote>
<blockquote>
<p>Sublime Text 2 的安装路径，“Sublime Text 2\Pristine Packages\”文件夹下</p>
</blockquote>
<h2 id="package-control在线安装"><a class="markdownIt-Anchor" href="#package-control在线安装"></a> Package Control在线安装</h2>
<ol>
<li>打开<code>Ctrl+~</code></li>
<li>输入</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,os; pf=<span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="literal">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); <span class="built_in">open</span>( os.path.join( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).write( urllib2.urlopen( <span class="string">&#x27;http://sublime.wbond.net/&#x27;</span> +pf.replace( <span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;%20&#x27;</span> )).read()); <span class="built_in">print</span>( <span class="string">&#x27;Please restart Sublime Text to finish installation&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="package-control使用"><a class="markdownIt-Anchor" href="#package-control使用"></a> Package Control使用</h2>
<p>打开<code>cmd＋shift＋p</code>，输入install package，输入要安装的插件</p>
<h3 id="there-are-no-packages-available-for-installation"><a class="markdownIt-Anchor" href="#there-are-no-packages-available-for-installation"></a> There are no packages available for installation</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Preferences &gt; Package Settings &gt; Package Control &gt; Settings - User 输入 &#123; <span class="string">&quot;channels&quot;</span>: [ <span class="string">&quot;https://packagecontrol.io/channel_v3.json&quot;</span>, <span class="string">&quot;https://web.archive.org/web/20150905194312/https://packagecontrol.io/channel_v3.json&quot;</span> ] &#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件列表"><a class="markdownIt-Anchor" href="#插件列表"></a> 插件列表</h2>
<h3 id="jsformat"><a class="markdownIt-Anchor" href="#jsformat"></a> jsformat</h3>
<h3 id="less"><a class="markdownIt-Anchor" href="#less"></a> Less</h3>
<p>Less高亮</p>
<h3 id="alignment"><a class="markdownIt-Anchor" href="#alignment"></a> Alignment</h3>
<p>自动对齐<br />
选中要调整的行，然后按 <code>Ctrl+ Alt + A</code></p>
<h3 id="jquery"><a class="markdownIt-Anchor" href="#jquery"></a> jquery</h3>
<p>自动补全</p>
<h3 id="docblocker"><a class="markdownIt-Anchor" href="#docblocker"></a> DocBlocker</h3>
<p>注释格式化,轻松地创建许多语言包括JavaScript，PHP和CoffeeScript的文档块<br />
输入<code>/**</code>，按Tab就可以了</p>
<blockquote>
<p>python 好像不行</p>
</blockquote>
<h3 id="colorpicker"><a class="markdownIt-Anchor" href="#colorpicker"></a> ColorPicker</h3>
<p>调色板取色</p>
<h3 id="colorhighlight"><a class="markdownIt-Anchor" href="#colorhighlight"></a> ColorHighLight</h3>
<h3 id="autofilename"><a class="markdownIt-Anchor" href="#autofilename"></a> AutoFileName</h3>
<p>自动补全路径</p>
<h3 id="sublimecodeintel"><a class="markdownIt-Anchor" href="#sublimecodeintel"></a> SublimeCodeIntel</h3>
<p>函数跳转</p>
<h3 id="markdownediting"><a class="markdownIt-Anchor" href="#markdownediting"></a> MarkdownEditing</h3>
<p>一个提高Sublime中Markdown编辑特性的插件</p>
<h3 id="markdownpreview"><a class="markdownIt-Anchor" href="#markdownpreview"></a> MarkdownPreview</h3>
<p>Markdown转HTML，提供在浏览器中的预览功能</p>
<h3 id="brackethighlighter"><a class="markdownIt-Anchor" href="#brackethighlighter"></a> BracketHighlighter</h3>
<p>提供行数列高亮的各种配对的语法符号。（愚人码头注：就是将配对的括号等显示在行数列上）</p>
<h3 id="sidebarenhancements"><a class="markdownIt-Anchor" href="#sidebarenhancements"></a> SidebarEnhancements</h3>
<p>增强侧边栏的文件上右击;<br />
只有打开文件夹时才起作用</p>
<h3 id="sublimerepl"><a class="markdownIt-Anchor" href="#sublimerepl"></a> SublimeREPL</h3>
<p>交互式调试程序</p>
<h4 id="运行当前文件的交互环境"><a class="markdownIt-Anchor" href="#运行当前文件的交互环境"></a> 运行当前文件的交互环境</h4>
<p><code>SublimeREPL\\config\\Python\\</code>找到Main.sublime-menu文件,找到id 为 repl_python行，修改<br />
<code>&quot;cmd&quot;: [&quot;python&quot;, &quot;-i&quot;, &quot;-u&quot;,&quot;$file_basename&quot;]</code></p>
<h4 id="pdb常用命令"><a class="markdownIt-Anchor" href="#pdb常用命令"></a> pdb常用命令</h4>
<ul>
<li>b，break，设置断点</li>
<li>c，continue，继续执行</li>
<li>l，list，查看当前代码</li>
<li>s，step，进入函数</li>
<li>r，return，执行到函数返回</li>
<li>q，quit，退出</li>
<li>n，next，执行下一行</li>
<li>pp，print，打印变量</li>
<li>h，help，帮助</li>
</ul>
<h4 id="快捷键绑定"><a class="markdownIt-Anchor" href="#快捷键绑定"></a> 快捷键绑定</h4>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;keys&quot;</span>: [<span class="string">&quot;f5&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;SublimeREPL: Python - RUN current file&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;run_existing_window_command&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_run&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;config/Python/Main.sublime-menu&quot;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">&quot;keys&quot;</span>: [<span class="string">&quot;f8&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;caption&quot;</span>: <span class="string">&quot;SublimeREPL: Python - PDB current file&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;run_existing_window_command&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;args&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;repl_python_pdb&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;config/Python/Main.sublime-menu&quot;</span>&#125;</span><br><span class="line">    &#125;,   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>svn</title>
    <url>//posts/20210220-7a999d34.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<h3 id="svn-server配置"><a class="markdownIt-Anchor" href="#svn-server配置"></a> svn-server配置</h3>
<ol>
<li>
<p>创建<br />
<code>svnadmin create /svn-server</code><br />
目录结构为：<br />
<img src="evernotecid://B62E03A7-9855-4E89-8AE8-17FEFD3A3510/appyinxiangcom/3147905/ENResource/p299" alt="1cfb100ccd79a6a2345bd6992ea1aec8.png" /></p>
</li>
<li>
<p>配置</p>
</li>
</ol>
<blockquote>
<p>conf目录，具体见文档</p>
</blockquote>
<ul>
<li>passwd文件，设置用户名和密码</li>
<li>authz文件，设置用户组和权限</li>
<li>svnserve.conf文件，设置校验规则，需要打开一下选项：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anon-access = <span class="literal">true</span></span><br><span class="line">auth-access = write</span><br><span class="line">password-db = passwd</span><br><span class="line">authz-db = authz</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="启动"><a class="markdownIt-Anchor" href="#启动"></a> 启动</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnserve --<span class="built_in">help</span></span><br><span class="line">svnserve -d -r /svn-server</span><br></pre></td></tr></table></figure>
<h3 id="备份"><a class="markdownIt-Anchor" href="#备份"></a> 备份</h3>
<ol>
<li><code>svnadmin dump</code>
<ol>
<li>
<p>优点<br />
官方推荐可全量或增量备份，并提供了版本恢复机制；<br />
增量备份与恢复的前提是版本库已存在；</p>
</li>
<li>
<p>缺点<br />
版本比较大时，使用全量比较慢，此时需要与增量结合使用；</p>
</li>
</ol>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnadmin dump <span class="built_in">test</span> &gt; test.bak    <span class="comment">#备份并导入到文件</span></span><br><span class="line"><span class="comment"># --incremental 是增量备份，即即每次都只导出自上一个版本以来的修改即该版本的修改。这样的好处是第一：可以把一个大的文 件切分成若干个小的文件。第二：在版本库已经存在的情况下，我们只需要每次导出修改的部分</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>svn hotcopy</code>
<ol>
<li>全量拷贝，备份与恢复较快</li>
<li>比较消耗硬盘</li>
</ol>
</li>
<li><code>svnsync</code>
<ol>
<li>其实是两个镜像库，需要1.4+版本</li>
<li>两个库</li>
</ol>
</li>
</ol>
<h3 id="恢复"><a class="markdownIt-Anchor" href="#恢复"></a> 恢复</h3>
<blockquote>
<p>其本质是将备份作为新的提交，并生成新的版本；所以在备份与恢复时尽量让版本一致增长；</p>
</blockquote>
<p><code>svnadmin load</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svnadmin dump testA -r 6 &gt; test-r6.bak   <span class="comment">#备份机器A上的testA库的制定版本到备份文件</span></span><br><span class="line">svnadmin load testB &lt; test-r6.bak    <span class="comment">#加载备份文件到testB库</span></span><br><span class="line"><span class="comment">#若在checkout testB库之后执行，则update会报错，需要重新checkout</span></span><br><span class="line"><span class="comment">#对于全备份没有问题，即只针对使用 -r 参数有效</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2>
<h3 id="出现svn-e220001-item-is-not-readable"><a class="markdownIt-Anchor" href="#出现svn-e220001-item-is-not-readable"></a> 出现svn: E220001: Item is not readable；</h3>
<p>根据是否需要匿名访问，分为以下两种方式解决：</p>
<ol>
<li>允许匿名访问
<ol>
<li>svnserve.conf文件，<code>anon-access=read</code></li>
<li>authz文件，［/］下添加 <code>*=r</code></li>
</ol>
</li>
<li>禁止匿名访问
<ol>
<li>svnserver.conf文件，<code>anon-access=none</code></li>
<li>authz文件中[/]下只需配置相关的用户即可</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>tar解压缩</title>
    <url>//posts/20211011-518aed09.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="常用扩展名"><a class="markdownIt-Anchor" href="#常用扩展名"></a> 常用扩展名</h2>
<h3 id="z"><a class="markdownIt-Anchor" href="#z"></a> <code>.Z</code></h3>
<p>使用<code>compress</code>进行压缩，基本淘汰；</p>
<h3 id="gz"><a class="markdownIt-Anchor" href="#gz"></a> <code>.gz</code></h3>
<p><code>gzip</code>程序压缩</p>
<h3 id="bz2"><a class="markdownIt-Anchor" href="#bz2"></a> <code>.bz2</code></h3>
<p><code>bzip2</code>压缩</p>
<h3 id="targztgz"><a class="markdownIt-Anchor" href="#targztgz"></a> <code>.tar.gz(.tgz)</code></h3>
<p>用<code>tar</code>打包后再用<code>gzip</code>程序进行了压缩</p>
<h3 id="tarbz2"><a class="markdownIt-Anchor" href="#tarbz2"></a> <code>.tar.bz2</code></h3>
<p>用<code>tar</code>打包后再用<code>bzip2</code>程序进行了压缩</p>
<h3 id="xz"><a class="markdownIt-Anchor" href="#xz"></a> <code>.xz?</code></h3>
<h2 id="常用压缩命令"><a class="markdownIt-Anchor" href="#常用压缩命令"></a> 常用压缩命令</h2>
<h3 id="gzip"><a class="markdownIt-Anchor" href="#gzip"></a> <code>gzip</code></h3>
<blockquote>
<p>gzip只能压缩文件 , 不能压缩目录 ,后缀名为.gz , 而且不保留原文件;</p>
<p>压缩最快；</p>
</blockquote>
<p>令压缩文件后，原文件不会保留，同时gzip压缩的文件在windows中也可以被解压，gzip指令可以解压compress压缩的文件;</p>
<ul>
<li>
<p>压缩等级1-9，越高越好，但也越慢，默认是6</p>
</li>
<li>
<p>gzip压缩后的文件如果想要查看，可以用<strong>zcat</strong>指令查看</p>
</li>
</ul>
<h3 id="bzip2"><a class="markdownIt-Anchor" href="#bzip2"></a> <code>bzip2</code></h3>
<p>bzip2是用来取代gzip指令的，就像gzip是取代compress一样，bzip2的压缩要比gzip更好，gzip有zcat查看压缩文件，bzip2有bzcat;</p>
<h3 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> <code>zip</code></h3>
<h3 id="tar"><a class="markdownIt-Anchor" href="#tar"></a> <code>tar</code></h3>
<ul>
<li>-z  以gzip命令压缩/解压缩 ,文件格式.tar.gz（.tgz）</li>
<li>-j  以bzip2命令压缩/解压缩,文件格式.tar.bz2</li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>tcpdump</title>
    <url>//posts/20210220-94d11844.html</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><code>tcp</code>是指tcp包</li>
<li><code>tcp[12:1]</code>是指tcp格式中首部长度部分，字段长度为<code>4bit</code>，所以需要按位与<code>&amp; 0xf0</code>，其单位为4B，所以需要右移2位（即<code>*32</code>）</li>
<li>具体请看tcp包格式</li>
</ul>
<h2 id="http-post抓包"><a class="markdownIt-Anchor" href="#http-post抓包"></a> http post抓包</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcpdump -s 0 -A <span class="string">&#x27;tcp dst port 80 and (tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354)</span></span><br></pre></td></tr></table></figure>
<h2 id="http-get"><a class="markdownIt-Anchor" href="#http-get"></a> http get</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -s 0 -A &#x27;tcp dst port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="http-响应头和数据"><a class="markdownIt-Anchor" href="#http-响应头和数据"></a> http 响应头和数据</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -A -s 0 &#x27;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>ultraiso</title>
    <url>//posts/20210220-c3a6ac41.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="v7"><a class="markdownIt-Anchor" href="#v7"></a> v7</h2>
<ol>
<li>
<p>用户</p>
<p><code>YANHUA</code></p>
</li>
<li>
<p>注册号</p>
<p><code>1995-FFDD-8FEC-E868</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>vmware</title>
    <url>//posts/20210220-92374b12.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="激活"><a class="markdownIt-Anchor" href="#激活"></a> 激活</h2>
<h3 id="50"><a class="markdownIt-Anchor" href="#50"></a> 5.0</h3>
<ul>
<li>序列号<br />
601A0-EDEA9-PA121-436VT</li>
</ul>
<h3 id="60"><a class="markdownIt-Anchor" href="#60"></a> 6.0</h3>
<ul>
<li>序列号<br />
AA405-2DN6J-ZE7E5-4JNV9</li>
</ul>
<h3 id="11"><a class="markdownIt-Anchor" href="#11"></a> 11</h3>
<ul>
<li>注册号<br />
4A2A6-FHH0H-HZ281-1UCN4-025QA</li>
</ul>
<h3 id="12"><a class="markdownIt-Anchor" href="#12"></a> 12</h3>
<ul>
<li>注册号</li>
</ul>
<blockquote>
<p>VY1DU-2VXDH-08DVQ-PXZQZ-P2KV8</p>
</blockquote>
<blockquote>
<p>VF58R-28D9P-0882Z-5GX7G-NPUTF</p>
</blockquote>
<blockquote>
<p>YG7XR-4GYEJ-4894Y-VFMNZ-YA296</p>
</blockquote>
<h2 id="网络设备类型"><a class="markdownIt-Anchor" href="#网络设备类型"></a> 网络设备类型</h2>
<h3 id="1桥接"><a class="markdownIt-Anchor" href="#1桥接"></a> 1.桥接</h3>
<p>主机与虚拟机在同一个子网上，连着同一交换机；相当于使用了2台主机；</p>
<h3 id="2nat"><a class="markdownIt-Anchor" href="#2nat"></a> 2.NAT</h3>
<p>虚拟机通过主机上网，但主机与虚拟机之间不同通讯（共享、FTP等都不可以）；</p>
<p>虚拟机借助NAT（网络地址转换）功能，通过主机来访问公网；是由VMnet8（NAT）提供的服务；</p>
<h3 id="3主机模式"><a class="markdownIt-Anchor" href="#3主机模式"></a> 3.主机模式</h3>
<p>相当于主机是双网卡，第2块网卡连着虚拟机，主机和虚拟机可以互相通信，但虚拟机无法通过主机或路由器上网，除非主机上装代理服务或软路由；</p>
<p>此时所有虚拟机是可以相互通信的，但虚拟机与主机是被隔离的；</p>
<h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2>
<h3 id="虚拟机启动centos在启动页面中停留在determining-ip-information-for-eth0"><a class="markdownIt-Anchor" href="#虚拟机启动centos在启动页面中停留在determining-ip-information-for-eth0"></a> 虚拟机启动centos，在启动页面中停留在Determining IP Information for eth0…</h3>
<ol>
<li>修改Centos在vmware中的环境配置，在启动时不检查网卡(VM-&gt;Removeable Devices -&gt; NetWork Adapter -&gt; Disconnect)</li>
<li>正常进入Centos，此时不能正常上网</li>
<li>以root权限编辑以下三个文件（如果都有的话）
<ol>
<li>/etc/sysconfig/network-scripts/ifcfg-eth0</li>
<li>/etc/sysconfig/networking/devices/ifcfg-eth0</li>
<li>/etc/sysconfig/networking/profiles/default/ifcfg-eth0</li>
</ol>
</li>
<li>在以上文件每个文件后面添加下面代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">check_link_down</span></span> ()&#123;</span><br><span class="line">    <span class="built_in">return</span> 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>重启Centos虚拟机</li>
</ol>
<h3 id="使用桥接模式时无法上网"><a class="markdownIt-Anchor" href="#使用桥接模式时无法上网"></a> 使用桥接模式时无法上网；</h3>
<blockquote>
<p>有可能是本地连接没有安装该服务</p>
</blockquote>
<p>本地连接（右键）-&gt; 属性-&gt; 安装，此时到vmware的安装目录下安装netbridge.ini，然后选中即可；</p>
<h4 id="nat模式下尽量使用dhcp分配ip定制没有成功不知道为啥"><a class="markdownIt-Anchor" href="#nat模式下尽量使用dhcp分配ip定制没有成功不知道为啥"></a> NAT模式下尽量使用DHCP分配IP，定制没有成功，不知道为啥</h4>
<p>可以在虚拟机软件（vmware）编辑-&gt;虚拟网络编辑器-&gt;vmnet8(NAT)-&gt;DHCP设置中设置IP的范围为1个，这样就相当于指定了IP</p>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
  </entry>
  <entry>
    <title>windows系统工具</title>
    <url>//posts/20211014-d4919fc3.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="cygwin64"><a class="markdownIt-Anchor" href="#cygwin64"></a> cygwin64</h2>
<ol>
<li>下载路径：<a href="https://cygwin.com/install.html">https://cygwin.com/install.html</a></li>
<li>安装
<ol>
<li>镜像选择第一个（<a href="http://mirros.163.com">http://mirros.163.com</a>)</li>
<li>选择安装软件：gcc-g++，make，wget，tar，gawk，bzip2</li>
</ol>
</li>
<li>安装apt-cyg</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式1</span></span><br><span class="line">wget/curl http://rawgit.com/transcode-open/apt-cyg/master/apt-cyg</span><br><span class="line">chmod +x apt-cyg</span><br><span class="line">mv apt-cyg /bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式2</span></span><br><span class="line">lynx -source raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg &gt; apt-cyg</span><br><span class="line">install apt-cyg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改源</span></span><br><span class="line">apt-cyg --mirrors http://mirrors.163.com/cygwin</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tool</category>
        <category>general</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>vim用户手册</title>
    <url>//posts/20210415-3b000b8f.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div> -->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/9d91d45efebc440d9fc35480e6bc03a7.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>tool</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
  <entry>
    <title>vim</title>
    <url>//posts/20210220-280100fb.html</url>
    <content><![CDATA[<!-- toc -->
<h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1>
<h2 id="升级8"><a class="markdownIt-Anchor" href="#升级8"></a> 升级8</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ncurses-devel</span><br><span class="line">wget https://github.com/vim/vim/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="built_in">cd</span> vim-master/src</span><br><span class="line">./configure  --prefix=/centos/install/vim8 --with-features=huge --enable-multibyte=yes --enable-cscope=yes --enable-python3interp=dynamic --with-python3-config-dir=/centos/install/python3.5.4/lib/python3.5/config-3.5m</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h1>
<p><img src="evernotecid://B62E03A7-9855-4E89-8AE8-17FEFD3A3510/appyinxiangcom/3147905/ENResource/p300" alt="47625f6b5a17145ee9bcccdc53436302.png" /></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">############# &#123;&#125; 表示的需要替换</span></span><br><span class="line"><span class="comment">############# | 表示或</span></span><br><span class="line"><span class="comment">############# [,] 表示或</span></span><br><span class="line"><span class="comment">############# &#123;N&#125; 表示数字</span></span><br><span class="line"><span class="comment">############# &#123;A&#125; 表示字符</span></span><br><span class="line">&#123;N&#125;cc    <span class="comment">#删除N行，并插入</span></span><br><span class="line">&#123;N&#125;dd  <span class="comment">#删除N行，默认为1</span></span><br><span class="line">d$  <span class="comment">#删除至行尾</span></span><br><span class="line">db  <span class="comment">#删除光标前单词，符号和空格</span></span><br><span class="line">dG  <span class="comment">#删除到文尾</span></span><br><span class="line">dw  <span class="comment">#删除单词、标点符号或空格</span></span><br><span class="line">F/f&#123;A[,N]&#125;    <span class="comment">#搜索A或N</span></span><br><span class="line">gg  <span class="comment">#文首</span></span><br><span class="line">gf  <span class="comment">#打开光标处的文件名</span></span><br><span class="line">&#123;N&#125;J    <span class="comment">#将后面的N行合并到当前行</span></span><br><span class="line">&#123;N&#125;yy  <span class="comment">#复制N行，默认为1</span></span><br><span class="line">&#123;N&#125;p <span class="comment">#重复复制N次，默认为1</span></span><br><span class="line">T/t+要搜索的&#123;A|N&#125;，将焦点移动到行内A|N的t（前）面或T（后）</span><br><span class="line">ZZ  <span class="comment">#保存退出中间</span></span><br><span class="line">ZQ  <span class="comment">#不保存退出</span></span><br><span class="line">&#123;N&#125;zt|z|b  <span class="comment">#将第N行置为屏幕顶|中间|底行，默认是当前行</span></span><br><span class="line">    <span class="comment">#其中t == Enter; - == b</span></span><br><span class="line">V   <span class="comment">#可视化模式，按行操作</span></span><br><span class="line">v   <span class="comment">#可视化模式，按字符操作</span></span><br><span class="line">ctrl+v  <span class="comment">#成列操作</span></span><br><span class="line"><span class="comment">#命令行模式下，即先冒号:进入命令行模式，然后输入命令</span></span><br><span class="line">&#123;N&#125;r filename   <span class="comment">#读入filename内容，并在第N行插入</span></span><br><span class="line">&#123;N1&#125;,&#123;N2&#125;s/old/new/|g   <span class="comment">##替换 第N1-第N2行 第一个或所有 old 为 new</span></span><br><span class="line">    <span class="comment">#N1默认为1，N2默认为当前行，$表示最后一行</span></span><br><span class="line">    <span class="comment">#N1可以小于N2</span></span><br><span class="line">    <span class="comment">#.表示当前行</span></span><br><span class="line">    <span class="comment">#当前分隔符是/，当使用+，#作为分隔符时，字符中出现的/会被视作普通字符</span></span><br><span class="line">%s/old/new/|g   <span class="comment"># 等同于 1,$s/old/new/|g</span></span><br><span class="line">g &#123;NA&#125;  <span class="comment">#搜索字符串</span></span><br><span class="line">g/old/ss/new/|g   <span class="comment">#等同于 %s/old/new/|g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################滚动</span></span><br><span class="line">Ctrl+y  <span class="comment">#上滚一行</span></span><br><span class="line">Ctrl+u  <span class="comment">#上滚半页</span></span><br><span class="line">Ctrl+d  <span class="comment">#下滚半页</span></span><br><span class="line">Ctrl+b  <span class="comment">#上滚一页</span></span><br><span class="line">Ctrl+f  <span class="comment">#下滚一页</span></span><br><span class="line">&#123;N&#125;H    <span class="comment">#将光标移动到屏幕顶行下的第N行，默认为1</span></span><br><span class="line">&#123;N&#125;L    <span class="comment">#将光标移动到屏幕底行上的第N行，默认为1</span></span><br><span class="line">z+Enter <span class="comment">#</span></span><br><span class="line"><span class="comment">###################保存退出</span></span><br><span class="line">:w  |filename   <span class="comment">#保存为filename（默认是当前文件），不退出</span></span><br><span class="line">:wq | ZZ |x <span class="comment">#保存并退出</span></span><br><span class="line">:q! <span class="comment">#不保存退出</span></span><br><span class="line">:e! <span class="comment">#放弃所有修改，从上次保存文件开始再编辑</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h1>
<h2 id="支持python3"><a class="markdownIt-Anchor" href="#支持python3"></a> 支持python3</h2>
<ol>
<li><code>./configure --enable-python3interp=dynamic --with-python3-config-dir=python对应版本的配置路径</code></li>
<li>在对应vimrc配置文件中 <code>set pythonthreedll=/python-path/libpython3.so</code></li>
</ol>
<h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2>
<p>encoding、fileencoding、fileencodings、termercoding（终端）</p>
<h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2>
<ol>
<li>vim启动，根据vimrc设置的encoding来设置buffer、菜单、消息等</li>
<li>读取文件时，根据fileencodings的编码方式列表，解码文件，直到解码无错误，并设置此时的编码方式为fileencoding</li>
<li>对比步骤2》的fileencoding的值与encoding的值，若不同则调用iconc将内容由fileencoding转为encoding，此时需要iconv</li>
<li>保存文件时，再次对比fileencoding和encoding，若不同再次调用iconv进行转换，最后保存为fileencoding编码；</li>
</ol>
<h1 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h1>
<h2 id="vundle"><a class="markdownIt-Anchor" href="#vundle"></a> vundle</h2>
<ol>
<li>
<p><a href="https://github.com/VundleVim/Vundle.vim/blob/master/doc/vundle.txt">安装</a></p>
<ul>
<li>
<p>可以将vundle安装到任何位置，只要在配置文件中即<code>set rtp=</code>能够指定即可</p>
</li>
<li>
<p>当在配置文件中设置了插件安装路径时，尽量不要与下载的vundle在同一目录，因为执行vundle的PluginClean时，它默认从安装目录中删除在配置文件中无效的插件（即插件文件夹），这里的无效是指配置文件中已注释的插件和在安装目录中无效的文件夹（即在配置文件中没有出现的文件夹），其实简单的说就是在安装目录中只保留在配置文件中有效插件对应的文件夹，其余的全删掉</p>
</li>
<li>
<p>尽量将插件安装在$HOME下，因为有时会因为用户没有权限而造成插件使用失败；</p>
</li>
</ul>
</li>
<li>
<p>vimrc配置</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible  <span class="string">&quot; 去除VI一致性,必须要添加</span></span><br><span class="line"><span class="string">filetype off  &quot;</span> 必须要添加</span><br><span class="line"><span class="string">&quot; 设置包括vundle和初始化相关的runtime path</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">call vundle#begin() &quot;</span> 请将安装插件的命令放在vundle<span class="comment">#begin和vundle#end之间.</span></span><br><span class="line"><span class="string">&quot; 另一种选择, 指定一个vundle安装插件的路径</span></span><br><span class="line"><span class="string">&quot;</span>call vundle<span class="comment">#begin(&#x27;~/some/path/here&#x27;)</span></span><br><span class="line"><span class="string">&quot; 让vundle管理插件版本,必须</span></span><br><span class="line"><span class="string">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> 以下范例用来支持不同格式的插件安装.</span><br><span class="line"><span class="string">&quot; Github上的插件</span></span><br><span class="line"><span class="string">&quot;</span> 格式为 Plugin <span class="string">&#x27;用户名/插件仓库名&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"><span class="string">&quot; 来自 http://vim-scripts.org/vim/scripts.html 的插件</span></span><br><span class="line"><span class="string">&quot;</span> Plugin <span class="string">&#x27;插件名称&#x27;</span> 实际上是 Plugin <span class="string">&#x27;vim-scripts/插件仓库名&#x27;</span> 只是此处的用户名可以省略</span><br><span class="line">Plugin <span class="string">&#x27;L9&#x27;</span></span><br><span class="line"><span class="string">&quot; 由Git支持但不再github上的插件仓库 Plugin &#x27;git clone 后面的地址&#x27;</span></span><br><span class="line"><span class="string">Plugin &#x27;git://git.wincent.com/command-t.git&#x27;</span></span><br><span class="line"><span class="string">&quot;</span> 本地的Git仓库(例如自己的插件) Plugin <span class="string">&#x27;file:///+本地插件仓库绝对路径&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;file:///home/gmarik/path/to/plugin&#x27;</span></span><br><span class="line"><span class="string">&quot; 插件在仓库的子目录中.</span></span><br><span class="line"><span class="string">&quot;</span> 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下</span><br><span class="line">Plugin <span class="string">&#x27;rstacruz/sparkup&#x27;</span>, &#123;<span class="string">&#x27;rtp&#x27;</span>: <span class="string">&#x27;vim/&#x27;</span>&#125;</span><br><span class="line"><span class="string">&quot; 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突</span></span><br><span class="line"><span class="string">Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;</span> 你的所有插件需要在下面这行之前</span><br><span class="line">call vundle<span class="comment">#end()            &quot; 必须</span></span><br><span class="line">filetype plugin indent on    <span class="string">&quot; 必须 加载vim自带和插件相应的语法和文件类型相关脚本</span></span><br><span class="line"><span class="string">&quot;</span> 忽视插件改变缩进,可以使用以下替代:</span><br><span class="line"><span class="string">&quot;filetype plugin on</span></span><br><span class="line"><span class="string">查阅 :h vundle 获取更多细节和wiki以及FAQ</span></span><br><span class="line"><span class="string">将你自己对非插件片段放在这行之后</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>基本命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:PluginList       - 列出所有已配置的插件</span><br><span class="line">:PluginList       - 更新插件</span><br><span class="line">:PluginInstall     - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate</span><br><span class="line">:PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存</span><br><span class="line">:PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件，需要在vimrc中移除想要清除的插件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>
<p>插件管理</p>
<ol>
<li>将插件按照规则写在vimrc文件中</li>
<li>保存退出之后，有两种安装方式：
<ol>
<li>运行vim，再运行 :PluginInstall</li>
<li>命令行运行直接安装，<code>vim +PluginInstall +qall</code></li>
</ol>
</li>
</ol>
</li>
<li>
<p>pass</p>
</li>
</ol>
<h2 id="jedi"><a class="markdownIt-Anchor" href="#jedi"></a> jedi</h2>
<p><code>Plugin 'davidhalter/jedi-vim'</code></p>
<blockquote>
<p><code>&lt;leader&gt;</code> 是 \</p>
</blockquote>
<ul>
<li><code>ctrl+space</code> 自动补全</li>
<li><code>\+d</code> jump to define</li>
<li><code>\+g</code> jump to declaration</li>
<li><code>K</code> display documents</li>
<li><code>\+n</code> display the call list</li>
<li><code>ctrl+o</code> a backward jump when a function jumps</li>
<li><code>ctrl+i</code> a forward jump when a function jumps</li>
</ul>
<h2 id="nerdcomment"><a class="markdownIt-Anchor" href="#nerdcomment"></a> nerdcomment</h2>
<p>目录树</p>
<ol>
<li>
<p>安装<br />
<code>Plugin 'scrooloose/nerdtree'</code></p>
</li>
<li>
<p>vimrc配置</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#F3 快捷键 显示或隐藏 目录</span></span><br><span class="line">map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;</span><br><span class="line">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>?</code> 弹出、关闭帮助窗口</li>
</ol>
<h2 id="taglist-or-tagbar"><a class="markdownIt-Anchor" href="#taglist-or-tagbar"></a> taglist or tagbar</h2>
<ol>
<li>
<p>install<br />
<code>Plugin 'taglist.vim'</code></p>
</li>
<li>
<p>config</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> Tlist_Show_One_File=1     <span class="string">&quot;不同时显示多个文件的tag，只显示当前文件的    </span></span><br><span class="line"><span class="string">let Tlist_Exit_OnlyWindow=1   &quot;</span>如果taglist窗口是最后一个窗口，则退出vim   </span><br><span class="line"><span class="built_in">let</span> Tlist_Ctags_Cmd=<span class="string">&quot;/usr/bin/ctags&quot;</span> <span class="string">&quot;将taglist与ctags关联  </span></span><br><span class="line"><span class="string">let Tlist_Sort_Type=&quot;</span>name<span class="string">&quot;  &quot;</span>按名称排序，默认为按所属类</span><br><span class="line"><span class="built_in">let</span> Tlist_Use_Right_Window=1 <span class="string">&quot;窗口出现在右侧</span></span><br><span class="line"><span class="string">let Tlist_Show_Menu=1 &quot;</span>显示菜单，Tlist_Max_Submenu_Items和Tlist_Max_Tag_Length来控制菜单条目数和所显示tag名字的长度；</span><br><span class="line"><span class="built_in">let</span> Tlist_Use_SingleClick=1 <span class="string">&quot;单击tag跳转，默认是双击</span></span><br><span class="line"><span class="string">let Tlist_Auto_Open=1 &quot;</span>随着vim启动打开tag</span><br><span class="line"><span class="built_in">let</span> Tlist_Close_On_Select=1 <span class="string">&quot;选中tag后关闭</span></span><br><span class="line"><span class="string">let Tlist_File_Fold_Auto_Close=1 &quot;</span>同时显示多个文件的taglist</span><br><span class="line"><span class="built_in">let</span> Tlist_GainFocus_On_ToggleOpen=1 <span class="string">&quot;在使用:TlistToggle打开taglist窗口时，如果希望输入焦点在taglist窗口中</span></span><br><span class="line"><span class="string">let Tlist_Process_File_Always=1 &quot;</span>taglist始终解析文件中的tag，不管taglist窗口有没有打开，设置为1；</span><br><span class="line"><span class="string">&quot;Tlist_WinHeight和Tlist_WinWidth可以设置taglist窗口的高度和宽度。Tlist_Use_Horiz_Window为１设置taglist窗口横向显示；</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>command</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;CR&gt;      跳到光标下tag所定义的位置，用鼠标双击此tag功能也一样</span><br><span class="line">o         在一个新打开的窗口中显示光标下tag </span><br><span class="line">&lt;Space&gt;   显示光标下tag的原型定义会在最底部的状态栏显示, 函数的原型</span><br><span class="line">u         更新taglist窗口中的tag</span><br><span class="line">s         更改排序方式，在按名字排序和按出现顺序排序间切换  </span><br><span class="line">x         taglist窗口放大和缩小，方便查看较长的tag </span><br><span class="line">+         打开一个折叠，同zo</span><br><span class="line">-         将tag折叠起来，同zc</span><br><span class="line">*         打开所有的折叠，同zR</span><br><span class="line">=         将所有tag折叠起来，同zM     // 上面这些就是折叠的操作了</span><br><span class="line">[[        跳到前一个文件</span><br><span class="line">]]        跳到后一个文件 </span><br><span class="line">q         关闭taglist窗口</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tool</category>
        <category>vim</category>
      </categories>
  </entry>
  <entry>
    <title>git命令</title>
    <url>//posts/20210514-341ecd43.html</url>
    <content><![CDATA[<!-- toc -->
<h2 id="快搜命令"><a class="markdownIt-Anchor" href="#快搜命令"></a> 快搜命令</h2>
<p><img src="/assets/images/b0b31803422c45ae86852f9439685c0a.jpg" alt="b0b31803422c45ae86852f9439685c0a" /></p>
]]></content>
      <categories>
        <category>tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>git提交规范</title>
    <url>//posts/20210514-596552e8.html</url>
    <content><![CDATA[<!-- toc -->
<p>[TOC]</p>
<h2 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h2>
<p>每次提交，都包含三个部分：Header、Body和Footer；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>(<span class="tag">&lt;<span class="name">scope</span>&gt;</span>): <span class="tag">&lt;<span class="name">subject</span>&gt;</span></span><br><span class="line">// 空一行</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">// 空一行</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>其中，Header 是必需的，Body 和 Footer 可以省略。<br />
不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观</p>
<h2 id="header"><a class="markdownIt-Anchor" href="#header"></a> Header</h2>
<h3 id="type"><a class="markdownIt-Anchor" href="#type"></a> type</h3>
<ul>
<li>必填</li>
<li>用于说明commit的类型
<ul>
<li>feat：新功能（feature）</li>
<li>fix：修补bug</li>
<li>docs：文档</li>
<li>style：格式</li>
<li>refactor：重构</li>
<li>test：测试</li>
<li>chore：工具变动</li>
</ul>
</li>
</ul>
<blockquote>
<p>type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要</p>
</blockquote>
<ul>
<li>大</li>
</ul>
<h3 id="scope"><a class="markdownIt-Anchor" href="#scope"></a> scope</h3>
<ul>
<li>可选</li>
<li>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同</li>
</ul>
<h3 id="subject"><a class="markdownIt-Anchor" href="#subject"></a> subject</h3>
<ul>
<li>必填</li>
<li>commit 目的的简短描述，不超过50个字符
<ul>
<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li>
<li>第一个字母小写</li>
<li>结尾不加句号</li>
</ul>
</li>
</ul>
<h2 id="body"><a class="markdownIt-Anchor" href="#body"></a> Body</h2>
<ul>
<li>对本次 commit 的详细描述，可以分成多行</li>
<li>应该说明代码变动的动机，以及与以前行为的对比。</li>
</ul>
<h2 id="footer"><a class="markdownIt-Anchor" href="#footer"></a> Footer</h2>
<p>只适用两种情况：</p>
<ol>
<li>不兼容变动<br />
如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">BREAKING CHANGE: isolate scope bindings definition has changed.</span><br><span class="line">    To migrate the code follow the example below:</span><br><span class="line">    Before:</span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;attribute&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    After:</span><br><span class="line">    scope: &#123;</span><br><span class="line">      myAttr: <span class="string">&#x27;@&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    The removed `inject` wasn&#x27;t generaly useful for directives so there should be no co...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>关闭Issue</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Closes <span class="selector-id">#123</span>, <span class="selector-id">#245</span>, <span class="selector-id">#992</span></span><br></pre></td></tr></table></figure>
<h2 id="revert"><a class="markdownIt-Anchor" href="#revert"></a> Revert</h2>
<ul>
<li>
<p>当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>
</li>
<li>
<p>Body部分的格式是固定的，必须写成<code>This reverts commit &amp;lt;hash&gt;.</code>，其中的hash是被撤销 commit 的 SHA 标识符。</p>
</li>
<li>
<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">revert: <span class="built_in">feat</span>(pencil): add <span class="string">&#x27;graphiteWidth&#x27;</span> option</span><br><span class="line">This reverts commit <span class="number">667</span>ecc1654a317a13331b17617d973392f415f02.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>pro-git</title>
    <url>//posts/20210415-d01b8c8e.html</url>
    <content><![CDATA[<!-- toc -->
<!-- <div class="pdfobject-container" data-target="file_path" data-height="500px"></div> -->
<h1 id="pdf"><a class="markdownIt-Anchor" href="#pdf"></a> <a href="http://resource.iamfengdy.com/assets/books/8ab48fc1591b451faa1f996ccfdfad5e.pdf">PDF</a></h1>
]]></content>
      <categories>
        <category>tool</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>pdf</tag>
      </tags>
  </entry>
</search>
